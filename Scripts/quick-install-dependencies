#!/bin/bash

# Do almost the same thing as Carthage but don't make a fat binary.

show_help() {
    cat <<-EOS
Usage: quick-install-dependencies [-h] [-f]

Options:
    -h, --help   Show this help and exit
    -f, --force  Force build ignoring cache
EOS
}

if [ $# -gt 1 ]; then
    echo "error: too many arguments ($# for 0..1)." >&2
    show_help >&2
    exit 1
fi
force=0
case "$1" in
    -h|--help)
        show_help
        exit
        ;;
    -f|--force)
        force=1
        ;;
    '')
        ;;
    *)
        echo "error: invalid argument '$1'." >&2
        show_help >&2
        exit 1
        ;;
esac

cd "$(git rev-parse --show-toplevel)"

if [ $force -eq 0 -a -f Carthage/Build/iOS/Apollo.framework/Apollo ]; then
    echo 'Valid cache found.' >&2
    exit
fi

carthage checkout apollo-ios

derived_data_path="$TMPDIR/DerivedData/Apollo"

mkdir -p "$derived_data_path"
trap "rm -rf '$derived_data_path'" EXIT

xcodebuild build \
    -project Carthage/Checkouts/apollo-ios/Apollo.xcodeproj \
    -scheme Apollo \
    -configuration Release \
    -derivedDataPath "$derived_data_path" \
    -sdk iphonesimulator \
    -quiet \
    ONLY_ACTIVE_ARCH=NO \
    CODE_SIGNING_REQUIRED=NO \
    CODE_SIGN_IDENTITY= \
    CARTHAGE=YES

rm -rf Carthage/Build/iOS
mkdir -p Carthage/Build/iOS
mv $TMPDIR/DerivedData/Apollo/Build/Products/Release-iphonesimulator/Apollo.framework Carthage/Build/iOS
