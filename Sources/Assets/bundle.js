!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=16)}([function(e,n,t){"use strict";(function(e){t.d(n,"a",function(){return u}),t.d(n,"b",function(){return a});var r=t(1),i="Invariant Violation",o=Object.setPrototypeOf,c=void 0===o?function(e,n){return e.__proto__=n,e}:o,u=function(e){function n(t){void 0===t&&(t=i);var r=e.call(this,"number"==typeof t?i+": "+t+" (see https://github.com/apollographql/invariant-packages)":t)||this;return r.framesToPop=1,r.name=i,c(r,n.prototype),r}return Object(r.b)(n,e),n}(Error);function a(e,n){if(!e)throw new u(n)}function s(e){return function(){return console[e].apply(console,arguments)}}!function(e){e.warn=s("warn"),e.error=s("error")}(a||(a={}));var f={env:{}};if("object"==typeof e)f=e;else try{Function("stub","process = stub")(f)}catch(e){}}).call(this,t(12))},function(e,n,t){"use strict";t.d(n,"b",function(){return i}),t.d(n,"a",function(){return o});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)};function i(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}var o=function(){return(o=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e}).apply(this,arguments)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.visit=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o,r=void 0,s=Array.isArray(e),f=[e],l=-1,d=[],v=void 0,p=void 0,E=void 0,y=[],T=[],h=e;do{var N=++l===f.length,m=N&&0!==d.length;if(N){if(p=0===T.length?void 0:y[y.length-1],v=E,E=T.pop(),m){if(s)v=v.slice();else{for(var _={},k=0,b=Object.keys(v);k<b.length;k++){var O=b[k];_[O]=v[O]}v=_}for(var I=0,A=0;A<d.length;A++){var g=d[A][0],S=d[A][1];s&&(g-=I),s&&null===S?(v.splice(g,1),I++):v[g]=S}}l=r.index,f=r.keys,d=r.edits,s=r.inArray,r=r.prev}else{if(p=E?s?l:f[l]:void 0,null==(v=E?E[p]:h))continue;E&&y.push(p)}var w=void 0;if(!Array.isArray(v)){if(!u(v))throw new Error("Invalid AST Node: "+(0,i.default)(v));var L=a(n,v.kind,N);if(L){if((w=L.call(n,v,p,E,y,T))===c)break;if(!1===w){if(!N){y.pop();continue}}else if(void 0!==w&&(d.push([p,w]),!N)){if(!u(w)){y.pop();continue}v=w}}}void 0===w&&m&&d.push([p,v]),N?y.pop():(r={inArray:s,index:l,keys:f,edits:d,prev:r},s=Array.isArray(v),f=s?v:t[v.kind]||[],l=-1,d=[],E&&T.push(E),E=v)}while(void 0!==r);0!==d.length&&(h=d[d.length-1][1]);return h},n.visitInParallel=function(e){var n=new Array(e.length);return{enter:function(t){for(var r=0;r<e.length;r++)if(!n[r]){var i=a(e[r],t.kind,!1);if(i){var o=i.apply(e[r],arguments);if(!1===o)n[r]=t;else if(o===c)n[r]=c;else if(void 0!==o)return o}}},leave:function(t){for(var r=0;r<e.length;r++)if(n[r])n[r]===t&&(n[r]=null);else{var i=a(e[r],t.kind,!0);if(i){var o=i.apply(e[r],arguments);if(o===c)n[r]=c;else if(void 0!==o&&!1!==o)return o}}}}},n.visitWithTypeInfo=function(e,n){return{enter:function(t){e.enter(t);var r=a(n,t.kind,!1);if(r){var i=r.apply(n,arguments);return void 0!==i&&(e.leave(t),u(i)&&e.enter(i)),i}},leave:function(t){var r,i=a(n,t.kind,!0);return i&&(r=i.apply(n,arguments)),e.leave(t),r}}},n.getVisitFn=a,n.BREAK=n.QueryDocumentKeys=void 0;var r,i=(r=t(5))&&r.__esModule?r:{default:r};var o={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]};n.QueryDocumentKeys=o;var c={};function u(e){return Boolean(e&&"string"==typeof e.kind)}function a(e,n,t){var r=e[n];if(r){if(!t&&"function"==typeof r)return r;var i=t?r.leave:r.enter;if("function"==typeof i)return i}else{var o=t?e.leave:e.enter;if(o){if("function"==typeof o)return o;var c=o[n];if("function"==typeof c)return c}}}n.BREAK=c},function(e,n,t){"use strict";(function(e){t.d(n,"a",function(){return r});t(2),t(0),t(1),t(15),t(13);function r(e){return e.definitions.filter(function(e){return"OperationDefinition"===e.kind&&e.name}).map(function(e){return e.name.value})[0]||null}"function"==typeof WeakMap&&"object"==typeof navigator&&navigator.product,Object.prototype.toString;Object.prototype.hasOwnProperty;Object.create({})}).call(this,t(12))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.GraphQLError=c;var r=t(10),i=t(11);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,n,t,r,u,a,s){var f=Array.isArray(n)?0!==n.length?n:void 0:n?[n]:void 0,l=t;if(!l&&f){var d=f[0];l=d&&d.loc&&d.loc.source}var v,p=r;!p&&f&&(p=f.reduce(function(e,n){return n.loc&&e.push(n.loc.start),e},[])),p&&0===p.length&&(p=void 0),r&&t?v=r.map(function(e){return(0,i.getLocation)(t,e)}):f&&(v=f.reduce(function(e,n){return n.loc&&e.push((0,i.getLocation)(n.loc.source,n.loc.start)),e},[]));var E=s;if(null==E&&null!=a){var y=a.extensions;null!=y&&"object"===o(y)&&(E=y)}Object.defineProperties(this,{message:{value:e,enumerable:!0,writable:!0},locations:{value:v||void 0,enumerable:Boolean(v)},path:{value:u||void 0,enumerable:Boolean(u)},nodes:{value:f||void 0},source:{value:l||void 0},positions:{value:p||void 0},originalError:{value:a},extensions:{value:E||void 0,enumerable:Boolean(E)}}),a&&a.stack?Object.defineProperty(this,"stack",{value:a.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,c):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}c.prototype=Object.create(Error.prototype,{constructor:{value:c},name:{value:"GraphQLError"},toString:{value:function(){return(0,r.printError)(this)}}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return a(e,[])};var r,i=(r=t(6))&&r.__esModule?r:{default:r};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var c=10,u=2;function a(e,n){switch(o(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return function(e,n){if(-1!==n.indexOf(e))return"[Circular]";var t=[].concat(n,[e]);if(e){var r=function(e){var n=e[String(i.default)];if("function"==typeof n)return n;if("function"==typeof e.inspect)return e.inspect}(e);if(void 0!==r){var o=r.call(e);if(o!==e)return"string"==typeof o?o:a(o,t)}else if(Array.isArray(e))return function(e,n){if(0===e.length)return"[]";if(n.length>u)return"[Array]";for(var t=Math.min(c,e.length),r=e.length-t,i=[],o=0;o<t;++o)i.push(a(e[o],n));1===r?i.push("... 1 more item"):r>1&&i.push("... ".concat(r," more items"));return"["+i.join(", ")+"]"}(e,t);return function(e,n){var t=Object.keys(e);if(0===t.length)return"{}";if(n.length>u)return"["+function(e){var n=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===n&&"function"==typeof e.constructor){var t=e.constructor.name;if("string"==typeof t)return t}return n}(e)+"]";return"{ "+t.map(function(t){var r=a(e[t],n);return t+": "+r}).join(", ")+" }"}(e,t)}return String(e)}(e,n);default:return String(e)}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r="function"==typeof Symbol?Symbol.for("nodejs.util.inspect.custom"):void 0;n.default=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.prototype.toString;e.prototype.toJSON=n,e.prototype.inspect=n,i.default&&(e.prototype[i.default]=n)};var r,i=(r=t(6))&&r.__esModule?r:{default:r}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){if(!Boolean(e))throw new Error(n)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"GraphQLError",{enumerable:!0,get:function(){return r.GraphQLError}}),Object.defineProperty(n,"syntaxError",{enumerable:!0,get:function(){return i.syntaxError}}),Object.defineProperty(n,"locatedError",{enumerable:!0,get:function(){return o.locatedError}}),Object.defineProperty(n,"printError",{enumerable:!0,get:function(){return c.printError}}),Object.defineProperty(n,"formatError",{enumerable:!0,get:function(){return u.formatError}});var r=t(4),i=t(21),o=t(22),c=t(10),u=t(23)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.printError=function(e){var n=[];if(e.nodes){var t=!0,o=!1,c=void 0;try{for(var u,a=e.nodes[Symbol.iterator]();!(t=(u=a.next()).done);t=!0){var s=u.value;s.loc&&n.push(i(s.loc.source,(0,r.getLocation)(s.loc.source,s.loc.start)))}}catch(e){o=!0,c=e}finally{try{t||null==a.return||a.return()}finally{if(o)throw c}}}else if(e.source&&e.locations){var f=e.source,l=!0,d=!1,v=void 0;try{for(var p,E=e.locations[Symbol.iterator]();!(l=(p=E.next()).done);l=!0){var y=p.value;n.push(i(f,y))}}catch(e){d=!0,v=e}finally{try{l||null==E.return||E.return()}finally{if(d)throw v}}}return 0===n.length?e.message:[e.message].concat(n).join("\n\n")+"\n"};var r=t(11);function i(e,n){var t=e.locationOffset.column-1,r=o(t)+e.body,i=n.line-1,c=e.locationOffset.line-1,u=n.line+c,a=1===n.line?t:0,s=n.column+a,f=r.split(/\r\n|[\n\r]/g);return"".concat(e.name," (").concat(u,":").concat(s,")\n")+function(e){var n=e.filter(function(e){e[0];var n=e[1];return void 0!==n}),t=0,r=!0,i=!1,c=void 0;try{for(var u,a=n[Symbol.iterator]();!(r=(u=a.next()).done);r=!0){var s=u.value,f=s[0];t=Math.max(t,f.length)}}catch(e){i=!0,c=e}finally{try{r||null==a.return||a.return()}finally{if(i)throw c}}return n.map(function(e){var n,r=e[0],i=e[1];return o(t-(n=r).length)+n+i}).join("\n")}([["".concat(u-1,": "),f[i-1]],["".concat(u,": "),f[i]],["",o(s-1)+"^"],["".concat(u+1,": "),f[i+1]]])}function o(e){return Array(e+1).join(" ")}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getLocation=function(e,n){var t,r=/\r\n|[\n\r]/g,i=1,o=n+1;for(;(t=r.exec(e.body))&&t.index<n;)i+=1,o=n+1-(t.index+t[0].length);return{line:i,column:o}}},function(e,n){var t,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function u(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{r="function"==typeof clearTimeout?clearTimeout:c}catch(e){r=c}}();var a,s=[],f=!1,l=-1;function d(){f&&a&&(f=!1,a.length?s=a.concat(s):l=-1,s.length&&v())}function v(){if(!f){var e=u(d);f=!0;for(var n=s.length;n;){for(a=s,s=[];++l<n;)a&&a[l].run();l=-1,n=s.length}a=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===c||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(n){try{return r.call(null,e)}catch(n){return r.call(this,e)}}}(e)}}function p(e,n){this.fun=e,this.array=n}function E(){}i.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];s.push(new p(e,n)),1!==s.length||f||u(v)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=E,i.addListener=E,i.once=E,i.off=E,i.removeListener=E,i.removeAllListeners=E,i.emit=E,i.prependListener=E,i.prependOnceListener=E,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,n,t){"use strict";var r=Object.prototype;r.toString,r.hasOwnProperty,new Map},function(e,n,t){e.exports=t(28).Observable},function(e,n,t){"use strict";e.exports=function(e,n){n||(n={}),"function"==typeof n&&(n={cmp:n});var t,r="boolean"==typeof n.cycles&&n.cycles,i=n.cmp&&(t=n.cmp,function(e){return function(n,r){var i={key:n,value:e[n]},o={key:r,value:e[r]};return t(i,o)}}),o=[];return function e(n){if(n&&n.toJSON&&"function"==typeof n.toJSON&&(n=n.toJSON()),void 0!==n){if("number"==typeof n)return isFinite(n)?""+n:"null";if("object"!=typeof n)return JSON.stringify(n);var t,c;if(Array.isArray(n)){for(c="[",t=0;t<n.length;t++)t&&(c+=","),c+=e(n[t])||"null";return c+"]"}if(null===n)return"null";if(-1!==o.indexOf(n)){if(r)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var u=o.push(n)-1,a=Object.keys(n).sort(i&&i(n));for(c="",t=0;t<a.length;t++){var s=a[t],f=e(n[s]);f&&(c&&(c+=","),c+=JSON.stringify(s)+":"+f)}return o.splice(u,1),"{"+c+"}"}}(e)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=new(t(17).default);window.__APOLLO_CLIENT__=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(18),i=t(29),o=function(){function e(){this.version="2.0.0",this.eventSource=null,this.link=i.ApolloLink.empty()}return Object.defineProperty(e.prototype,"cache",{get:function(){var e=this;return{extract:function(n){return void 0===n&&(n=!1),e.startListening(),{}},readQuery:function(e,n){return void 0===n&&(n=!1),null}}},enumerable:!0,configurable:!0}),e.prototype.startListening=function(){var e=this;this.eventSource=new EventSource("/events"),this.eventSource.onmessage=function(n){var t=e.transformEvent(JSON.parse(n.data));console.log(t),e.devToolsHookCb&&e.devToolsHookCb(t)}},e.prototype.stopListening=function(){this.eventSource&&(this.eventSource.close(),this.eventSource=null)},e.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},e.prototype.transformEvent=function(e){return Object.keys(e.state.queries).forEach(function(n){e.state.queries[n].document=r.parse(e.state.queries[n].document)}),Object.keys(e.state.mutations).forEach(function(n){e.state.mutations[n].mutation=r.parse(e.state.mutations[n].mutation)}),e},e}();n.default=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.parse=function(e,n){var t="string"==typeof e?new o.Source(e):e;if(!(t instanceof o.Source))throw new TypeError("Must provide Source. Received: ".concat((0,r.default)(t)));return function(e){var n=e.token;return{kind:a.Kind.DOCUMENT,definitions:te(e,u.TokenKind.SOF,d,u.TokenKind.EOF),loc:Q(e,n)}}((0,u.createLexer)(t,n||{}))},n.parseValue=function(e,n){var t="string"==typeof e?new o.Source(e):e,r=(0,u.createLexer)(t,n||{});z(r,u.TokenKind.SOF);var i=I(r,!1);return z(r,u.TokenKind.EOF),i},n.parseType=function(e,n){var t="string"==typeof e?new o.Source(e):e,r=(0,u.createLexer)(t,n||{});z(r,u.TokenKind.SOF);var i=C(r);return z(r,u.TokenKind.EOF),i},n.parseConstValue=g,n.parseTypeReference=C,n.parseNamedType=K;var r=f(t(5)),i=f(t(7)),o=t(19),c=t(9),u=t(24),a=t(26),s=t(27);function f(e){return e&&e.__esModule?e:{default:e}}function l(e){var n=z(e,u.TokenKind.NAME);return{kind:a.Kind.NAME,value:n.value,loc:Q(e,n)}}function d(e){if(H(e,u.TokenKind.NAME))switch(e.token.value){case"query":case"mutation":case"subscription":case"fragment":return v(e);case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return R(e);case"extend":return function(e){var n=e.lookahead();if(n.kind===u.TokenKind.NAME)switch(n.value){case"schema":return function(e){var n=e.token;$(e,"extend"),$(e,"schema");var t=w(e,!0),r=H(e,u.TokenKind.BRACE_L)?te(e,u.TokenKind.BRACE_L,x,u.TokenKind.BRACE_R):[];if(0===t.length&&0===r.length)throw ee(e);return{kind:a.Kind.SCHEMA_EXTENSION,directives:t,operationTypes:r,loc:Q(e,n)}}(e);case"scalar":return function(e){var n=e.token;$(e,"extend"),$(e,"scalar");var t=l(e),r=w(e,!0);if(0===r.length)throw ee(e);return{kind:a.Kind.SCALAR_TYPE_EXTENSION,name:t,directives:r,loc:Q(e,n)}}(e);case"type":return function(e){var n=e.token;$(e,"extend"),$(e,"type");var t=l(e),r=F(e),i=w(e,!0),o=M(e);if(0===r.length&&0===i.length&&0===o.length)throw ee(e);return{kind:a.Kind.OBJECT_TYPE_EXTENSION,name:t,interfaces:r,directives:i,fields:o,loc:Q(e,n)}}(e);case"interface":return function(e){var n=e.token;$(e,"extend"),$(e,"interface");var t=l(e),r=w(e,!0),i=M(e);if(0===r.length&&0===i.length)throw ee(e);return{kind:a.Kind.INTERFACE_TYPE_EXTENSION,name:t,directives:r,fields:i,loc:Q(e,n)}}(e);case"union":return function(e){var n=e.token;$(e,"extend"),$(e,"union");var t=l(e),r=w(e,!0),i=V(e);if(0===r.length&&0===i.length)throw ee(e);return{kind:a.Kind.UNION_TYPE_EXTENSION,name:t,directives:r,types:i,loc:Q(e,n)}}(e);case"enum":return function(e){var n=e.token;$(e,"extend"),$(e,"enum");var t=l(e),r=w(e,!0),i=G(e);if(0===r.length&&0===i.length)throw ee(e);return{kind:a.Kind.ENUM_TYPE_EXTENSION,name:t,directives:r,values:i,loc:Q(e,n)}}(e);case"input":return function(e){var n=e.token;$(e,"extend"),$(e,"input");var t=l(e),r=w(e,!0),i=Y(e);if(0===r.length&&0===i.length)throw ee(e);return{kind:a.Kind.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:r,fields:i,loc:Q(e,n)}}(e)}throw ee(e,n)}(e)}else{if(H(e,u.TokenKind.BRACE_L))return v(e);if(P(e))return R(e)}throw ee(e)}function v(e){if(H(e,u.TokenKind.NAME))switch(e.token.value){case"query":case"mutation":case"subscription":return p(e);case"fragment":return function(e){var n=e.token;if($(e,"fragment"),e.options.experimentalFragmentVariables)return{kind:a.Kind.FRAGMENT_DEFINITION,name:O(e),variableDefinitions:y(e),typeCondition:($(e,"on"),K(e)),directives:w(e,!1),selectionSet:N(e),loc:Q(e,n)};return{kind:a.Kind.FRAGMENT_DEFINITION,name:O(e),typeCondition:($(e,"on"),K(e)),directives:w(e,!1),selectionSet:N(e),loc:Q(e,n)}}(e)}else if(H(e,u.TokenKind.BRACE_L))return p(e);throw ee(e)}function p(e){var n=e.token;if(H(e,u.TokenKind.BRACE_L))return{kind:a.Kind.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:N(e),loc:Q(e,n)};var t,r=E(e);return H(e,u.TokenKind.NAME)&&(t=l(e)),{kind:a.Kind.OPERATION_DEFINITION,operation:r,name:t,variableDefinitions:y(e),directives:w(e,!1),selectionSet:N(e),loc:Q(e,n)}}function E(e){var n=z(e,u.TokenKind.NAME);switch(n.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw ee(e,n)}function y(e){return H(e,u.TokenKind.PAREN_L)?te(e,u.TokenKind.PAREN_L,T,u.TokenKind.PAREN_R):[]}function T(e){var n=e.token;return{kind:a.Kind.VARIABLE_DEFINITION,variable:h(e),type:(z(e,u.TokenKind.COLON),C(e)),defaultValue:W(e,u.TokenKind.EQUALS)?I(e,!0):void 0,directives:w(e,!0),loc:Q(e,n)}}function h(e){var n=e.token;return z(e,u.TokenKind.DOLLAR),{kind:a.Kind.VARIABLE,name:l(e),loc:Q(e,n)}}function N(e){var n=e.token;return{kind:a.Kind.SELECTION_SET,selections:te(e,u.TokenKind.BRACE_L,m,u.TokenKind.BRACE_R),loc:Q(e,n)}}function m(e){return H(e,u.TokenKind.SPREAD)?function(e){var n=e.token;z(e,u.TokenKind.SPREAD);var t=Z(e,"on");if(!t&&H(e,u.TokenKind.NAME))return{kind:a.Kind.FRAGMENT_SPREAD,name:O(e),directives:w(e,!1),loc:Q(e,n)};return{kind:a.Kind.INLINE_FRAGMENT,typeCondition:t?K(e):void 0,directives:w(e,!1),selectionSet:N(e),loc:Q(e,n)}}(e):function(e){var n,t,r=e.token,i=l(e);W(e,u.TokenKind.COLON)?(n=i,t=l(e)):t=i;return{kind:a.Kind.FIELD,alias:n,name:t,arguments:_(e,!1),directives:w(e,!1),selectionSet:H(e,u.TokenKind.BRACE_L)?N(e):void 0,loc:Q(e,r)}}(e)}function _(e,n){var t=n?b:k;return H(e,u.TokenKind.PAREN_L)?te(e,u.TokenKind.PAREN_L,t,u.TokenKind.PAREN_R):[]}function k(e){var n=e.token,t=l(e);return z(e,u.TokenKind.COLON),{kind:a.Kind.ARGUMENT,name:t,value:I(e,!1),loc:Q(e,n)}}function b(e){var n=e.token;return{kind:a.Kind.ARGUMENT,name:l(e),value:(z(e,u.TokenKind.COLON),g(e)),loc:Q(e,n)}}function O(e){if("on"===e.token.value)throw ee(e);return l(e)}function I(e,n){var t=e.token;switch(t.kind){case u.TokenKind.BRACKET_L:return function(e,n){var t=e.token,r=n?g:S;return{kind:a.Kind.LIST,values:ne(e,u.TokenKind.BRACKET_L,r,u.TokenKind.BRACKET_R),loc:Q(e,t)}}(e,n);case u.TokenKind.BRACE_L:return function(e,n){var t=e.token;return{kind:a.Kind.OBJECT,fields:ne(e,u.TokenKind.BRACE_L,function(){return function(e,n){var t=e.token,r=l(e);return z(e,u.TokenKind.COLON),{kind:a.Kind.OBJECT_FIELD,name:r,value:I(e,n),loc:Q(e,t)}}(e,n)},u.TokenKind.BRACE_R),loc:Q(e,t)}}(e,n);case u.TokenKind.INT:return e.advance(),{kind:a.Kind.INT,value:t.value,loc:Q(e,t)};case u.TokenKind.FLOAT:return e.advance(),{kind:a.Kind.FLOAT,value:t.value,loc:Q(e,t)};case u.TokenKind.STRING:case u.TokenKind.BLOCK_STRING:return A(e);case u.TokenKind.NAME:return"true"===t.value||"false"===t.value?(e.advance(),{kind:a.Kind.BOOLEAN,value:"true"===t.value,loc:Q(e,t)}):"null"===t.value?(e.advance(),{kind:a.Kind.NULL,loc:Q(e,t)}):(e.advance(),{kind:a.Kind.ENUM,value:t.value,loc:Q(e,t)});case u.TokenKind.DOLLAR:if(!n)return h(e)}throw ee(e)}function A(e){var n=e.token;return e.advance(),{kind:a.Kind.STRING,value:n.value,block:n.kind===u.TokenKind.BLOCK_STRING,loc:Q(e,n)}}function g(e){return I(e,!0)}function S(e){return I(e,!1)}function w(e,n){for(var t=[];H(e,u.TokenKind.AT);)t.push(L(e,n));return t}function L(e,n){var t=e.token;return z(e,u.TokenKind.AT),{kind:a.Kind.DIRECTIVE,name:l(e),arguments:_(e,n),loc:Q(e,t)}}function C(e){var n,t=e.token;return W(e,u.TokenKind.BRACKET_L)?(n=C(e),z(e,u.TokenKind.BRACKET_R),n={kind:a.Kind.LIST_TYPE,type:n,loc:Q(e,t)}):n=K(e),W(e,u.TokenKind.BANG)?{kind:a.Kind.NON_NULL_TYPE,type:n,loc:Q(e,t)}:n}function K(e){var n=e.token;return{kind:a.Kind.NAMED_TYPE,name:l(e),loc:Q(e,n)}}function R(e){var n=P(e)?e.lookahead():e.token;if(n.kind===u.TokenKind.NAME)switch(n.value){case"schema":return function(e){var n=e.token;$(e,"schema");var t=w(e,!0),r=te(e,u.TokenKind.BRACE_L,x,u.TokenKind.BRACE_R);return{kind:a.Kind.SCHEMA_DEFINITION,directives:t,operationTypes:r,loc:Q(e,n)}}(e);case"scalar":return function(e){var n=e.token,t=D(e);$(e,"scalar");var r=l(e),i=w(e,!0);return{kind:a.Kind.SCALAR_TYPE_DEFINITION,description:t,name:r,directives:i,loc:Q(e,n)}}(e);case"type":return function(e){var n=e.token,t=D(e);$(e,"type");var r=l(e),i=F(e),o=w(e,!0),c=M(e);return{kind:a.Kind.OBJECT_TYPE_DEFINITION,description:t,name:r,interfaces:i,directives:o,fields:c,loc:Q(e,n)}}(e);case"interface":return function(e){var n=e.token,t=D(e);$(e,"interface");var r=l(e),i=w(e,!0),o=M(e);return{kind:a.Kind.INTERFACE_TYPE_DEFINITION,description:t,name:r,directives:i,fields:o,loc:Q(e,n)}}(e);case"union":return function(e){var n=e.token,t=D(e);$(e,"union");var r=l(e),i=w(e,!0),o=V(e);return{kind:a.Kind.UNION_TYPE_DEFINITION,description:t,name:r,directives:i,types:o,loc:Q(e,n)}}(e);case"enum":return function(e){var n=e.token,t=D(e);$(e,"enum");var r=l(e),i=w(e,!0),o=G(e);return{kind:a.Kind.ENUM_TYPE_DEFINITION,description:t,name:r,directives:i,values:o,loc:Q(e,n)}}(e);case"input":return function(e){var n=e.token,t=D(e);$(e,"input");var r=l(e),i=w(e,!0),o=Y(e);return{kind:a.Kind.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:r,directives:i,fields:o,loc:Q(e,n)}}(e);case"directive":return function(e){var n=e.token,t=D(e);$(e,"directive"),z(e,u.TokenKind.AT);var r=l(e),i=B(e);$(e,"on");var o=function(e){W(e,u.TokenKind.PIPE);var n=[];do{n.push(J(e))}while(W(e,u.TokenKind.PIPE));return n}(e);return{kind:a.Kind.DIRECTIVE_DEFINITION,description:t,name:r,arguments:i,locations:o,loc:Q(e,n)}}(e)}throw ee(e,n)}function P(e){return H(e,u.TokenKind.STRING)||H(e,u.TokenKind.BLOCK_STRING)}function D(e){if(P(e))return A(e)}function x(e){var n=e.token,t=E(e);z(e,u.TokenKind.COLON);var r=K(e);return{kind:a.Kind.OPERATION_TYPE_DEFINITION,operation:t,type:r,loc:Q(e,n)}}function F(e){var n=[];if(Z(e,"implements")){W(e,u.TokenKind.AMP);do{n.push(K(e))}while(W(e,u.TokenKind.AMP)||e.options.allowLegacySDLImplementsInterfaces&&H(e,u.TokenKind.NAME))}return n}function M(e){return e.options.allowLegacySDLEmptyFields&&H(e,u.TokenKind.BRACE_L)&&e.lookahead().kind===u.TokenKind.BRACE_R?(e.advance(),e.advance(),[]):H(e,u.TokenKind.BRACE_L)?te(e,u.TokenKind.BRACE_L,j,u.TokenKind.BRACE_R):[]}function j(e){var n=e.token,t=D(e),r=l(e),i=B(e);z(e,u.TokenKind.COLON);var o=C(e),c=w(e,!0);return{kind:a.Kind.FIELD_DEFINITION,description:t,name:r,arguments:i,type:o,directives:c,loc:Q(e,n)}}function B(e){return H(e,u.TokenKind.PAREN_L)?te(e,u.TokenKind.PAREN_L,U,u.TokenKind.PAREN_R):[]}function U(e){var n=e.token,t=D(e),r=l(e);z(e,u.TokenKind.COLON);var i,o=C(e);W(e,u.TokenKind.EQUALS)&&(i=g(e));var c=w(e,!0);return{kind:a.Kind.INPUT_VALUE_DEFINITION,description:t,name:r,type:o,defaultValue:i,directives:c,loc:Q(e,n)}}function V(e){var n=[];if(W(e,u.TokenKind.EQUALS)){W(e,u.TokenKind.PIPE);do{n.push(K(e))}while(W(e,u.TokenKind.PIPE))}return n}function G(e){return H(e,u.TokenKind.BRACE_L)?te(e,u.TokenKind.BRACE_L,q,u.TokenKind.BRACE_R):[]}function q(e){var n=e.token,t=D(e),r=l(e),i=w(e,!0);return{kind:a.Kind.ENUM_VALUE_DEFINITION,description:t,name:r,directives:i,loc:Q(e,n)}}function Y(e){return H(e,u.TokenKind.BRACE_L)?te(e,u.TokenKind.BRACE_L,U,u.TokenKind.BRACE_R):[]}function J(e){var n=e.token,t=l(e);if(void 0!==s.DirectiveLocation[t.value])return t;throw ee(e,n)}function Q(e,n){if(!e.options.noLocation)return new X(n,e.lastToken,e.source)}function X(e,n,t){this.start=e.start,this.end=n.end,this.startToken=e,this.endToken=n,this.source=t}function H(e,n){return e.token.kind===n}function z(e,n){var t=e.token;if(t.kind===n)return e.advance(),t;throw(0,c.syntaxError)(e.source,t.start,"Expected ".concat(n,", found ").concat((0,u.getTokenDesc)(t)))}function W(e,n){var t=e.token;if(t.kind===n)return e.advance(),t}function $(e,n){var t=e.token;if(t.kind===u.TokenKind.NAME&&t.value===n)return e.advance(),t;throw(0,c.syntaxError)(e.source,t.start,'Expected "'.concat(n,'", found ').concat((0,u.getTokenDesc)(t)))}function Z(e,n){var t=e.token;if(t.kind===u.TokenKind.NAME&&t.value===n)return e.advance(),t}function ee(e,n){var t=n||e.token;return(0,c.syntaxError)(e.source,t.start,"Unexpected ".concat((0,u.getTokenDesc)(t)))}function ne(e,n,t,r){z(e,n);for(var i=[];!W(e,r);)i.push(t(e));return i}function te(e,n,t,r){z(e,n);for(var i=[t(e)];!W(e,r);)i.push(t(e));return i}(0,i.default)(X,function(){return{start:this.start,end:this.end}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Source=void 0;var r=o(t(8)),i=o(t(20));function o(e){return e&&e.__esModule?e:{default:e}}var c=function(e,n,t){this.body=e,this.name=n||"GraphQL request",this.locationOffset=t||{line:1,column:1},this.locationOffset.line>0||(0,r.default)(0,"line in locationOffset is 1-indexed and must be positive"),this.locationOffset.column>0||(0,r.default)(0,"column in locationOffset is 1-indexed and must be positive")};n.Source=c,(0,i.default)(c)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){"function"==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return this.constructor.name}})}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.syntaxError=function(e,n,t){return new r.GraphQLError("Syntax Error: ".concat(t),void 0,e,[n])};var r=t(4)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.locatedError=function(e,n,t){if(e&&Array.isArray(e.path))return e;return new r.GraphQLError(e&&e.message,e&&e.nodes||n,e&&e.source,e&&e.positions,t,e)};var r=t(4)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.formatError=function(e){e||(0,i.default)(0,"Received null or undefined error.");var n=e.message||"An unknown error occurred.",t=e.locations,r=e.path,o=e.extensions;return o?{message:n,locations:t,path:r,extensions:o}:{message:n,locations:t,path:r}};var r,i=(r=t(8))&&r.__esModule?r:{default:r}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.createLexer=function(e,n){var t=new f(s.SOF,0,0,0,0,null);return{source:e,options:n,lastToken:t,token:t,line:1,lineStart:0,advance:u,lookahead:a}},n.isPunctuatorToken=function(e){var n=e.kind;return n===s.BANG||n===s.DOLLAR||n===s.AMP||n===s.PAREN_L||n===s.PAREN_R||n===s.SPREAD||n===s.COLON||n===s.EQUALS||n===s.AT||n===s.BRACKET_L||n===s.BRACKET_R||n===s.BRACE_L||n===s.PIPE||n===s.BRACE_R},n.getTokenDesc=function(e){var n=e.value;return n?"".concat(e.kind,' "').concat(n,'"'):e.kind},n.TokenKind=void 0;var r,i=(r=t(7))&&r.__esModule?r:{default:r},o=t(9),c=t(25);function u(){return this.lastToken=this.token,this.token=this.lookahead()}function a(){var e=this.token;if(e.kind!==s.EOF)do{e=e.next||(e.next=d(this,e))}while(e.kind===s.COMMENT);return e}var s=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});function f(e,n,t,r,i,o,c){this.kind=e,this.start=n,this.end=t,this.line=r,this.column=i,this.value=c,this.prev=o,this.next=null}function l(e){return isNaN(e)?s.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function d(e,n){var t=e.source,r=t.body,i=r.length,u=function(e,n,t){var r=e.length,i=n;for(;i<r;){var o=e.charCodeAt(i);if(9===o||32===o||44===o||65279===o)++i;else if(10===o)++i,++t.line,t.lineStart=i;else{if(13!==o)break;10===e.charCodeAt(i+1)?i+=2:++i,++t.line,t.lineStart=i}}return i}(r,n.end,e),a=e.line,d=1+u-e.lineStart;if(u>=i)return new f(s.EOF,i,i,a,d,n);var E=r.charCodeAt(u);switch(E){case 33:return new f(s.BANG,u,u+1,a,d,n);case 35:return function(e,n,t,r,i){var o,c=e.body,u=n;do{o=c.charCodeAt(++u)}while(!isNaN(o)&&(o>31||9===o));return new f(s.COMMENT,n,u,t,r,i,c.slice(n+1,u))}(t,u,a,d,n);case 36:return new f(s.DOLLAR,u,u+1,a,d,n);case 38:return new f(s.AMP,u,u+1,a,d,n);case 40:return new f(s.PAREN_L,u,u+1,a,d,n);case 41:return new f(s.PAREN_R,u,u+1,a,d,n);case 46:if(46===r.charCodeAt(u+1)&&46===r.charCodeAt(u+2))return new f(s.SPREAD,u,u+3,a,d,n);break;case 58:return new f(s.COLON,u,u+1,a,d,n);case 61:return new f(s.EQUALS,u,u+1,a,d,n);case 64:return new f(s.AT,u,u+1,a,d,n);case 91:return new f(s.BRACKET_L,u,u+1,a,d,n);case 93:return new f(s.BRACKET_R,u,u+1,a,d,n);case 123:return new f(s.BRACE_L,u,u+1,a,d,n);case 124:return new f(s.PIPE,u,u+1,a,d,n);case 125:return new f(s.BRACE_R,u,u+1,a,d,n);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return function(e,n,t,r,i){var o=e.body,c=o.length,u=n+1,a=0;for(;u!==c&&!isNaN(a=o.charCodeAt(u))&&(95===a||a>=48&&a<=57||a>=65&&a<=90||a>=97&&a<=122);)++u;return new f(s.NAME,n,u,t,r,i,o.slice(n,u))}(t,u,a,d,n);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e,n,t,r,i,c){var u=e.body,a=t,d=n,p=!1;45===a&&(a=u.charCodeAt(++d));if(48===a){if((a=u.charCodeAt(++d))>=48&&a<=57)throw(0,o.syntaxError)(e,d,"Invalid number, unexpected digit after 0: ".concat(l(a),"."))}else d=v(e,d,a),a=u.charCodeAt(d);46===a&&(p=!0,a=u.charCodeAt(++d),d=v(e,d,a),a=u.charCodeAt(d));69!==a&&101!==a||(p=!0,43!==(a=u.charCodeAt(++d))&&45!==a||(a=u.charCodeAt(++d)),d=v(e,d,a));return new f(p?s.FLOAT:s.INT,n,d,r,i,c,u.slice(n,d))}(t,u,E,a,d,n);case 34:return 34===r.charCodeAt(u+1)&&34===r.charCodeAt(u+2)?function(e,n,t,r,i,u){var a=e.body,d=n+3,v=d,p=0,E="";for(;d<a.length&&!isNaN(p=a.charCodeAt(d));){if(34===p&&34===a.charCodeAt(d+1)&&34===a.charCodeAt(d+2))return E+=a.slice(v,d),new f(s.BLOCK_STRING,n,d+3,t,r,i,(0,c.dedentBlockStringValue)(E));if(p<32&&9!==p&&10!==p&&13!==p)throw(0,o.syntaxError)(e,d,"Invalid character within String: ".concat(l(p),"."));10===p?(++d,++u.line,u.lineStart=d):13===p?(10===a.charCodeAt(d+1)?d+=2:++d,++u.line,u.lineStart=d):92===p&&34===a.charCodeAt(d+1)&&34===a.charCodeAt(d+2)&&34===a.charCodeAt(d+3)?(E+=a.slice(v,d)+'"""',v=d+=4):++d}throw(0,o.syntaxError)(e,d,"Unterminated string.")}(t,u,a,d,n,e):function(e,n,t,r,i){var c=e.body,u=n+1,a=u,d=0,v="";for(;u<c.length&&!isNaN(d=c.charCodeAt(u))&&10!==d&&13!==d;){if(34===d)return v+=c.slice(a,u),new f(s.STRING,n,u+1,t,r,i,v);if(d<32&&9!==d)throw(0,o.syntaxError)(e,u,"Invalid character within String: ".concat(l(d),"."));if(++u,92===d){switch(v+=c.slice(a,u-1),d=c.charCodeAt(u)){case 34:v+='"';break;case 47:v+="/";break;case 92:v+="\\";break;case 98:v+="\b";break;case 102:v+="\f";break;case 110:v+="\n";break;case 114:v+="\r";break;case 116:v+="\t";break;case 117:var E=(y=c.charCodeAt(u+1),T=c.charCodeAt(u+2),h=c.charCodeAt(u+3),N=c.charCodeAt(u+4),p(y)<<12|p(T)<<8|p(h)<<4|p(N));if(E<0)throw(0,o.syntaxError)(e,u,"Invalid character escape sequence: "+"\\u".concat(c.slice(u+1,u+5),"."));v+=String.fromCharCode(E),u+=4;break;default:throw(0,o.syntaxError)(e,u,"Invalid character escape sequence: \\".concat(String.fromCharCode(d),"."))}a=++u}}var y,T,h,N;throw(0,o.syntaxError)(e,u,"Unterminated string.")}(t,u,a,d,n)}throw(0,o.syntaxError)(t,u,function(e){if(e<32&&9!==e&&10!==e&&13!==e)return"Cannot contain the invalid character ".concat(l(e),".");if(39===e)return"Unexpected single quote character ('), did you mean to use a double quote (\")?";return"Cannot parse the unexpected character ".concat(l(e),".")}(E))}function v(e,n,t){var r=e.body,i=n,c=t;if(c>=48&&c<=57){do{c=r.charCodeAt(++i)}while(c>=48&&c<=57);return i}throw(0,o.syntaxError)(e,i,"Invalid number, expected digit but got: ".concat(l(c),"."))}function p(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}n.TokenKind=s,(0,i.default)(f,function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}})},function(e,n,t){"use strict";function r(e){for(var n=null,t=1;t<e.length;t++){var r=e[t],o=i(r);if(o!==r.length&&((null===n||o<n)&&0===(n=o)))break}return null===n?0:n}function i(e){for(var n=0;n<e.length&&(" "===e[n]||"\t"===e[n]);)n++;return n}function o(e){return i(e)===e.length}Object.defineProperty(n,"__esModule",{value:!0}),n.dedentBlockStringValue=function(e){var n=e.split(/\r\n|[\n\r]/g),t=r(n);if(0!==t)for(var i=1;i<n.length;i++)n[i]=n[i].slice(t);for(;n.length>0&&o(n[0]);)n.shift();for(;n.length>0&&o(n[n.length-1]);)n.pop();return n.join("\n")},n.getBlockStringIndentation=r,n.printBlockString=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=-1===e.indexOf("\n"),i=" "===e[0]||"\t"===e[0],o='"'===e[e.length-1],c=!r||o||t,u="";!c||r&&i||(u+="\n"+n);u+=n?e.replace(/\n/g,"\n"+n):e,c&&(u+="\n");return'"""'+u.replace(/"""/g,'\\"""')+'"""'}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Kind=void 0;var r=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});n.Kind=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.DirectiveLocation=void 0;var r=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});n.DirectiveLocation=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var o=function(){return"function"==typeof Symbol},c=function(e){return o()&&Boolean(Symbol[e])},u=function(e){return c(e)?Symbol[e]:"@@"+e};o()&&!c("observable")&&(Symbol.observable=Symbol("observable"));var a=u("iterator"),s=u("observable"),f=u("species");function l(e,n){var t=e[n];if(null!=t){if("function"!=typeof t)throw new TypeError(t+" is not a function");return t}}function d(e){var n=e.constructor;return void 0!==n&&null===(n=n[f])&&(n=void 0),void 0!==n?n:k}function v(e){return e instanceof k}function p(e){p.log?p.log(e):setTimeout(function(){throw e})}function E(e){Promise.resolve().then(function(){try{e()}catch(e){p(e)}})}function y(e){var n=e._cleanup;if(void 0!==n&&(e._cleanup=void 0,n))try{if("function"==typeof n)n();else{var t=l(n,"unsubscribe");t&&t.call(n)}}catch(e){p(e)}}function T(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function h(e,n,t){e._state="running";var r=e._observer;try{var i=l(r,n);switch(n){case"next":i&&i.call(r,t);break;case"error":if(T(e),!i)throw t;i.call(r,t);break;case"complete":T(e),i&&i.call(r)}}catch(e){p(e)}"closed"===e._state?y(e):"running"===e._state&&(e._state="ready")}function N(e,n,t){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:n,value:t}],void E(function(){return function(e){var n=e._queue;if(n){e._queue=void 0,e._state="ready";for(var t=0;t<n.length&&(h(e,n[t].type,n[t].value),"closed"!==e._state);++t);}}(e)})):void h(e,n,t);e._queue.push({type:n,value:t})}}var m=function(){function e(n,t){i(this,e),this._cleanup=void 0,this._observer=n,this._queue=void 0,this._state="initializing";var r=new _(this);try{this._cleanup=t.call(void 0,r)}catch(e){r.error(e)}"initializing"===this._state&&(this._state="ready")}return r(e,[{key:"unsubscribe",value:function(){"closed"!==this._state&&(T(this),y(this))}},{key:"closed",get:function(){return"closed"===this._state}}]),e}(),_=function(){function e(n){i(this,e),this._subscription=n}return r(e,[{key:"next",value:function(e){N(this._subscription,"next",e)}},{key:"error",value:function(e){N(this._subscription,"error",e)}},{key:"complete",value:function(){N(this._subscription,"complete")}},{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),k=n.Observable=function(){function e(n){if(i(this,e),!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof n)throw new TypeError("Observable initializer must be a function");this._subscriber=n}return r(e,[{key:"subscribe",value:function(e){return"object"==typeof e&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new m(e,this._subscriber)}},{key:"forEach",value:function(e){var n=this;return new Promise(function(t,r){if("function"==typeof e)var i=n.subscribe({next:function(n){try{e(n,o)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});else r(new TypeError(e+" is not a function"));function o(){i.unsubscribe(),t()}})}},{key:"map",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(d(this))(function(t){return n.subscribe({next:function(n){try{n=e(n)}catch(e){return t.error(e)}t.next(n)},error:function(e){t.error(e)},complete:function(){t.complete()}})})}},{key:"filter",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(d(this))(function(t){return n.subscribe({next:function(n){try{if(!e(n))return}catch(e){return t.error(e)}t.next(n)},error:function(e){t.error(e)},complete:function(){t.complete()}})})}},{key:"reduce",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var t=d(this),r=arguments.length>1,i=!1,o=arguments[1];return new t(function(t){return n.subscribe({next:function(n){var c=!i;if(i=!0,!c||r)try{o=e(o,n)}catch(e){return t.error(e)}else o=n},error:function(e){t.error(e)},complete:function(){if(!i&&!r)return t.error(new TypeError("Cannot reduce an empty sequence"));t.next(o),t.complete()}})})}},{key:"concat",value:function(){for(var e=this,n=arguments.length,t=Array(n),r=0;r<n;r++)t[r]=arguments[r];var i=d(this);return new i(function(n){var r=void 0,o=0;return function e(c){r=c.subscribe({next:function(e){n.next(e)},error:function(e){n.error(e)},complete:function(){o===t.length?(r=void 0,n.complete()):e(i.from(t[o++]))}})}(e),function(){r&&(r.unsubscribe(),r=void 0)}})}},{key:"flatMap",value:function(e){var n=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var t=d(this);return new t(function(r){var i=[],o=n.subscribe({next:function(n){if(e)try{n=e(n)}catch(e){return r.error(e)}var o=t.from(n).subscribe({next:function(e){r.next(e)},error:function(e){r.error(e)},complete:function(){var e=i.indexOf(o);e>=0&&i.splice(e,1),c()}});i.push(o)},error:function(e){r.error(e)},complete:function(){c()}});function c(){o.closed&&0===i.length&&r.complete()}return function(){i.forEach(function(e){return e.unsubscribe()}),o.unsubscribe()}})}},{key:s,value:function(){return this}}],[{key:"from",value:function(n){var t="function"==typeof this?this:e;if(null==n)throw new TypeError(n+" is not an object");var r=l(n,s);if(r){var i=r.call(n);if(Object(i)!==i)throw new TypeError(i+" is not an object");return v(i)&&i.constructor===t?i:new t(function(e){return i.subscribe(e)})}if(c("iterator")&&(r=l(n,a)))return new t(function(e){E(function(){if(!e.closed){var t=!0,i=!1,o=void 0;try{for(var c,u=r.call(n)[Symbol.iterator]();!(t=(c=u.next()).done);t=!0){var a=c.value;if(e.next(a),e.closed)return}}catch(e){i=!0,o=e}finally{try{!t&&u.return&&u.return()}finally{if(i)throw o}}e.complete()}})});if(Array.isArray(n))return new t(function(e){E(function(){if(!e.closed){for(var t=0;t<n.length;++t)if(e.next(n[t]),e.closed)return;e.complete()}})});throw new TypeError(n+" is not observable")}},{key:"of",value:function(){for(var n=arguments.length,t=Array(n),r=0;r<n;r++)t[r]=arguments[r];return new("function"==typeof this?this:e)(function(e){E(function(){if(!e.closed){for(var n=0;n<t.length;++n)if(e.next(t[n]),e.closed)return;e.complete()}})})}},{key:f,get:function(){return this}}]),e}();o()&&Object.defineProperty(k,Symbol("extensions"),{value:{symbol:s,hostReportError:p},configurable:!0})},function(e,n,t){"use strict";t.r(n);var r=t(14),i=t.n(r).a,o=t(0),c=t(1),u=t(3);t.d(n,"ApolloLink",function(){return m}),t.d(n,"concat",function(){return N}),t.d(n,"createOperation",function(){return v}),t.d(n,"empty",function(){return y}),t.d(n,"execute",function(){return _}),t.d(n,"from",function(){return T}),t.d(n,"fromError",function(){return d}),t.d(n,"fromPromise",function(){return l}),t.d(n,"makePromise",function(){return f}),t.d(n,"split",function(){return h}),t.d(n,"toPromise",function(){return s}),t.d(n,"Observable",function(){return i}),t.d(n,"getOperationName",function(){return u.a});!function(e){function n(n,t){var r=e.call(this,n)||this;return r.link=t,r}Object(c.b)(n,e)}(Error);function a(e){return e.request.length<=1}function s(e){var n=!1;return new Promise(function(t,r){e.subscribe({next:function(e){n||(n=!0,t(e))},error:r})})}var f=s;function l(e){return new i(function(n){e.then(function(e){n.next(e),n.complete()}).catch(n.error.bind(n))})}function d(e){return new i(function(n){n.error(e)})}function v(e,n){var t=Object(c.a)({},e);return Object.defineProperty(n,"setContext",{enumerable:!1,value:function(e){t="function"==typeof e?Object(c.a)({},t,e(t)):Object(c.a)({},t,e)}}),Object.defineProperty(n,"getContext",{enumerable:!1,value:function(){return Object(c.a)({},t)}}),Object.defineProperty(n,"toKey",{enumerable:!1,value:function(){return function(e){var n=e.query,t=e.variables,r=e.operationName;return JSON.stringify([r,n,t])}(n)}}),n}function p(e,n){return n?n(e):i.of()}function E(e){return"function"==typeof e?new m(e):e}function y(){return new m(function(){return i.of()})}function T(e){return 0===e.length?y():e.map(E).reduce(function(e,n){return e.concat(n)})}function h(e,n,t){var r=E(n),o=E(t||new m(p));return a(r)&&a(o)?new m(function(n){return e(n)?r.request(n)||i.of():o.request(n)||i.of()}):new m(function(n,t){return e(n)?r.request(n,t)||i.of():o.request(n,t)||i.of()})}var N=function(e,n){var t=E(e);if(a(t))return t;var r=E(n);return a(r)?new m(function(e){return t.request(e,function(e){return r.request(e)||i.of()})||i.of()}):new m(function(e,n){return t.request(e,function(e){return r.request(e,n)||i.of()})||i.of()})},m=function(){function e(e){e&&(this.request=e)}return e.prototype.split=function(n,t,r){return this.concat(h(n,t,r||new e(p)))},e.prototype.concat=function(e){return N(this,e)},e.prototype.request=function(e,n){throw new o.a(1)},e.empty=y,e.from=T,e.split=h,e.execute=_,e}();function _(e,n){return e.request(v(n.context,function(e){var n={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return n.operationName||(n.operationName="string"!=typeof n.query?Object(u.a)(n.query):""),n}(function(e){for(var n=["query","operationName","variables","extensions","context"],t=0,r=Object.keys(e);t<r.length;t++){var i=r[t];if(n.indexOf(i)<0)throw new o.a(2)}return e}(n))))||i.of()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzLWludmFyaWFudC9saWIvaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Zpc2l0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fwb2xsby11dGlsaXRpZXMvbGliL2J1bmRsZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3IvR3JhcGhRTEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zcGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9kZWZpbmVUb0pTT04uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3IvcHJpbnRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9sb2NhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad3J5L2VxdWFsaXR5L2xpYi9lcXVhbGl0eS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3plbi1vYnNlcnZhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYXN0LWpzb24tc3RhYmxlLXN0cmluZ2lmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fwb2xsb0NsaWVudFByb3h5LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9kZWZpbmVUb1N0cmluZ1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9zeW50YXhFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9sb2NhdGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3IvZm9ybWF0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvbGV4ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvYmxvY2tTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2Uva2luZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvZGlyZWN0aXZlTG9jYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3plbi1vYnNlcnZhYmxlL2xpYi9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96ZW4tb2JzZXJ2YWJsZS10cy9saWIvYnVuZGxlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmsvbGliL2J1bmRsZS5lc20uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJwcm9jZXNzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIkludmFyaWFudEVycm9yIiwiaW52YXJpYW50IiwidHNsaWJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImdlbmVyaWNNZXNzYWdlIiwiX2EiLCJzZXRQcm90b3R5cGVPZiIsIm9iaiIsInByb3RvIiwiX19wcm90b19fIiwiX3N1cGVyIiwibWVzc2FnZSIsIl90aGlzIiwidGhpcyIsImZyYW1lc1RvUG9wIiwiRXJyb3IiLCJjb25kaXRpb24iLCJ3cmFwQ29uc29sZU1ldGhvZCIsIm1ldGhvZCIsImNvbnNvbGUiLCJhcHBseSIsImFyZ3VtZW50cyIsIndhcm4iLCJlcnJvciIsInByb2Nlc3NTdHViIiwiZW52IiwiRnVuY3Rpb24iLCJhdExlYXN0V2VUcmllZCIsIl9fZXh0ZW5kcyIsIl9fYXNzaWduIiwiZXh0ZW5kU3RhdGljcyIsImIiLCJBcnJheSIsIl9fIiwiY29uc3RydWN0b3IiLCJhc3NpZ24iLCJsZW5ndGgiLCJ2aXNpdCIsInJvb3QiLCJ2aXNpdG9yIiwidmlzaXRvcktleXMiLCJ1bmRlZmluZWQiLCJRdWVyeURvY3VtZW50S2V5cyIsInN0YWNrIiwiaW5BcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiaW5kZXgiLCJlZGl0cyIsIm5vZGUiLCJwYXJlbnQiLCJwYXRoIiwiYW5jZXN0b3JzIiwibmV3Um9vdCIsImlzTGVhdmluZyIsImlzRWRpdGVkIiwicG9wIiwic2xpY2UiLCJjbG9uZSIsIl9pIiwiX09iamVjdCRrZXlzIiwiayIsImVkaXRPZmZzZXQiLCJpaSIsImVkaXRLZXkiLCJlZGl0VmFsdWUiLCJzcGxpY2UiLCJwcmV2IiwicHVzaCIsInJlc3VsdCIsImlzTm9kZSIsIl9pbnNwZWN0IiwiZGVmYXVsdCIsInZpc2l0Rm4iLCJnZXRWaXNpdEZuIiwia2luZCIsIkJSRUFLIiwidmlzaXRJblBhcmFsbGVsIiwidmlzaXRvcnMiLCJza2lwcGluZyIsImVudGVyIiwiZm4iLCJsZWF2ZSIsInZpc2l0V2l0aFR5cGVJbmZvIiwidHlwZUluZm8iLCJOYW1lIiwiRG9jdW1lbnQiLCJPcGVyYXRpb25EZWZpbml0aW9uIiwiVmFyaWFibGVEZWZpbml0aW9uIiwiVmFyaWFibGUiLCJTZWxlY3Rpb25TZXQiLCJGaWVsZCIsIkFyZ3VtZW50IiwiRnJhZ21lbnRTcHJlYWQiLCJJbmxpbmVGcmFnbWVudCIsIkZyYWdtZW50RGVmaW5pdGlvbiIsIkludFZhbHVlIiwiRmxvYXRWYWx1ZSIsIlN0cmluZ1ZhbHVlIiwiQm9vbGVhblZhbHVlIiwiTnVsbFZhbHVlIiwiRW51bVZhbHVlIiwiTGlzdFZhbHVlIiwiT2JqZWN0VmFsdWUiLCJPYmplY3RGaWVsZCIsIkRpcmVjdGl2ZSIsIk5hbWVkVHlwZSIsIkxpc3RUeXBlIiwiTm9uTnVsbFR5cGUiLCJTY2hlbWFEZWZpbml0aW9uIiwiT3BlcmF0aW9uVHlwZURlZmluaXRpb24iLCJTY2FsYXJUeXBlRGVmaW5pdGlvbiIsIk9iamVjdFR5cGVEZWZpbml0aW9uIiwiRmllbGREZWZpbml0aW9uIiwiSW5wdXRWYWx1ZURlZmluaXRpb24iLCJJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbiIsIlVuaW9uVHlwZURlZmluaXRpb24iLCJFbnVtVHlwZURlZmluaXRpb24iLCJFbnVtVmFsdWVEZWZpbml0aW9uIiwiSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbiIsIkRpcmVjdGl2ZURlZmluaXRpb24iLCJTY2hlbWFFeHRlbnNpb24iLCJTY2FsYXJUeXBlRXh0ZW5zaW9uIiwiT2JqZWN0VHlwZUV4dGVuc2lvbiIsIkludGVyZmFjZVR5cGVFeHRlbnNpb24iLCJVbmlvblR5cGVFeHRlbnNpb24iLCJFbnVtVHlwZUV4dGVuc2lvbiIsIklucHV0T2JqZWN0VHlwZUV4dGVuc2lvbiIsIm1heWJlTm9kZSIsIkJvb2xlYW4iLCJraW5kVmlzaXRvciIsImtpbmRTcGVjaWZpY1Zpc2l0b3IiLCJzcGVjaWZpY1Zpc2l0b3IiLCJzcGVjaWZpY0tpbmRWaXNpdG9yIiwiZ2V0T3BlcmF0aW9uTmFtZSIsImRvYyIsImRlZmluaXRpb25zIiwiZmlsdGVyIiwiZGVmaW5pdGlvbiIsIm1hcCIsIngiLCJXZWFrTWFwIiwibmF2aWdhdG9yIiwicHJvZHVjdCIsInRvU3RyaW5nIiwiR3JhcGhRTEVycm9yIiwiX3ByaW50RXJyb3IiLCJfbG9jYXRpb24iLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJub2RlcyIsInNvdXJjZSIsInBvc2l0aW9ucyIsIm9yaWdpbmFsRXJyb3IiLCJleHRlbnNpb25zIiwiX25vZGVzIiwiX3NvdXJjZSIsImxvYyIsIl9sb2NhdGlvbnMiLCJfcG9zaXRpb25zIiwicmVkdWNlIiwibGlzdCIsInN0YXJ0IiwicG9zIiwiZ2V0TG9jYXRpb24iLCJfZXh0ZW5zaW9ucyIsIm9yaWdpbmFsRXh0ZW5zaW9ucyIsImRlZmluZVByb3BlcnRpZXMiLCJ3cml0YWJsZSIsImxvY2F0aW9ucyIsImNvbmZpZ3VyYWJsZSIsImNhcHR1cmVTdGFja1RyYWNlIiwicHJpbnRFcnJvciIsImZvcm1hdFZhbHVlIiwiX25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wiLCJNQVhfQVJSQVlfTEVOR1RIIiwiTUFYX1JFQ1VSU0lWRV9ERVBUSCIsInNlZW5WYWx1ZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiY29uY2F0IiwicHJldmlvdXNseVNlZW5WYWx1ZXMiLCJpbmRleE9mIiwiY3VzdG9tSW5zcGVjdEZuIiwiU3RyaW5nIiwiaW5zcGVjdCIsImdldEN1c3RvbUZuIiwiY3VzdG9tVmFsdWUiLCJhcnJheSIsImxlbiIsIk1hdGgiLCJtaW4iLCJyZW1haW5pbmciLCJpdGVtcyIsImpvaW4iLCJmb3JtYXRBcnJheSIsInRhZyIsInJlcGxhY2UiLCJnZXRPYmplY3RUYWciLCJmb3JtYXRPYmplY3QiLCJmb3JtYXRPYmplY3RWYWx1ZSIsIl9kZWZhdWx0IiwiZm9yIiwiY2xhc3NPYmplY3QiLCJ0b0pTT04iLCJfR3JhcGhRTEVycm9yIiwiX3N5bnRheEVycm9yIiwic3ludGF4RXJyb3IiLCJfbG9jYXRlZEVycm9yIiwibG9jYXRlZEVycm9yIiwiX2Zvcm1hdEVycm9yIiwiZm9ybWF0RXJyb3IiLCJwcmludGVkTG9jYXRpb25zIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsIm5leHQiLCJkb25lIiwiaGlnaGxpZ2h0U291cmNlQXRMb2NhdGlvbiIsImVyciIsInJldHVybiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsImxvY2F0aW9uIiwiZmlyc3RMaW5lQ29sdW1uT2Zmc2V0IiwibG9jYXRpb25PZmZzZXQiLCJjb2x1bW4iLCJib2R5Iiwid2hpdGVzcGFjZSIsImxpbmVJbmRleCIsImxpbmUiLCJsaW5lT2Zmc2V0IiwibGluZU51bSIsImNvbHVtbk9mZnNldCIsImNvbHVtbk51bSIsImxpbmVzIiwic3BsaXQiLCJleGlzdGluZ0xpbmVzIiwiX3JlZiIsInBhZExlbiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zIiwiX2RpZEl0ZXJhdG9yRXJyb3IzIiwiX2l0ZXJhdG9yRXJyb3IzIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsIl9yZWY0IiwicHJlZml4IiwibWF4IiwiX3JlZjMiLCJzdHIiLCJwcmludFByZWZpeGVkTGluZXMiLCJwb3NpdGlvbiIsIm1hdGNoIiwibGluZVJlZ2V4cCIsImV4ZWMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImUiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJNYXAiLCJPYnNlcnZhYmxlIiwiZGF0YSIsIm9wdHMiLCJjbXAiLCJmIiwiY3ljbGVzIiwiYSIsImFvYmoiLCJib2JqIiwic2VlbiIsImlzRmluaXRlIiwib3V0IiwiVHlwZUVycm9yIiwic2VlbkluZGV4Iiwic29ydCIsImFwb2xsb0NsaWVudCIsIndpbmRvdyIsIl9fQVBPTExPX0NMSUVOVF9fIiwicGFyc2VyXzEiLCJhcG9sbG9fbGlua18xIiwiQXBvbGxvQ2xpZW50UHJveHkiLCJldmVudFNvdXJjZSIsImxpbmsiLCJBcG9sbG9MaW5rIiwiZW1wdHkiLCJzZWxmIiwiZXh0cmFjdCIsIm9wdGltaXN0aWMiLCJzdGFydExpc3RlbmluZyIsInJlYWRRdWVyeSIsIm9wdGlvbnMiLCJFdmVudFNvdXJjZSIsIm9ubWVzc2FnZSIsImV2ZW50IiwidHJhbnNmb3JtRXZlbnQiLCJwYXJzZSIsImxvZyIsImRldlRvb2xzSG9va0NiIiwic3RvcExpc3RlbmluZyIsImNsb3NlIiwiX19hY3Rpb25Ib29rRm9yRGV2VG9vbHMiLCJjYiIsInN0YXRlIiwicXVlcmllcyIsImZvckVhY2giLCJkb2N1bWVudCIsIm11dGF0aW9ucyIsIm11dGF0aW9uIiwic291cmNlT2JqIiwiU291cmNlIiwibGV4ZXIiLCJ0b2tlbiIsIl9raW5kcyIsIktpbmQiLCJET0NVTUVOVCIsIm1hbnkiLCJfbGV4ZXIiLCJUb2tlbktpbmQiLCJTT0YiLCJwYXJzZURlZmluaXRpb24iLCJFT0YiLCJwYXJzZURvY3VtZW50IiwiY3JlYXRlTGV4ZXIiLCJwYXJzZVZhbHVlIiwiZXhwZWN0VG9rZW4iLCJwYXJzZVZhbHVlTGl0ZXJhbCIsInBhcnNlVHlwZSIsInR5cGUiLCJwYXJzZVR5cGVSZWZlcmVuY2UiLCJwYXJzZUNvbnN0VmFsdWUiLCJwYXJzZU5hbWVkVHlwZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZGVmaW5lVG9KU09OIiwiX2Vycm9yIiwiX2RpcmVjdGl2ZUxvY2F0aW9uIiwicGFyc2VOYW1lIiwiTkFNRSIsInBlZWsiLCJwYXJzZUV4ZWN1dGFibGVEZWZpbml0aW9uIiwicGFyc2VUeXBlU3lzdGVtRGVmaW5pdGlvbiIsImtleXdvcmRUb2tlbiIsImxvb2thaGVhZCIsImV4cGVjdEtleXdvcmQiLCJkaXJlY3RpdmVzIiwicGFyc2VEaXJlY3RpdmVzIiwib3BlcmF0aW9uVHlwZXMiLCJCUkFDRV9MIiwicGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiIsIkJSQUNFX1IiLCJ1bmV4cGVjdGVkIiwiU0NIRU1BX0VYVEVOU0lPTiIsInBhcnNlU2NoZW1hRXh0ZW5zaW9uIiwiU0NBTEFSX1RZUEVfRVhURU5TSU9OIiwicGFyc2VTY2FsYXJUeXBlRXh0ZW5zaW9uIiwiaW50ZXJmYWNlcyIsInBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMiLCJmaWVsZHMiLCJwYXJzZUZpZWxkc0RlZmluaXRpb24iLCJPQkpFQ1RfVFlQRV9FWFRFTlNJT04iLCJwYXJzZU9iamVjdFR5cGVFeHRlbnNpb24iLCJJTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT04iLCJwYXJzZUludGVyZmFjZVR5cGVFeHRlbnNpb24iLCJ0eXBlcyIsInBhcnNlVW5pb25NZW1iZXJUeXBlcyIsIlVOSU9OX1RZUEVfRVhURU5TSU9OIiwicGFyc2VVbmlvblR5cGVFeHRlbnNpb24iLCJ2YWx1ZXMiLCJwYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uIiwiRU5VTV9UWVBFX0VYVEVOU0lPTiIsInBhcnNlRW51bVR5cGVFeHRlbnNpb24iLCJwYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbiIsIklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTiIsInBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uIiwicGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uIiwicGVla0Rlc2NyaXB0aW9uIiwicGFyc2VPcGVyYXRpb25EZWZpbml0aW9uIiwiZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMiLCJGUkFHTUVOVF9ERUZJTklUSU9OIiwicGFyc2VGcmFnbWVudE5hbWUiLCJ2YXJpYWJsZURlZmluaXRpb25zIiwicGFyc2VWYXJpYWJsZURlZmluaXRpb25zIiwidHlwZUNvbmRpdGlvbiIsInNlbGVjdGlvblNldCIsInBhcnNlU2VsZWN0aW9uU2V0IiwicGFyc2VGcmFnbWVudERlZmluaXRpb24iLCJPUEVSQVRJT05fREVGSU5JVElPTiIsIm9wZXJhdGlvbiIsInBhcnNlT3BlcmF0aW9uVHlwZSIsIm9wZXJhdGlvblRva2VuIiwiUEFSRU5fTCIsInBhcnNlVmFyaWFibGVEZWZpbml0aW9uIiwiUEFSRU5fUiIsIlZBUklBQkxFX0RFRklOSVRJT04iLCJ2YXJpYWJsZSIsInBhcnNlVmFyaWFibGUiLCJDT0xPTiIsImRlZmF1bHRWYWx1ZSIsImV4cGVjdE9wdGlvbmFsVG9rZW4iLCJFUVVBTFMiLCJET0xMQVIiLCJWQVJJQUJMRSIsIlNFTEVDVElPTl9TRVQiLCJzZWxlY3Rpb25zIiwicGFyc2VTZWxlY3Rpb24iLCJTUFJFQUQiLCJoYXNUeXBlQ29uZGl0aW9uIiwiZXhwZWN0T3B0aW9uYWxLZXl3b3JkIiwiRlJBR01FTlRfU1BSRUFEIiwiSU5MSU5FX0ZSQUdNRU5UIiwicGFyc2VGcmFnbWVudCIsImFsaWFzIiwibmFtZU9yQWxpYXMiLCJGSUVMRCIsInBhcnNlQXJndW1lbnRzIiwicGFyc2VGaWVsZCIsImlzQ29uc3QiLCJpdGVtIiwicGFyc2VDb25zdEFyZ3VtZW50IiwicGFyc2VBcmd1bWVudCIsIkFSR1VNRU5UIiwiQlJBQ0tFVF9MIiwicGFyc2VWYWx1ZVZhbHVlIiwiTElTVCIsImFueSIsIkJSQUNLRVRfUiIsInBhcnNlTGlzdCIsIk9CSkVDVCIsIk9CSkVDVF9GSUVMRCIsInBhcnNlT2JqZWN0RmllbGQiLCJwYXJzZU9iamVjdCIsIklOVCIsImFkdmFuY2UiLCJGTE9BVCIsIlNUUklORyIsIkJMT0NLX1NUUklORyIsInBhcnNlU3RyaW5nTGl0ZXJhbCIsIkJPT0xFQU4iLCJOVUxMIiwiRU5VTSIsImJsb2NrIiwiQVQiLCJwYXJzZURpcmVjdGl2ZSIsIkRJUkVDVElWRSIsIkxJU1RfVFlQRSIsIkJBTkciLCJOT05fTlVMTF9UWVBFIiwiTkFNRURfVFlQRSIsIlNDSEVNQV9ERUZJTklUSU9OIiwicGFyc2VTY2hlbWFEZWZpbml0aW9uIiwiZGVzY3JpcHRpb24iLCJwYXJzZURlc2NyaXB0aW9uIiwiU0NBTEFSX1RZUEVfREVGSU5JVElPTiIsInBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24iLCJPQkpFQ1RfVFlQRV9ERUZJTklUSU9OIiwicGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbiIsIklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04iLCJwYXJzZUludGVyZmFjZVR5cGVEZWZpbml0aW9uIiwiVU5JT05fVFlQRV9ERUZJTklUSU9OIiwicGFyc2VVbmlvblR5cGVEZWZpbml0aW9uIiwiRU5VTV9UWVBFX0RFRklOSVRJT04iLCJwYXJzZUVudW1UeXBlRGVmaW5pdGlvbiIsIklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT04iLCJwYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24iLCJwYXJzZUFyZ3VtZW50RGVmcyIsIlBJUEUiLCJwYXJzZURpcmVjdGl2ZUxvY2F0aW9uIiwicGFyc2VEaXJlY3RpdmVMb2NhdGlvbnMiLCJESVJFQ1RJVkVfREVGSU5JVElPTiIsInBhcnNlRGlyZWN0aXZlRGVmaW5pdGlvbiIsIk9QRVJBVElPTl9UWVBFX0RFRklOSVRJT04iLCJBTVAiLCJhbGxvd0xlZ2FjeVNETEltcGxlbWVudHNJbnRlcmZhY2VzIiwiYWxsb3dMZWdhY3lTRExFbXB0eUZpZWxkcyIsInBhcnNlRmllbGREZWZpbml0aW9uIiwiRklFTERfREVGSU5JVElPTiIsInBhcnNlSW5wdXRWYWx1ZURlZiIsIklOUFVUX1ZBTFVFX0RFRklOSVRJT04iLCJwYXJzZUVudW1WYWx1ZURlZmluaXRpb24iLCJFTlVNX1ZBTFVFX0RFRklOSVRJT04iLCJEaXJlY3RpdmVMb2NhdGlvbiIsInN0YXJ0VG9rZW4iLCJub0xvY2F0aW9uIiwiTG9jIiwibGFzdFRva2VuIiwiZW5kVG9rZW4iLCJlbmQiLCJnZXRUb2tlbkRlc2MiLCJhdFRva2VuIiwib3BlbktpbmQiLCJwYXJzZUZuIiwiY2xvc2VLaW5kIiwiX2ludmFyaWFudCIsIl9kZWZpbmVUb1N0cmluZ1RhZyIsInN0YXJ0T2ZGaWxlVG9rZW4iLCJUb2siLCJsaW5lU3RhcnQiLCJhZHZhbmNlTGV4ZXIiLCJpc1B1bmN0dWF0b3JUb2tlbiIsIl9ibG9ja1N0cmluZyIsInJlYWRUb2tlbiIsIkNPTU1FTlQiLCJmcmVlemUiLCJwcmludENoYXJDb2RlIiwiY29kZSIsImlzTmFOIiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJib2R5TGVuZ3RoIiwic3RhcnRQb3NpdGlvbiIsImNoYXJDb2RlQXQiLCJwb3NpdGlvbkFmdGVyV2hpdGVzcGFjZSIsImNvbCIsInJlYWRDb21tZW50IiwicmVhZE5hbWUiLCJmaXJzdENvZGUiLCJpc0Zsb2F0IiwicmVhZERpZ2l0cyIsInJlYWROdW1iZXIiLCJjaHVua1N0YXJ0IiwicmF3VmFsdWUiLCJkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlIiwicmVhZEJsb2NrU3RyaW5nIiwiY2hhckNvZGUiLCJjaGFyMmhleCIsInJlYWRTdHJpbmciLCJ1bmV4cGVjdGVkQ2hhcmFjdGVyTWVzc2FnZSIsImdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24iLCJjb21tb25JbmRlbnQiLCJpbmRlbnQiLCJsZWFkaW5nV2hpdGVzcGFjZSIsImlzQmxhbmsiLCJyYXdTdHJpbmciLCJzaGlmdCIsInByaW50QmxvY2tTdHJpbmciLCJpbmRlbnRhdGlvbiIsInByZWZlck11bHRpcGxlTGluZXMiLCJpc1NpbmdsZUxpbmUiLCJoYXNMZWFkaW5nU3BhY2UiLCJoYXNUcmFpbGluZ1F1b3RlIiwicHJpbnRBc011bHRpcGxlTGluZXMiLCJRVUVSWSIsIk1VVEFUSU9OIiwiU1VCU0NSSVBUSU9OIiwiU0NIRU1BIiwiU0NBTEFSIiwiQVJHVU1FTlRfREVGSU5JVElPTiIsIklOVEVSRkFDRSIsIlVOSU9OIiwiRU5VTV9WQUxVRSIsIklOUFVUX09CSkVDVCIsIklOUFVUX0ZJRUxEX0RFRklOSVRJT04iLCJfY3JlYXRlQ2xhc3MiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiaGFzU3ltYm9scyIsImhhc1N5bWJvbCIsImdldFN5bWJvbCIsIm9ic2VydmFibGUiLCJTeW1ib2xJdGVyYXRvciIsIlN5bWJvbE9ic2VydmFibGUiLCJTeW1ib2xTcGVjaWVzIiwiZ2V0TWV0aG9kIiwiZ2V0U3BlY2llcyIsImN0b3IiLCJpc09ic2VydmFibGUiLCJob3N0UmVwb3J0RXJyb3IiLCJlbnF1ZXVlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJfY2xlYW51cCIsInVuc3Vic2NyaWJlIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJfb2JzZXJ2ZXIiLCJfcXVldWUiLCJfc3RhdGUiLCJub3RpZnlTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsIm9uTm90aWZ5IiwiZmx1c2hTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVyIiwic3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsIl9zdWJzY3JpcHRpb24iLCJfc3Vic2NyaWJlciIsImNvbXBsZXRlIiwicmVqZWN0Iiwic3Vic2NyaWJlIiwiX3RoaXMyIiwiX3RoaXMzIiwiX3RoaXM0IiwiQyIsImhhc1NlZWQiLCJoYXNWYWx1ZSIsImFjYyIsImZpcnN0IiwiX3RoaXM1IiwiX2xlbiIsInNvdXJjZXMiLCJfa2V5Iiwic3RhcnROZXh0IiwidiIsImZyb20iLCJfdGhpczYiLCJzdWJzY3JpcHRpb25zIiwib3V0ZXIiLCJpbm5lciIsImNvbXBsZXRlSWZEb25lIiwiY2xvc2VkIiwiX2xlbjIiLCJfa2V5MiIsInN5bWJvbCIsImJ1bmRsZV9lc20iLCJidW5kbGVfZXNtX0Fwb2xsb0xpbmsiLCJjcmVhdGVPcGVyYXRpb24iLCJleGVjdXRlIiwiZnJvbUVycm9yIiwiZnJvbVByb21pc2UiLCJtYWtlUHJvbWlzZSIsInRvUHJvbWlzZSIsImxpYl9idW5kbGVfZXNtIiwiTGlua0Vycm9yIiwidHNsaWJfZXM2IiwiaXNUZXJtaW5hdGluZyIsInJlcXVlc3QiLCJjb21wbGV0ZWQiLCJwcm9taXNlIiwiY2F0Y2giLCJlcnJvclZhbHVlIiwic3RhcnRpbmciLCJjb250ZXh0IiwicXVlcnkiLCJ2YXJpYWJsZXMiLCJvcGVyYXRpb25OYW1lIiwiZ2V0S2V5IiwicGFzc3Rocm91Z2giLCJvcCIsImZvcndhcmQiLCJvZiIsInRvTGluayIsImhhbmRsZXIiLCJsaW5rcyIsInkiLCJ0ZXN0IiwibGVmdCIsInJpZ2h0IiwibGVmdExpbmsiLCJyaWdodExpbmsiLCJzZWNvbmQiLCJmaXJzdExpbmsiLCJuZXh0TGluayIsImludmFyaWFudF9lc20iLCJ0cmFuc2Zvcm1lZE9wZXJhdGlvbiIsInRyYW5zZm9ybU9wZXJhdGlvbiIsIk9QRVJBVElPTl9GSUVMRFMiLCJ2YWxpZGF0ZU9wZXJhdGlvbiJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBekIsRUFBQTZCLEVBQUEsU0FBQTFCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQXFCLFdBQ0EsV0FBMkIsT0FBQXJCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFpQixFQUFBQyxHQUFzRCxPQUFBakIsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBdUIsRUFBQUMsSUFHdEQvQixFQUFBa0MsRUFBQSxHQUlBbEMsSUFBQW1DLEVBQUEsb0NDbEZBLFNBQUFDLEdBQUFwQyxFQUFBVSxFQUFBMkIsRUFBQSxzQkFBQUMsSUFBQXRDLEVBQUFVLEVBQUEyQixFQUFBLHNCQUFBRSxJQUFBLElBQUFDLEVBQUF4QyxFQUFBLEdBRUF5QyxFQUFBLHNCQUNBQyxFQUFBNUIsT0FBQTZCLHNCQUFBLElBQUFELEVBQUEsU0FBQUUsRUFBQUMsR0FFQSxPQURBRCxFQUFBRSxVQUFBRCxFQUNBRCxHQUNDRixFQUNESixFQUFBLFNBQUFTLEdBRUEsU0FBQVQsRUFBQVUsUUFDQSxJQUFBQSxJQUFpQ0EsRUFBQVAsR0FDakMsSUFBQVEsRUFBQUYsRUFBQXhDLEtBQUEyQyxLQUFBLGlCQUFBRixFQUNBUCxFQUFBLEtBQUFPLEVBQUEsNkRBQ0FBLElBQUFFLEtBSUEsT0FIQUQsRUFBQUUsWUFBQSxFQUNBRixFQUFBdEMsS0FBQThCLEVBQ0FFLEVBQUFNLEVBQUFYLEVBQUFOLFdBQ0FpQixFQUVBLE9BWEluQyxPQUFBMEIsRUFBQSxFQUFBMUIsQ0FBU3dCLEVBQUFTLEdBV2JULEVBWkEsQ0FhQ2MsT0FDRCxTQUFBYixFQUFBYyxFQUFBTCxHQUNBLElBQUFLLEVBQ0EsVUFBQWYsRUFBQVUsR0FHQSxTQUFBTSxFQUFBQyxHQUNBLGtCQUNBLE9BQUFDLFFBQUFELEdBQUFFLE1BQUFELFFBQUFFLGFBR0EsU0FBQW5CLEdBQ0FBLEVBQUFvQixLQUFBTCxFQUFBLFFBQ0FmLEVBQUFxQixNQUFBTixFQUFBLFNBRkEsQ0FHQ2YsTUFBQSxLQU1ELElBQUFzQixFQUFBLENBQW1CQyxJQUFBLElBQ25CLG9CQUFBMUIsRUFDQXlCLEVBQUF6QixPQUdBLElBSUEyQixTQUFBLHdCQUFBQSxDQUFBRixHQUVBLE1BQUFHLHNEQ25EQWhFLEVBQUFVLEVBQUEyQixFQUFBLHNCQUFBNEIsSUFBQWpFLEVBQUFVLEVBQUEyQixFQUFBLHNCQUFBNkI7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSxJQUFBQyxFQUFBLFNBQUF6RCxFQUFBMEQsR0FJQSxPQUhBRCxFQUFBckQsT0FBQTZCLGdCQUNBLENBQVVHLFVBQUEsY0FBZ0J1QixPQUFBLFNBQUEzRCxFQUFBMEQsR0FBc0MxRCxFQUFBb0MsVUFBQXNCLElBQ2hFLFNBQUExRCxFQUFBMEQsR0FBeUIsUUFBQWxDLEtBQUFrQyxJQUFBbkMsZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBa0MsRUFBQWxDLE1BQ3pCeEIsRUFBQTBELElBR08sU0FBQUgsRUFBQXZELEVBQUEwRCxHQUVQLFNBQUFFLElBQW1CcEIsS0FBQXFCLFlBQUE3RCxFQURuQnlELEVBQUF6RCxFQUFBMEQsR0FFQTFELEVBQUFzQixVQUFBLE9BQUFvQyxFQUFBdEQsT0FBQVksT0FBQTBDLElBQUFFLEVBQUF0QyxVQUFBb0MsRUFBQXBDLFVBQUEsSUFBQXNDLEdBR08sSUFBQUosRUFBQSxXQVFQLE9BUEFBLEVBQUFwRCxPQUFBMEQsUUFBQSxTQUFBbEQsR0FDQSxRQUFBYSxFQUFBL0IsRUFBQSxFQUFBeUIsRUFBQTZCLFVBQUFlLE9BQWdEckUsRUFBQXlCLEVBQU96QixJQUV2RCxRQUFBOEIsS0FEQUMsRUFBQXVCLFVBQUF0RCxHQUNBVSxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE0QixFQUFBRCxLQUFBWixFQUFBWSxHQUFBQyxFQUFBRCxJQUVBLE9BQUFaLElBRUFtQyxNQUFBUCxLQUFBUSwwQ0NuQ0E1QyxPQUFBQyxlQUFBYixFQUFBLGNBQ0FtQixPQUFBLElBRUFuQixFQUFBd0UsTUE0SkEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBbkIsVUFBQWUsT0FBQSxRQUFBSyxJQUFBcEIsVUFBQSxHQUFBQSxVQUFBLEdBQUFxQixFQUdBQyxPQUFBRixFQUNBRyxFQUFBWixNQUFBYSxRQUFBUCxHQUNBUSxFQUFBLENBQUFSLEdBQ0FTLEdBQUEsRUFDQUMsRUFBQSxHQUNBQyxPQUFBUixFQUNBbkQsT0FBQW1ELEVBQ0FTLE9BQUFULEVBQ0FVLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBZixFQUdBLEdBRUEsSUFBQWdCLElBREFQLElBQ0FELEVBQUFWLE9BQ0FtQixFQUFBRCxHQUFBLElBQUFOLEVBQUFaLE9BRUEsR0FBQWtCLEVBQUEsQ0FLQSxHQUpBaEUsRUFBQSxJQUFBOEQsRUFBQWhCLFlBQUFLLEVBQUFVLElBQUFmLE9BQUEsR0FDQWEsRUFBQUMsRUFDQUEsRUFBQUUsRUFBQUksTUFFQUQsRUFBQSxDQUNBLEdBQUFYLEVBQ0FLLElBQUFRLFlBQ1MsQ0FHVCxJQUZBLElBQUFDLEVBQUEsR0FFQUMsRUFBQSxFQUFBQyxFQUFBbkYsT0FBQXFFLEtBQUFHLEdBQTREVSxFQUFBQyxFQUFBeEIsT0FBMEJ1QixJQUFBLENBQ3RGLElBQUFFLEVBQUFELEVBQUFELEdBQ0FELEVBQUFHLEdBQUFaLEVBQUFZLEdBR0FaLEVBQUFTLEVBS0EsSUFGQSxJQUFBSSxFQUFBLEVBRUFDLEVBQUEsRUFBd0JBLEVBQUFmLEVBQUFaLE9BQW1CMkIsSUFBQSxDQUMzQyxJQUFBQyxFQUFBaEIsRUFBQWUsR0FBQSxHQUNBRSxFQUFBakIsRUFBQWUsR0FBQSxHQUVBbkIsSUFDQW9CLEdBQUFGLEdBR0FsQixHQUFBLE9BQUFxQixHQUNBaEIsRUFBQWlCLE9BQUFGLEVBQUEsR0FDQUYsS0FFQWIsRUFBQWUsR0FBQUMsR0FLQWxCLEVBQUFKLEVBQUFJLE1BQ0FELEVBQUFILEVBQUFHLEtBQ0FFLEVBQUFMLEVBQUFLLE1BQ0FKLEVBQUFELEVBQUFDLFFBQ0FELElBQUF3QixTQUNLLENBSUwsR0FIQTdFLEVBQUE0RCxFQUFBTixFQUFBRyxFQUFBRCxFQUFBQyxRQUFBTixFQUdBUSxPQUZBQSxFQUFBQyxJQUFBNUQsR0FBQStELEdBR0EsU0FHQUgsR0FDQUMsRUFBQWlCLEtBQUE5RSxHQUlBLElBQUErRSxPQUFBLEVBRUEsSUFBQXJDLE1BQUFhLFFBQUFJLEdBQUEsQ0FDQSxJQUFBcUIsRUFBQXJCLEdBQ0EsVUFBQWxDLE1BQUEsd0JBQUF3RCxFQUFBQyxTQUFBdkIsSUFHQSxJQUFBd0IsRUFBQUMsRUFBQW5DLEVBQUFVLEVBQUEwQixLQUFBckIsR0FFQSxHQUFBbUIsRUFBQSxDQUdBLElBRkFKLEVBQUFJLEVBQUF2RyxLQUFBcUUsRUFBQVUsRUFBQTNELEVBQUE0RCxFQUFBQyxFQUFBQyxNQUVBd0IsRUFDQSxNQUdBLFFBQUFQLEdBQ0EsSUFBQWYsRUFBQSxDQUNBSCxFQUFBSyxNQUNBLGVBRVMsUUFBQWYsSUFBQTRCLElBQ1RyQixFQUFBb0IsS0FBQSxDQUFBOUUsRUFBQStFLEtBRUFmLEdBQUEsQ0FDQSxJQUFBZ0IsRUFBQUQsR0FFYSxDQUNibEIsRUFBQUssTUFDQSxTQUhBUCxFQUFBb0IsU0FVQTVCLElBQUE0QixHQUFBZCxHQUNBUCxFQUFBb0IsS0FBQSxDQUFBOUUsRUFBQTJELElBR0FLLEVBQ0FILEVBQUFLLE9BRUFiLEVBQUEsQ0FDQUMsVUFDQUcsUUFDQUQsT0FDQUUsUUFDQW1CLEtBQUF4QixHQUVBQyxFQUFBWixNQUFBYSxRQUFBSSxHQUNBSCxFQUFBRixFQUFBSyxFQUFBVCxFQUFBUyxFQUFBMEIsT0FBQSxHQUNBNUIsR0FBQSxFQUNBQyxFQUFBLEdBRUFFLEdBQ0FFLEVBQUFnQixLQUFBbEIsR0FHQUEsRUFBQUQsY0FFR1IsSUFBQUUsR0FFSCxJQUFBSyxFQUFBWixTQUNBaUIsRUFBQUwsSUFBQVosT0FBQSxPQUdBLE9BQUFpQixHQTVTQXhGLEVBQUFnSCxnQkEwVEEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBLElBQUEvQyxNQUFBOEMsRUFBQTFDLFFBQ0EsT0FDQTRDLE1BQUEsU0FBQS9CLEdBQ0EsUUFBQWxGLEVBQUEsRUFBcUJBLEVBQUErRyxFQUFBMUMsT0FBcUJyRSxJQUMxQyxJQUFBZ0gsRUFBQWhILEdBQUEsQ0FDQSxJQUFBa0gsRUFBQVAsRUFBQUksRUFBQS9HLEdBQUFrRixFQUFBMEIsTUFFQSxHQUVBLEdBQUFNLEVBQUEsQ0FDQSxJQUFBWixFQUFBWSxFQUFBN0QsTUFBQTBELEVBQUEvRyxHQUFBc0QsV0FFQSxRQUFBZ0QsRUFDQVUsRUFBQWhILEdBQUFrRixPQUNhLEdBQUFvQixJQUFBTyxFQUNiRyxFQUFBaEgsR0FBQTZHLE9BQ2EsUUFBQW5DLElBQUE0QixFQUNiLE9BQUFBLEtBTUFhLE1BQUEsU0FBQWpDLEdBQ0EsUUFBQWxGLEVBQUEsRUFBcUJBLEVBQUErRyxFQUFBMUMsT0FBcUJyRSxJQUMxQyxHQUFBZ0gsRUFBQWhILEdBY1NnSCxFQUFBaEgsS0FBQWtGLElBQ1Q4QixFQUFBaEgsR0FBQSxVQWZBLENBQ0EsSUFBQWtILEVBQUFQLEVBQUFJLEVBQUEvRyxHQUFBa0YsRUFBQTBCLE1BRUEsR0FFQSxHQUFBTSxFQUFBLENBQ0EsSUFBQVosRUFBQVksRUFBQTdELE1BQUEwRCxFQUFBL0csR0FBQXNELFdBRUEsR0FBQWdELElBQUFPLEVBQ0FHLEVBQUFoSCxHQUFBNkcsT0FDYSxRQUFBbkMsSUFBQTRCLElBQUEsSUFBQUEsRUFDYixPQUFBQSxPQTlWQXhHLEVBQUFzSCxrQkE4V0EsU0FBQUMsRUFBQTdDLEdBQ0EsT0FDQXlDLE1BQUEsU0FBQS9CLEdBQ0FtQyxFQUFBSixNQUFBL0IsR0FDQSxJQUFBZ0MsRUFBQVAsRUFBQW5DLEVBQUFVLEVBQUEwQixNQUVBLEdBRUEsR0FBQU0sRUFBQSxDQUNBLElBQUFaLEVBQUFZLEVBQUE3RCxNQUFBbUIsRUFBQWxCLFdBVUEsWUFSQW9CLElBQUE0QixJQUNBZSxFQUFBRixNQUFBakMsR0FFQXFCLEVBQUFELElBQ0FlLEVBQUFKLE1BQUFYLElBSUFBLElBR0FhLE1BQUEsU0FBQWpDLEdBQ0EsSUFHQW9CLEVBSEFZLEVBQUFQLEVBQUFuQyxFQUFBVSxFQUFBMEIsTUFFQSxHQVFBLE9BTEFNLElBQ0FaLEVBQUFZLEVBQUE3RCxNQUFBbUIsRUFBQWxCLFlBR0ErRCxFQUFBRixNQUFBakMsR0FDQW9CLEtBOVlBeEcsRUFBQTZHLGFBQ0E3RyxFQUFBK0csTUFBQS9HLEVBQUE2RSx1QkFBQSxFQUVBLElBRUFuQyxFQUZBZ0UsR0FFQWhFLEVBRnNDNUMsRUFBUSxLQUVSNEMsRUFBQXBCLFdBQUFvQixFQUFBLENBQXVDaUUsUUFBQWpFLEdBVTdFLElBQUFtQyxFQUFBLENBQ0EyQyxLQUFBLEdBQ0FDLFNBQUEsZ0JBQ0FDLG9CQUFBLDJEQUNBQyxtQkFBQSxnREFDQUMsU0FBQSxTQUNBQyxhQUFBLGVBQ0FDLE1BQUEseURBQ0FDLFNBQUEsaUJBQ0FDLGVBQUEsc0JBQ0FDLGVBQUEsOENBQ0FDLG1CQUFBLFFBRUEsbUVBQ0FDLFNBQUEsR0FDQUMsV0FBQSxHQUNBQyxZQUFBLEdBQ0FDLGFBQUEsR0FDQUMsVUFBQSxHQUNBQyxVQUFBLEdBQ0FDLFVBQUEsV0FDQUMsWUFBQSxXQUNBQyxZQUFBLGlCQUNBQyxVQUFBLHFCQUNBQyxVQUFBLFNBQ0FDLFNBQUEsU0FDQUMsWUFBQSxTQUNBQyxpQkFBQSxnQ0FDQUMsd0JBQUEsU0FDQUMscUJBQUEsb0NBQ0FDLHFCQUFBLDBEQUNBQyxnQkFBQSx1REFDQUMscUJBQUEsMERBQ0FDLHdCQUFBLDZDQUNBQyxvQkFBQSw0Q0FDQUMsbUJBQUEsNkNBQ0FDLG9CQUFBLG9DQUNBQywwQkFBQSw2Q0FDQUMsb0JBQUEsK0NBQ0FDLGdCQUFBLGdDQUNBQyxvQkFBQSxzQkFDQUMsb0JBQUEsNENBQ0FDLHVCQUFBLCtCQUNBQyxtQkFBQSw4QkFDQUMsa0JBQUEsK0JBQ0FDLHlCQUFBLGdDQUVBbEssRUFBQTZFLG9CQUNBLElBQUFrQyxFQUFBLEdBOE9BLFNBQUFOLEVBQUEwRCxHQUNBLE9BQUFDLFFBQUFELEdBQUEsaUJBQUFBLEVBQUFyRCxNQTBHQSxTQUFBRCxFQUFBbkMsRUFBQW9DLEVBQUFyQixHQUNBLElBQUE0RSxFQUFBM0YsRUFBQW9DLEdBRUEsR0FBQXVELEVBQUEsQ0FDQSxJQUFBNUUsR0FBQSxtQkFBQTRFLEVBRUEsT0FBQUEsRUFHQSxJQUFBQyxFQUFBN0UsRUFBQTRFLEVBQUFoRCxNQUFBZ0QsRUFBQWxELE1BRUEsc0JBQUFtRCxFQUVBLE9BQUFBLE1BRUcsQ0FDSCxJQUFBQyxFQUFBOUUsRUFBQWYsRUFBQTJDLE1BQUEzQyxFQUFBeUMsTUFFQSxHQUFBb0QsRUFBQSxDQUNBLHNCQUFBQSxFQUVBLE9BQUFBLEVBR0EsSUFBQUMsRUFBQUQsRUFBQXpELEdBRUEsc0JBQUEwRCxFQUVBLE9BQUFBLElBN1JBeEssRUFBQStHLHVDQy9KQSxTQUFBN0UsR0FBQXBDLEVBQUFVLEVBQUEyQixFQUFBLHNCQUFBc0ksSUFBQTNLLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQXNXQSxTQUFBMkssRUFBQUMsR0FDQSxPQUFBQSxFQUFBQyxZQUNBQyxPQUFBLFNBQUFDLEdBQ0EsOEJBQUFBLEVBQUEvRCxNQUFBK0QsRUFBQXBLLE9BRUFxSyxJQUFBLFNBQUFDLEdBQTJCLE9BQUFBLEVBQUF0SyxLQUFBVSxRQUF1QixTQStYbEQsbUJBQUE2SixTQUFBLGlCQUFBQyxXQUNBQSxVQUFBQyxRQUVBdEssT0FBQWtCLFVBQUFxSixTQXFGQXZLLE9BQUFrQixVQUFBQyxlQTJEQW5CLE9BQUFZLE9BQUEscURDMzNCQVosT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQW9MLGVBRUEsSUFBQUMsRUFBa0J2TCxFQUFRLElBRTFCd0wsRUFBZ0J4TCxFQUFRLElBRXhCLFNBQUF5TCxFQUFBN0ksR0FBd1UsT0FBdE82SSxFQUEzRSxtQkFBQXRLLFFBQUEsaUJBQUFBLE9BQUF1SyxTQUEyRSxTQUFBOUksR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQXpCLFFBQUF5QixFQUFBMkIsY0FBQXBELFFBQUF5QixJQUFBekIsT0FBQWEsVUFBQSxnQkFBQVksSUFBbUlBLEdBRXhVLFNBQUEwSSxFQUNBdEksRUFBQTJJLEVBQUFDLEVBQUFDLEVBQUFyRyxFQUFBc0csRUFBQUMsR0FFQSxJQUFBQyxFQUFBM0gsTUFBQWEsUUFBQXlHLEdBQUEsSUFBQUEsRUFBQWxILE9BQUFrSCxPQUFBN0csRUFBQTZHLEVBQUEsQ0FBQUEsUUFBQTdHLEVBR0FtSCxFQUFBTCxFQUVBLElBQUFLLEdBQUFELEVBQUEsQ0FDQSxJQUFBMUcsRUFBQTBHLEVBQUEsR0FDQUMsRUFBQTNHLEtBQUE0RyxLQUFBNUcsRUFBQTRHLElBQUFOLE9BR0EsSUFnQkFPLEVBaEJBQyxFQUFBUCxHQUVBTyxHQUFBSixJQUNBSSxFQUFBSixFQUFBSyxPQUFBLFNBQUFDLEVBQUFoSCxHQUtBLE9BSkFBLEVBQUE0RyxLQUNBSSxFQUFBN0YsS0FBQW5CLEVBQUE0RyxJQUFBSyxPQUdBRCxHQUNLLEtBR0xGLEdBQUEsSUFBQUEsRUFBQTNILFNBQ0EySCxPQUFBdEgsR0FLQStHLEdBQUFELEVBQ0FPLEVBQUFOLEVBQUFiLElBQUEsU0FBQXdCLEdBQ0EsU0FBQWhCLEVBQUFpQixhQUFBYixFQUFBWSxLQUVHUixJQUNIRyxFQUFBSCxFQUFBSyxPQUFBLFNBQUFDLEVBQUFoSCxHQUtBLE9BSkFBLEVBQUE0RyxLQUNBSSxFQUFBN0YsTUFBQSxFQUFBK0UsRUFBQWlCLGFBQUFuSCxFQUFBNEcsSUFBQU4sT0FBQXRHLEVBQUE0RyxJQUFBSyxRQUdBRCxHQUNLLEtBR0wsSUFBQUksRUFBQVgsRUFFQSxTQUFBVyxHQUFBLE1BQUFaLEVBQUEsQ0FDQSxJQUFBYSxFQUFBYixFQUFBQyxXQUVBLE1BQUFZLEdBQUEsV0FBQWxCLEVBQUFrQixLQUNBRCxFQUFBQyxHQUlBN0wsT0FBQThMLGlCQUFBMUosS0FBQSxDQUNBRixRQUFBLENBQ0EzQixNQUFBMkIsRUFJQWhDLFlBQUEsRUFDQTZMLFVBQUEsR0FFQUMsVUFBQSxDQUdBekwsTUFBQThLLFFBQUFySCxFQUlBOUQsV0FBQXNKLFFBQUE2QixJQUVBM0csS0FBQSxDQUdBbkUsTUFBQW1FLFFBQUFWLEVBSUE5RCxXQUFBc0osUUFBQTlFLElBRUFtRyxNQUFBLENBQ0F0SyxNQUFBMkssUUFBQWxILEdBRUE4RyxPQUFBLENBQ0F2SyxNQUFBNEssUUFBQW5ILEdBRUErRyxVQUFBLENBQ0F4SyxNQUFBK0ssUUFBQXRILEdBRUFnSCxjQUFBLENBQ0F6SyxNQUFBeUssR0FFQUMsV0FBQSxDQUdBMUssTUFBQXFMLFFBQUE1SCxFQUlBOUQsV0FBQXNKLFFBQUFvQyxNQUlBWixLQUFBOUcsTUFDQWxFLE9BQUFDLGVBQUFtQyxLQUFBLFNBQ0E3QixNQUFBeUssRUFBQTlHLE1BQ0E2SCxVQUFBLEVBQ0FFLGNBQUEsSUFFRzNKLE1BQUE0SixrQkFDSDVKLE1BQUE0SixrQkFBQTlKLEtBQUFvSSxHQUVBeEssT0FBQUMsZUFBQW1DLEtBQUEsU0FDQTdCLE1BQUErQixRQUFBNEIsTUFDQTZILFVBQUEsRUFDQUUsY0FBQSxJQUtBekIsRUFBQXRKLFVBQUFsQixPQUFBWSxPQUFBMEIsTUFBQXBCLFVBQUEsQ0FDQXVDLFlBQUEsQ0FDQWxELE1BQUFpSyxHQUVBM0ssS0FBQSxDQUNBVSxNQUFBLGdCQUVBZ0ssU0FBQSxDQUNBaEssTUFBQSxXQUNBLFNBQUFrSyxFQUFBMEIsWUFBQS9KLHdDQzlJQXBDLE9BQUFDLGVBQUFiLEVBQUEsY0FDQW1CLE9BQUEsSUFFQW5CLEVBQUEyRyxRQWNBLFNBQUF4RixHQUNBLE9BQUE2TCxFQUFBN0wsRUFBQSxLQWJBLElBRUF1QixFQUZBdUssR0FFQXZLLEVBRndENUMsRUFBUSxLQUUxQjRDLEVBQUFwQixXQUFBb0IsRUFBQSxDQUF1Q2lFLFFBQUFqRSxHQUU3RSxTQUFBNkksRUFBQTdJLEdBQXdVLE9BQXRPNkksRUFBM0UsbUJBQUF0SyxRQUFBLGlCQUFBQSxPQUFBdUssU0FBMkUsU0FBQTlJLEdBQWtDLGNBQUFBLEdBQStCLFNBQUFBLEdBQWtDLE9BQUFBLEdBQUEsbUJBQUF6QixRQUFBeUIsRUFBQTJCLGNBQUFwRCxRQUFBeUIsSUFBQXpCLE9BQUFhLFVBQUEsZ0JBQUFZLElBQW1JQSxHQUV4VSxJQUFBd0ssRUFBQSxHQUNBQyxFQUFBLEVBU0EsU0FBQUgsRUFBQTdMLEVBQUFpTSxHQUNBLE9BQUE3QixFQUFBcEssSUFDQSxhQUNBLE9BQUFrTSxLQUFBQyxVQUFBbk0sR0FFQSxlQUNBLE9BQUFBLEVBQUFWLEtBQUEsYUFBQThNLE9BQUFwTSxFQUFBVixLQUFBLGtCQUVBLGFBQ0EsT0FPQSxTQUFBVSxFQUFBcU0sR0FDQSxRQUFBQSxFQUFBQyxRQUFBdE0sR0FDQSxtQkFHQSxJQUFBaU0sRUFBQSxHQUFBRyxPQUFBQyxFQUFBLENBQUFyTSxJQUVBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBdU0sRUErREEsU0FBQTlMLEdBQ0EsSUFBQThMLEVBQUE5TCxFQUFBK0wsT0FBQVYsRUFBQXRHLFVBRUEsc0JBQUErRyxFQUNBLE9BQUFBLEVBR0Esc0JBQUE5TCxFQUFBZ00sUUFDQSxPQUFBaE0sRUFBQWdNLFFBdkVBQyxDQUFBMU0sR0FFQSxRQUFBeUQsSUFBQThJLEVBQUEsQ0FFQSxJQUFBSSxFQUFBSixFQUFBck4sS0FBQWMsR0FFQSxHQUFBMk0sSUFBQTNNLEVBQ0EsdUJBQUEyTSxJQUFBZCxFQUFBYyxFQUFBVixRQUVLLEdBQUFqSixNQUFBYSxRQUFBN0QsR0FDTCxPQTJCQSxTQUFBNE0sRUFBQVgsR0FDQSxPQUFBVyxFQUFBeEosT0FDQSxXQUdBLEdBQUE2SSxFQUFBN0ksT0FBQTRJLEVBQ0EsZ0JBT0EsSUFKQSxJQUFBYSxFQUFBQyxLQUFBQyxJQUFBaEIsRUFBQWEsRUFBQXhKLFFBQ0E0SixFQUFBSixFQUFBeEosT0FBQXlKLEVBQ0FJLEVBQUEsR0FFQWxPLEVBQUEsRUFBaUJBLEVBQUE4TixJQUFTOU4sRUFDMUJrTyxFQUFBN0gsS0FBQXlHLEVBQUFlLEVBQUE3TixHQUFBa04sSUFHQSxJQUFBZSxFQUNBQyxFQUFBN0gsS0FBQSxtQkFDRzRILEVBQUEsR0FDSEMsRUFBQTdILEtBQUEsT0FBQWdILE9BQUFZLEVBQUEsZ0JBR0EsVUFBQUMsRUFBQUMsS0FBQSxVQWxEQUMsQ0FBQW5OLEVBQUFpTSxHQUdBLE9BTUEsU0FBQXhMLEVBQUF3TCxHQUNBLElBQUFuSSxFQUFBckUsT0FBQXFFLEtBQUFyRCxHQUVBLE9BQUFxRCxFQUFBVixPQUNBLFdBR0EsR0FBQTZJLEVBQUE3SSxPQUFBNEksRUFDQSxVQWdEQSxTQUFBdkwsR0FDQSxJQUFBMk0sRUFBQTNOLE9BQUFrQixVQUFBcUosU0FBQTlLLEtBQUF1QixHQUFBNE0sUUFBQSxpQkFBQUEsUUFBQSxTQUVBLGNBQUFELEdBQUEsbUJBQUEzTSxFQUFBeUMsWUFBQSxDQUNBLElBQUE1RCxFQUFBbUIsRUFBQXlDLFlBQUE1RCxLQUVBLG9CQUFBQSxFQUNBLE9BQUFBLEVBSUEsT0FBQThOLEVBM0RBRSxDQUFBN00sR0FBQSxJQU9BLFdBSkFxRCxFQUFBNkYsSUFBQSxTQUFBckosR0FDQSxJQUFBTixFQUFBNkwsRUFBQXBMLEVBQUFILEdBQUEyTCxHQUNBLE9BQUEzTCxFQUFBLEtBQUFOLElBRVdrTixLQUFBLFdBckJYSyxDQUFBdk4sRUFBQWlNLEdBR0EsT0FBQU8sT0FBQXhNLEdBL0JBd04sQ0FBQXhOLEVBQUFpTSxHQUVBLFFBQ0EsT0FBQU8sT0FBQXhNLG1DQ2pDQVAsT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQTJHLGFBQUEsRUFVQSxJQUNBaUksRUFEQSxtQkFBQTNOLGNBQUE0TixJQUFBLG1DQUFBakssRUFFQTVFLEVBQUEyRyxRQUFBaUksZ0NDZkFoTyxPQUFBQyxlQUFBYixFQUFBLGNBQ0FtQixPQUFBLElBRUFuQixFQUFBMkcsUUFtQkEsU0FDQW1JLEdBQ0EsSUFBQTFILEVBQUE1RCxVQUFBZSxPQUFBLFFBQUFLLElBQUFwQixVQUFBLEdBQUFBLFVBQUEsR0FBQXNMLEVBQUFoTixVQUFBcUosU0FDQTJELEVBQUFoTixVQUFBaU4sT0FBQTNILEVBQ0EwSCxFQUFBaE4sVUFBQThMLFFBQUF4RyxFQUVBNkYsRUFBQXRHLFVBQ0FtSSxFQUFBaE4sVUFBQW1MLEVBQUF0RyxTQUFBUyxJQXhCQSxJQUVBMUUsRUFGQXVLLEdBRUF2SyxFQUZ3RDVDLEVBQVEsS0FFMUI0QyxFQUFBcEIsV0FBQW9CLEVBQUEsQ0FBdUNpRSxRQUFBakUsaUNDUDdFOUIsT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQTJHLFFBVUEsU0FBQXhELEVBQUFMLEdBSUEsSUFIQXNILFFBQUFqSCxHQUlBLFVBQUFELE1BQUFKLGtDQ2xCQWxDLE9BQUFDLGVBQUFiLEVBQUEsY0FDQW1CLE9BQUEsSUFFQVAsT0FBQUMsZUFBQWIsRUFBQSxnQkFDQWMsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWlPLEVBQUE1RCxnQkFHQXhLLE9BQUFDLGVBQUFiLEVBQUEsZUFDQWMsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWtPLEVBQUFDLGVBR0F0TyxPQUFBQyxlQUFBYixFQUFBLGdCQUNBYyxZQUFBLEVBQ0FDLElBQUEsV0FDQSxPQUFBb08sRUFBQUMsZ0JBR0F4TyxPQUFBQyxlQUFBYixFQUFBLGNBQ0FjLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFzSyxFQUFBMEIsY0FHQW5NLE9BQUFDLGVBQUFiLEVBQUEsZUFDQWMsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQXNPLEVBQUFDLGVBSUEsSUFBQU4sRUFBb0JsUCxFQUFRLEdBRTVCbVAsRUFBbUJuUCxFQUFRLElBRTNCcVAsRUFBb0JyUCxFQUFRLElBRTVCdUwsRUFBa0J2TCxFQUFRLElBRTFCdVAsRUFBbUJ2UCxFQUFRLGtDQzFDM0JjLE9BQUFDLGVBQUFiLEVBQUEsY0FDQW1CLE9BQUEsSUFFQW5CLEVBQUErTSxXQWlCQSxTQUFBckosR0FDQSxJQUFBNkwsRUFBQSxHQUVBLEdBQUE3TCxFQUFBK0gsTUFBQSxDQUNBLElBQUErRCxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsT0FBQTlLLEVBRUEsSUFDQSxRQUFBK0ssRUFBQUMsRUFBQWxNLEVBQUErSCxNQUFBeEssT0FBQXVLLGNBQWlFZ0UsR0FBQUcsRUFBQUMsRUFBQUMsUUFBQUMsTUFBZ0VOLEdBQUEsR0FDakksSUFBQXBLLEVBQUF1SyxFQUFBeE8sTUFFQWlFLEVBQUE0RyxLQUNBdUQsRUFBQWhKLEtBQUF3SixFQUFBM0ssRUFBQTRHLElBQUFOLFFBQUEsRUFBQUosRUFBQWlCLGFBQUFuSCxFQUFBNEcsSUFBQU4sT0FBQXRHLEVBQUE0RyxJQUFBSyxVQUdLLE1BQUEyRCxHQUNMUCxHQUFBLEVBQ0FDLEVBQUFNLEVBQ0ssUUFDTCxJQUNBUixHQUFBLE1BQUFJLEVBQUFLLFFBQ0FMLEVBQUFLLFNBRU8sUUFDUCxHQUFBUixFQUNBLE1BQUFDLFNBSUcsR0FBQWhNLEVBQUFnSSxRQUFBaEksRUFBQWtKLFVBQUEsQ0FDSCxJQUFBbEIsRUFBQWhJLEVBQUFnSSxPQUNBd0UsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLE9BQUF4TCxFQUVBLElBQ0EsUUFBQXlMLEVBQUFDLEVBQUE1TSxFQUFBa0osVUFBQTNMLE9BQUF1SyxjQUF1RTBFLEdBQUFHLEVBQUFDLEVBQUFULFFBQUFDLE1BQW1FSSxHQUFBLEdBQzFJLElBQUFLLEVBQUFGLEVBQUFsUCxNQUNBb08sRUFBQWhKLEtBQUF3SixFQUFBckUsRUFBQTZFLEtBRUssTUFBQVAsR0FDTEcsR0FBQSxFQUNBQyxFQUFBSixFQUNLLFFBQ0wsSUFDQUUsR0FBQSxNQUFBSSxFQUFBTCxRQUNBSyxFQUFBTCxTQUVPLFFBQ1AsR0FBQUUsRUFDQSxNQUFBQyxJQU1BLFdBQUFiLEVBQUFoTCxPQUFBYixFQUFBWixRQUFBLENBQUFZLEVBQUFaLFNBQUF5SyxPQUFBZ0MsR0FBQWxCLEtBQUEsY0F4RUEsSUFBQS9DLEVBQWdCeEwsRUFBUSxJQWdGeEIsU0FBQWlRLEVBQUFyRSxFQUFBNkUsR0FDQSxJQUFBQyxFQUFBOUUsRUFBQStFLGVBQUFDLE9BQUEsRUFDQUMsRUFBQUMsRUFBQUosR0FBQTlFLEVBQUFpRixLQUNBRSxFQUFBTixFQUFBTyxLQUFBLEVBQ0FDLEVBQUFyRixFQUFBK0UsZUFBQUssS0FBQSxFQUNBRSxFQUFBVCxFQUFBTyxLQUFBQyxFQUNBRSxFQUFBLElBQUFWLEVBQUFPLEtBQUFOLEVBQUEsRUFDQVUsRUFBQVgsRUFBQUcsT0FBQU8sRUFDQUUsRUFBQVIsRUFBQVMsTUFBQSxnQkFDQSxTQUFBN0QsT0FBQTdCLEVBQUFqTCxLQUFBLE1BQUE4TSxPQUFBeUQsRUFBQSxLQUFBekQsT0FBQTJELEVBQUEsT0FJQSxTQUFBQyxHQUNBLElBQUFFLEVBQUFGLEVBQUF2RyxPQUFBLFNBQUEwRyxHQUNBQSxFQUFBLE9BQ0FSLEVBQUFRLEVBQUEsR0FDQSxZQUFBMU0sSUFBQWtNLElBRUFTLEVBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLE9BQUE5TSxFQUVBLElBQ0EsUUFBQStNLEVBQUFDLEVBQUFQLEVBQUFwUSxPQUFBdUssY0FBbUVnRyxHQUFBRyxFQUFBQyxFQUFBL0IsUUFBQUMsTUFBbUUwQixHQUFBLEdBQ3RJLElBQUFLLEVBQUFGLEVBQUF4USxNQUNBMlEsRUFBQUQsRUFBQSxHQUNBTixFQUFBdEQsS0FBQThELElBQUFSLEVBQUFPLEVBQUF2TixTQUVHLE1BQUF5TCxHQUNIeUIsR0FBQSxFQUNBQyxFQUFBMUIsRUFDRyxRQUNILElBQ0F3QixHQUFBLE1BQUFJLEVBQUEzQixRQUNBMkIsRUFBQTNCLFNBRUssUUFDTCxHQUFBd0IsRUFDQSxNQUFBQyxHQUtBLE9BQUFMLEVBQUF2RyxJQUFBLFNBQUFrSCxHQUNBLElBVUFDLEVBVkFILEVBQUFFLEVBQUEsR0FDQWxCLEVBQUFrQixFQUFBLEdBQ0EsT0FTQXBCLEVBVEFXLEdBUUFVLEVBUkFILEdBU0F2TixRQUFBME4sRUFUQW5CLElBQ0d6QyxLQUFBLE1BeENINkQsQ0FBQSxDQUNBLElBQUEzRSxPQUFBeUQsRUFBQSxRQUFBRyxFQUFBTixFQUFBLFFBQUF0RCxPQUFBeUQsRUFBQSxNQUFBRyxFQUFBTixJQUFBLElBQUFELEVBQUFNLEVBQUEsWUFBQTNELE9BQUF5RCxFQUFBLFFBQUFHLEVBQUFOLEVBQUEsTUEwQ0EsU0FBQUQsRUFBQTVDLEdBQ0EsT0FBQTdKLE1BQUE2SixFQUFBLEdBQUFLLEtBQUEsb0NDMUlBek4sT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQXVNLFlBbUJBLFNBQUFiLEVBQUF5RyxHQUNBLElBR0FDLEVBSEFDLEVBQUEsZUFDQXZCLEVBQUEsRUFDQUosRUFBQXlCLEVBQUEsRUFHQSxNQUFBQyxFQUFBQyxFQUFBQyxLQUFBNUcsRUFBQWlGLFFBQUF5QixFQUFBbE4sTUFBQWlOLEdBQ0FyQixHQUFBLEVBQ0FKLEVBQUF5QixFQUFBLEdBQUFDLEVBQUFsTixNQUFBa04sRUFBQSxHQUFBN04sUUFHQSxPQUNBdU0sT0FDQUosMEJDcENBLElBT0E2QixFQUNBQyxFQVJBdFEsRUFBQWpDLEVBQUFELFFBQUEsR0FVQSxTQUFBeVMsSUFDQSxVQUFBdlAsTUFBQSxtQ0FFQSxTQUFBd1AsSUFDQSxVQUFBeFAsTUFBQSxxQ0FzQkEsU0FBQXlQLEVBQUFDLEdBQ0EsR0FBQUwsSUFBQU0sV0FFQSxPQUFBQSxXQUFBRCxFQUFBLEdBR0EsSUFBQUwsSUFBQUUsSUFBQUYsSUFBQU0sV0FFQSxPQURBTixFQUFBTSxXQUNBQSxXQUFBRCxFQUFBLEdBRUEsSUFFQSxPQUFBTCxFQUFBSyxFQUFBLEdBQ0ssTUFBQUUsR0FDTCxJQUVBLE9BQUFQLEVBQUFsUyxLQUFBLEtBQUF1UyxFQUFBLEdBQ1MsTUFBQUUsR0FFVCxPQUFBUCxFQUFBbFMsS0FBQTJDLEtBQUE0UCxFQUFBLE1BdkNBLFdBQ0EsSUFFQUwsRUFEQSxtQkFBQU0sV0FDQUEsV0FFQUosRUFFSyxNQUFBSyxHQUNMUCxFQUFBRSxFQUVBLElBRUFELEVBREEsbUJBQUFPLGFBQ0FBLGFBRUFMLEVBRUssTUFBQUksR0FDTE4sRUFBQUUsR0FqQkEsR0F3RUEsSUFFQU0sRUFGQUMsRUFBQSxHQUNBQyxHQUFBLEVBRUFDLEdBQUEsRUFFQSxTQUFBQyxJQUNBRixHQUFBRixJQUdBRSxHQUFBLEVBQ0FGLEVBQUF6TyxPQUNBME8sRUFBQUQsRUFBQXpGLE9BQUEwRixHQUVBRSxHQUFBLEVBRUFGLEVBQUExTyxRQUNBOE8sS0FJQSxTQUFBQSxJQUNBLElBQUFILEVBQUEsQ0FHQSxJQUFBSSxFQUFBWCxFQUFBUyxHQUNBRixHQUFBLEVBR0EsSUFEQSxJQUFBbEYsRUFBQWlGLEVBQUExTyxPQUNBeUosR0FBQSxDQUdBLElBRkFnRixFQUFBQyxFQUNBQSxFQUFBLEtBQ0FFLEVBQUFuRixHQUNBZ0YsR0FDQUEsRUFBQUcsR0FBQUksTUFHQUosR0FBQSxFQUNBbkYsRUFBQWlGLEVBQUExTyxPQUVBeU8sRUFBQSxLQUNBRSxHQUFBLEVBbkVBLFNBQUFNLEdBQ0EsR0FBQWhCLElBQUFPLGFBRUEsT0FBQUEsYUFBQVMsR0FHQSxJQUFBaEIsSUFBQUUsSUFBQUYsSUFBQU8sYUFFQSxPQURBUCxFQUFBTyxhQUNBQSxhQUFBUyxHQUVBLElBRUFoQixFQUFBZ0IsR0FDSyxNQUFBVixHQUNMLElBRUEsT0FBQU4sRUFBQW5TLEtBQUEsS0FBQW1ULEdBQ1MsTUFBQVYsR0FHVCxPQUFBTixFQUFBblMsS0FBQTJDLEtBQUF3USxLQWdEQUMsQ0FBQUgsSUFpQkEsU0FBQUksRUFBQWQsRUFBQTdFLEdBQ0EvSyxLQUFBNFAsTUFDQTVQLEtBQUErSyxRQVlBLFNBQUE0RixLQTVCQXpSLEVBQUEwUixTQUFBLFNBQUFoQixHQUNBLElBQUFpQixFQUFBLElBQUExUCxNQUFBWCxVQUFBZSxPQUFBLEdBQ0EsR0FBQWYsVUFBQWUsT0FBQSxFQUNBLFFBQUFyRSxFQUFBLEVBQXVCQSxFQUFBc0QsVUFBQWUsT0FBc0JyRSxJQUM3QzJULEVBQUEzVCxFQUFBLEdBQUFzRCxVQUFBdEQsR0FHQStTLEVBQUExTSxLQUFBLElBQUFtTixFQUFBZCxFQUFBaUIsSUFDQSxJQUFBWixFQUFBMU8sUUFBQTJPLEdBQ0FQLEVBQUFVLElBU0FLLEVBQUE1UixVQUFBeVIsSUFBQSxXQUNBdlEsS0FBQTRQLElBQUFyUCxNQUFBLEtBQUFQLEtBQUErSyxRQUVBN0wsRUFBQTRSLE1BQUEsVUFDQTVSLEVBQUE2UixTQUFBLEVBQ0E3UixFQUFBMEIsSUFBQSxHQUNBMUIsRUFBQThSLEtBQUEsR0FDQTlSLEVBQUErUixRQUFBLEdBQ0EvUixFQUFBZ1MsU0FBQSxHQUlBaFMsRUFBQWlTLEdBQUFSLEVBQ0F6UixFQUFBa1MsWUFBQVQsRUFDQXpSLEVBQUFtUyxLQUFBVixFQUNBelIsRUFBQW9TLElBQUFYLEVBQ0F6UixFQUFBcVMsZUFBQVosRUFDQXpSLEVBQUFzUyxtQkFBQWIsRUFDQXpSLEVBQUF1UyxLQUFBZCxFQUNBelIsRUFBQXdTLGdCQUFBZixFQUNBelIsRUFBQXlTLG9CQUFBaEIsRUFFQXpSLEVBQUEwUyxVQUFBLFNBQUFuVSxHQUFxQyxVQUVyQ3lCLEVBQUEyUyxRQUFBLFNBQUFwVSxHQUNBLFVBQUF5QyxNQUFBLHFDQUdBaEIsRUFBQTRTLElBQUEsV0FBMkIsV0FDM0I1UyxFQUFBNlMsTUFBQSxTQUFBQyxHQUNBLFVBQUE5UixNQUFBLG1DQUVBaEIsRUFBQStTLE1BQUEsV0FBNEIsd0NDdkw1QixJQUFBelMsRUFBQTVCLE9BQUFrQixVQUFBVSxFQUFBMkksU0FBQTNJLEVBQUFULGVBQ0EsSUFBQW1ULHFCQ0RBalYsRUFBQUQsUUFBaUJGLEVBQVEsSUFBcUJxVix5Q0NFOUNsVixFQUFBRCxRQUFBLFNBQUFvVixFQUFBQyxHQUNBQSxNQUFBLElBQ0EsbUJBQUFBLE1BQUEsQ0FBNENDLElBQUFELElBQzVDLElBRUFFLEVBRkFDLEVBQUEsa0JBQUFILEVBQUFHLFFBQUFILEVBQUFHLE9BRUFGLEVBQUFELEVBQUFDLE1BQUFDLEVBUUtGLEVBQUFDLElBUEwsU0FBQWxRLEdBQ0EsZ0JBQUFxUSxFQUFBdlIsR0FDQSxJQUFBd1IsRUFBQSxDQUE0QmpVLElBQUFnVSxFQUFBdFUsTUFBQWlFLEVBQUFxUSxJQUM1QkUsRUFBQSxDQUE0QmxVLElBQUF5QyxFQUFBL0MsTUFBQWlFLEVBQUFsQixJQUM1QixPQUFBcVIsRUFBQUcsRUFBQUMsTUFLQUMsRUFBQSxHQUNBLGdCQUFBdEksRUFBQWxJLEdBS0EsR0FKQUEsS0FBQTJKLFFBQUEsbUJBQUEzSixFQUFBMkosU0FDQTNKLElBQUEySixlQUdBbkssSUFBQVEsRUFBQSxDQUNBLG9CQUFBQSxFQUFBLE9BQUF5USxTQUFBelEsR0FBQSxHQUFBQSxFQUFBLE9BQ0Esb0JBQUFBLEVBQUEsT0FBQWlJLEtBQUFDLFVBQUFsSSxHQUVBLElBQUFsRixFQUFBNFYsRUFDQSxHQUFBM1IsTUFBQWEsUUFBQUksR0FBQSxDQUVBLElBREEwUSxFQUFBLElBQ0E1VixFQUFBLEVBQXVCQSxFQUFBa0YsRUFBQWIsT0FBaUJyRSxJQUN4Q0EsSUFBQTRWLEdBQUEsS0FDQUEsR0FBQXhJLEVBQUFsSSxFQUFBbEYsS0FBQSxPQUVBLE9BQUE0VixFQUFBLElBR0EsVUFBQTFRLEVBQUEsYUFFQSxRQUFBd1EsRUFBQW5JLFFBQUFySSxHQUFBLENBQ0EsR0FBQW9RLEVBQUEsT0FBQW5JLEtBQUFDLFVBQUEsYUFDQSxVQUFBeUksVUFBQSx5Q0FHQSxJQUFBQyxFQUFBSixFQUFBclAsS0FBQW5CLEdBQUEsRUFDQUgsRUFBQXJFLE9BQUFxRSxLQUFBRyxHQUFBNlEsS0FBQVgsS0FBQWxRLElBRUEsSUFEQTBRLEVBQUEsR0FDQTVWLEVBQUEsRUFBbUJBLEVBQUErRSxFQUFBVixPQUFpQnJFLElBQUEsQ0FDcEMsSUFBQXVCLEVBQUF3RCxFQUFBL0UsR0FDQWlCLEVBQUFtTSxFQUFBbEksRUFBQTNELElBRUFOLElBQ0EyVSxPQUFBLEtBQ0FBLEdBQUF6SSxLQUFBQyxVQUFBN0wsR0FBQSxJQUFBTixHQUdBLE9BREF5VSxFQUFBdlAsT0FBQTJQLEVBQUEsR0FDQSxJQUFpQkYsRUFBQSxLQXRDakIsQ0F1Q0tWLG1GQ3pETCxJQU1NYyxFQUFlLElBTnJCcFcsRUFBQSxJQU15QjZHLFNBQ3pCd1AsT0FBT0Msa0JBQW9CRixpRkNOM0IsSUFBQUcsRUFBQXZXLEVBQUEsSUFDQXdXLEVBQUF4VyxFQUFBLElBRUF5VyxFQUFBLFdBT0UsU0FBQUEsSUFDRXZULEtBQUtpUixRQUFVLFFBQ2ZqUixLQUFLd1QsWUFBYyxLQUNuQnhULEtBQUt5VCxLQUFPSCxFQUFBSSxXQUFXQyxRQWdEM0IsT0E3Q0UvVixPQUFBQyxlQUFXMFYsRUFBQXpVLFVBQUEsUUFBSyxLQUFoQixXQUNFLElBQU04VSxFQUFPNVQsS0FDYixNQUFPLENBQ0w2VCxRQUFBLFNBQVFDLEdBRU4sWUFGTSxJQUFBQSxPQUFBLEdBQ05GLEVBQUtHLGlCQUNFLElBR1RDLFVBQUEsU0FBVUMsRUFBY0gsR0FDdEIsWUFEc0IsSUFBQUEsT0FBQSxHQUNmLHdDQUtOUCxFQUFBelUsVUFBQWlWLGVBQVAsZUFBQWhVLEVBQUFDLEtBQ0VBLEtBQUt3VCxZQUFjLElBQUlVLFlBQVksV0FDbkNsVSxLQUFLd1QsWUFBWVcsVUFBWSxTQUFBclUsR0FDM0IsSUFBTXNVLEVBQVFyVSxFQUFLc1UsZUFBZWhLLEtBQUtpSyxNQUFNeFUsRUFBUXNTLE9BQ3JEOVIsUUFBUWlVLElBQUlILEdBQ1JyVSxFQUFLeVUsZ0JBQ1B6VSxFQUFLeVUsZUFBZUosS0FLbkJiLEVBQUF6VSxVQUFBMlYsY0FBUCxXQUNNelUsS0FBS3dULGNBQ1B4VCxLQUFLd1QsWUFBWWtCLFFBQ2pCMVUsS0FBS3dULFlBQWMsT0FJaEJELEVBQUF6VSxVQUFBNlYsd0JBQVAsU0FBK0JDLEdBQzdCNVUsS0FBS3dVLGVBQWlCSSxHQUdoQnJCLEVBQUF6VSxVQUFBdVYsZUFBUixTQUF1QkQsR0FPckIsT0FOQXhXLE9BQU9xRSxLQUFLbVMsRUFBTVMsTUFBTUMsU0FBU0MsUUFBUSxTQUFBdFcsR0FDdkMyVixFQUFNUyxNQUFNQyxRQUFRclcsR0FBS3VXLFNBQVczQixFQUFBaUIsTUFBTUYsRUFBTVMsTUFBTUMsUUFBUXJXLEdBQUt1VyxZQUVyRXBYLE9BQU9xRSxLQUFLbVMsRUFBTVMsTUFBTUksV0FBV0YsUUFBUSxTQUFBdFcsR0FDekMyVixFQUFNUyxNQUFNSSxVQUFVeFcsR0FBS3lXLFNBQVc3QixFQUFBaUIsTUFBTUYsRUFBTVMsTUFBTUksVUFBVXhXLEdBQUt5VyxZQUVsRWQsR0FFWGIsRUExREEsNkNDRkEzVixPQUFBQyxlQUFBYixFQUFBLGNBQ0FtQixPQUFBLElBRUFuQixFQUFBc1gsTUFvQ0EsU0FBQTVMLEVBQUF1TCxHQUNBLElBQUFrQixFQUFBLGlCQUFBek0sRUFBQSxJQUFBSyxFQUFBcU0sT0FBQTFNLEtBRUEsS0FBQXlNLGFBQUFwTSxFQUFBcU0sUUFDQSxVQUFBckMsVUFBQSxrQ0FBQXhJLFFBQUEsRUFBQTdHLEVBQUFDLFNBQUF3UixLQUlBLE9BNkRBLFNBQUFFLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUNBLE9BQ0F4UixLQUFBeVIsRUFBQUMsS0FBQUMsU0FDQTlOLFlBQUErTixHQUFBTCxFQUFBTSxFQUFBQyxVQUFBQyxJQUFBQyxFQUFBSCxFQUFBQyxVQUFBRyxLQUNBL00sTUFBQXFNLEVBQUFoTSxJQWxFQTJNLEVBREEsRUFBQUwsRUFBQU0sYUFBQWQsRUFBQWxCLEdBQUEsTUExQ0FqWCxFQUFBa1osV0F5REEsU0FBQXhOLEVBQUF1TCxHQUNBLElBQUFrQixFQUFBLGlCQUFBek0sRUFBQSxJQUFBSyxFQUFBcU0sT0FBQTFNLEtBQ0EyTSxHQUFBLEVBQUFNLEVBQUFNLGFBQUFkLEVBQUFsQixHQUFBLElBQ0FrQyxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBQyxLQUNBLElBQUExWCxFQUFBaVksRUFBQWYsR0FBQSxHQUVBLE9BREFjLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUFHLEtBQ0E1WCxHQTlEQW5CLEVBQUFxWixVQTRFQSxTQUFBM04sRUFBQXVMLEdBQ0EsSUFBQWtCLEVBQUEsaUJBQUF6TSxFQUFBLElBQUFLLEVBQUFxTSxPQUFBMU0sS0FDQTJNLEdBQUEsRUFBQU0sRUFBQU0sYUFBQWQsRUFBQWxCLEdBQUEsSUFDQWtDLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUFDLEtBQ0EsSUFBQVMsRUFBQUMsRUFBQWxCLEdBRUEsT0FEQWMsRUFBQWQsRUFBQU0sRUFBQUMsVUFBQUcsS0FDQU8sR0FqRkF0WixFQUFBd1osa0JBQ0F4WixFQUFBdVoscUJBQ0F2WixFQUFBeVosaUJBRUEsSUFBQS9TLEVBQUFnVCxFQUFzQzVaLEVBQVEsSUFFOUM2WixFQUFBRCxFQUEyQzVaLEVBQVEsSUFFbkRpTSxFQUFjak0sRUFBUSxJQUV0QjhaLEVBQWE5WixFQUFRLEdBRXJCNlksRUFBYTdZLEVBQVEsSUFFckJ5WSxFQUFhelksRUFBUSxJQUVyQitaLEVBQXlCL1osRUFBUSxJQUVqQyxTQUFBNFosRUFBQWhYLEdBQXNDLE9BQUFBLEtBQUFwQixXQUFBb0IsRUFBQSxDQUF1Q2lFLFFBQUFqRSxHQXNFN0UsU0FBQW9YLEVBQUF6QixHQUNBLElBQUFDLEVBQUFhLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUFtQixNQUNBLE9BQ0FqVCxLQUFBeVIsRUFBQUMsS0FBQXVCLEtBQ0E1WSxNQUFBbVgsRUFBQW5YLE1BQ0E2SyxNQUFBcU0sRUFBQUMsSUF5QkEsU0FBQVEsRUFBQVQsR0FDQSxHQUFBMkIsRUFBQTNCLEVBQUFNLEVBQUFDLFVBQUFtQixNQUNBLE9BQUExQixFQUFBQyxNQUFBblgsT0FDQSxZQUNBLGVBQ0EsbUJBQ0EsZUFDQSxPQUFBOFksRUFBQTVCLEdBRUEsYUFDQSxhQUNBLFdBQ0EsZ0JBQ0EsWUFDQSxXQUNBLFlBQ0EsZ0JBQ0EsT0FBQTZCLEVBQUE3QixHQUVBLGFBQ0EsT0EyNkJBLFNBQUFBLEdBQ0EsSUFBQThCLEVBQUE5QixFQUFBK0IsWUFFQSxHQUFBRCxFQUFBclQsT0FBQTZSLEVBQUFDLFVBQUFtQixLQUNBLE9BQUFJLEVBQUFoWixPQUNBLGFBQ0EsT0ErQkEsU0FBQWtYLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUNBK0IsRUFBQWhDLEVBQUEsVUFDQWdDLEVBQUFoQyxFQUFBLFVBQ0EsSUFBQWlDLEVBQUFDLEVBQUFsQyxHQUFBLEdBQ0FtQyxFQUFBUixFQUFBM0IsRUFBQU0sRUFBQUMsVUFBQTZCLFNBQUEvQixHQUFBTCxFQUFBTSxFQUFBQyxVQUFBNkIsUUFBQUMsRUFBQS9CLEVBQUFDLFVBQUErQixTQUFBLEdBRUEsT0FBQUwsRUFBQS9WLFFBQUEsSUFBQWlXLEVBQUFqVyxPQUNBLE1BQUFxVyxHQUFBdkMsR0FHQSxPQUNBdlIsS0FBQXlSLEVBQUFDLEtBQUFxQyxpQkFDQVAsYUFDQUUsaUJBQ0F4TyxNQUFBcU0sRUFBQWhNLElBOUNBeU8sQ0FBQXpDLEdBRUEsYUFDQSxPQW9EQSxTQUFBQSxHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFDQStCLEVBQUFoQyxFQUFBLFVBQ0FnQyxFQUFBaEMsRUFBQSxVQUNBLElBQUE1WCxFQUFBcVosRUFBQXpCLEdBQ0FpQyxFQUFBQyxFQUFBbEMsR0FBQSxHQUVBLE9BQUFpQyxFQUFBL1YsT0FDQSxNQUFBcVcsR0FBQXZDLEdBR0EsT0FDQXZSLEtBQUF5UixFQUFBQyxLQUFBdUMsc0JBQ0F0YSxPQUNBNlosYUFDQXRPLE1BQUFxTSxFQUFBaE0sSUFuRUEyTyxDQUFBM0MsR0FFQSxXQUNBLE9BMkVBLFNBQUFBLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUNBK0IsRUFBQWhDLEVBQUEsVUFDQWdDLEVBQUFoQyxFQUFBLFFBQ0EsSUFBQTVYLEVBQUFxWixFQUFBekIsR0FDQTRDLEVBQUFDLEVBQUE3QyxHQUNBaUMsRUFBQUMsRUFBQWxDLEdBQUEsR0FDQThDLEVBQUFDLEVBQUEvQyxHQUVBLE9BQUE0QyxFQUFBMVcsUUFBQSxJQUFBK1YsRUFBQS9WLFFBQUEsSUFBQTRXLEVBQUE1VyxPQUNBLE1BQUFxVyxHQUFBdkMsR0FHQSxPQUNBdlIsS0FBQXlSLEVBQUFDLEtBQUE2QyxzQkFDQTVhLE9BQ0F3YSxhQUNBWCxhQUNBYSxTQUNBblAsTUFBQXFNLEVBQUFoTSxJQTlGQWlQLENBQUFqRCxHQUVBLGdCQUNBLE9BcUdBLFNBQUFBLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUNBK0IsRUFBQWhDLEVBQUEsVUFDQWdDLEVBQUFoQyxFQUFBLGFBQ0EsSUFBQTVYLEVBQUFxWixFQUFBekIsR0FDQWlDLEVBQUFDLEVBQUFsQyxHQUFBLEdBQ0E4QyxFQUFBQyxFQUFBL0MsR0FFQSxPQUFBaUMsRUFBQS9WLFFBQUEsSUFBQTRXLEVBQUE1VyxPQUNBLE1BQUFxVyxHQUFBdkMsR0FHQSxPQUNBdlIsS0FBQXlSLEVBQUFDLEtBQUErQyx5QkFDQTlhLE9BQ0E2WixhQUNBYSxTQUNBblAsTUFBQXFNLEVBQUFoTSxJQXRIQW1QLENBQUFuRCxHQUVBLFlBQ0EsT0E2SEEsU0FBQUEsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0ErQixFQUFBaEMsRUFBQSxVQUNBZ0MsRUFBQWhDLEVBQUEsU0FDQSxJQUFBNVgsRUFBQXFaLEVBQUF6QixHQUNBaUMsRUFBQUMsRUFBQWxDLEdBQUEsR0FDQW9ELEVBQUFDLEVBQUFyRCxHQUVBLE9BQUFpQyxFQUFBL1YsUUFBQSxJQUFBa1gsRUFBQWxYLE9BQ0EsTUFBQXFXLEdBQUF2QyxHQUdBLE9BQ0F2UixLQUFBeVIsRUFBQUMsS0FBQW1ELHFCQUNBbGIsT0FDQTZaLGFBQ0FtQixRQUNBelAsTUFBQXFNLEVBQUFoTSxJQTlJQXVQLENBQUF2RCxHQUVBLFdBQ0EsT0FxSkEsU0FBQUEsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0ErQixFQUFBaEMsRUFBQSxVQUNBZ0MsRUFBQWhDLEVBQUEsUUFDQSxJQUFBNVgsRUFBQXFaLEVBQUF6QixHQUNBaUMsRUFBQUMsRUFBQWxDLEdBQUEsR0FDQXdELEVBQUFDLEVBQUF6RCxHQUVBLE9BQUFpQyxFQUFBL1YsUUFBQSxJQUFBc1gsRUFBQXRYLE9BQ0EsTUFBQXFXLEdBQUF2QyxHQUdBLE9BQ0F2UixLQUFBeVIsRUFBQUMsS0FBQXVELG9CQUNBdGIsT0FDQTZaLGFBQ0F1QixTQUNBN1AsTUFBQXFNLEVBQUFoTSxJQXRLQTJQLENBQUEzRCxHQUVBLFlBQ0EsT0E2S0EsU0FBQUEsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0ErQixFQUFBaEMsRUFBQSxVQUNBZ0MsRUFBQWhDLEVBQUEsU0FDQSxJQUFBNVgsRUFBQXFaLEVBQUF6QixHQUNBaUMsRUFBQUMsRUFBQWxDLEdBQUEsR0FDQThDLEVBQUFjLEVBQUE1RCxHQUVBLE9BQUFpQyxFQUFBL1YsUUFBQSxJQUFBNFcsRUFBQTVXLE9BQ0EsTUFBQXFXLEdBQUF2QyxHQUdBLE9BQ0F2UixLQUFBeVIsRUFBQUMsS0FBQTBELDRCQUNBemIsT0FDQTZaLGFBQ0FhLFNBQ0FuUCxNQUFBcU0sRUFBQWhNLElBOUxBOFAsQ0FBQTlELEdBSUEsTUFBQXVDLEdBQUF2QyxFQUFBOEIsR0F2OEJBaUMsQ0FBQS9ELE9BRUcsSUFBQTJCLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBNkIsU0FDSCxPQUFBUixFQUFBNUIsR0FDRyxHQUFBZ0UsRUFBQWhFLEdBQ0gsT0FBQTZCLEVBQUE3QixHQUdBLE1BQUF1QyxHQUFBdkMsR0FTQSxTQUFBNEIsRUFBQTVCLEdBQ0EsR0FBQTJCLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBbUIsTUFDQSxPQUFBMUIsRUFBQUMsTUFBQW5YLE9BQ0EsWUFDQSxlQUNBLG1CQUNBLE9BQUFtYixFQUFBakUsR0FFQSxlQUNBLE9BNE9BLFNBQUFBLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUtBLEdBSkErQixFQUFBaEMsRUFBQSxZQUlBQSxFQUFBcEIsUUFBQXNGLDhCQUNBLE9BQ0F6VixLQUFBeVIsRUFBQUMsS0FBQWdFLG9CQUNBL2IsS0FBQWdjLEVBQUFwRSxHQUNBcUUsb0JBQUFDLEVBQUF0RSxHQUNBdUUsZUFBQXZDLEVBQUFoQyxFQUFBLE1BQUFvQixFQUFBcEIsSUFDQWlDLFdBQUFDLEVBQUFsQyxHQUFBLEdBQ0F3RSxhQUFBQyxFQUFBekUsR0FDQXJNLE1BQUFxTSxFQUFBaE0sSUFJQSxPQUNBdkYsS0FBQXlSLEVBQUFDLEtBQUFnRSxvQkFDQS9iLEtBQUFnYyxFQUFBcEUsR0FDQXVFLGVBQUF2QyxFQUFBaEMsRUFBQSxNQUFBb0IsRUFBQXBCLElBQ0FpQyxXQUFBQyxFQUFBbEMsR0FBQSxHQUNBd0UsYUFBQUMsRUFBQXpFLEdBQ0FyTSxNQUFBcU0sRUFBQWhNLElBcFFBMFEsQ0FBQTFFLFFBRUcsR0FBQTJCLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBNkIsU0FDSCxPQUFBNkIsRUFBQWpFLEdBR0EsTUFBQXVDLEdBQUF2QyxHQVVBLFNBQUFpRSxFQUFBakUsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BRUEsR0FBQTBCLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBNkIsU0FDQSxPQUNBM1QsS0FBQXlSLEVBQUFDLEtBQUF3RSxxQkFDQUMsVUFBQSxRQUNBeGMsVUFBQW1FLEVBQ0E4WCxvQkFBQSxHQUNBcEMsV0FBQSxHQUNBdUMsYUFBQUMsRUFBQXpFLEdBQ0FyTSxNQUFBcU0sRUFBQWhNLElBSUEsSUFDQTVMLEVBREF3YyxFQUFBQyxFQUFBN0UsR0FPQSxPQUpBMkIsRUFBQTNCLEVBQUFNLEVBQUFDLFVBQUFtQixRQUNBdFosRUFBQXFaLEVBQUF6QixJQUdBLENBQ0F2UixLQUFBeVIsRUFBQUMsS0FBQXdFLHFCQUNBQyxZQUNBeGMsT0FDQWljLG9CQUFBQyxFQUFBdEUsR0FDQWlDLFdBQUFDLEVBQUFsQyxHQUFBLEdBQ0F3RSxhQUFBQyxFQUFBekUsR0FDQXJNLE1BQUFxTSxFQUFBaE0sSUFRQSxTQUFBNlEsRUFBQTdFLEdBQ0EsSUFBQThFLEVBQUFoRSxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBbUIsTUFFQSxPQUFBb0QsRUFBQWhjLE9BQ0EsWUFDQSxjQUVBLGVBQ0EsaUJBRUEsbUJBQ0EscUJBR0EsTUFBQXlaLEdBQUF2QyxFQUFBOEUsR0FPQSxTQUFBUixFQUFBdEUsR0FDQSxPQUFBMkIsRUFBQTNCLEVBQUFNLEVBQUFDLFVBQUF3RSxTQUFBMUUsR0FBQUwsRUFBQU0sRUFBQUMsVUFBQXdFLFFBQUFDLEVBQUExRSxFQUFBQyxVQUFBMEUsU0FBQSxHQU9BLFNBQUFELEVBQUFoRixHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFDQSxPQUNBeFIsS0FBQXlSLEVBQUFDLEtBQUErRSxvQkFDQUMsU0FBQUMsRUFBQXBGLEdBQ0FpQixNQUFBSCxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBOEUsT0FBQW5FLEVBQUFsQixJQUNBc0YsYUFBQUMsRUFBQXZGLEVBQUFNLEVBQUFDLFVBQUFpRixRQUFBekUsRUFBQWYsR0FBQSxRQUFBelQsRUFDQTBWLFdBQUFDLEVBQUFsQyxHQUFBLEdBQ0FyTSxNQUFBcU0sRUFBQWhNLElBUUEsU0FBQW9SLEVBQUFwRixHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFFQSxPQURBYSxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBa0YsUUFDQSxDQUNBaFgsS0FBQXlSLEVBQUFDLEtBQUF1RixTQUNBdGQsS0FBQXFaLEVBQUF6QixHQUNBck0sTUFBQXFNLEVBQUFoTSxJQVFBLFNBQUF5USxFQUFBekUsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0EsT0FDQXhSLEtBQUF5UixFQUFBQyxLQUFBd0YsY0FDQUMsV0FBQXZGLEdBQUFMLEVBQUFNLEVBQUFDLFVBQUE2QixRQUFBeUQsRUFBQXZGLEVBQUFDLFVBQUErQixTQUNBM08sTUFBQXFNLEVBQUFoTSxJQVdBLFNBQUE2UixFQUFBN0YsR0FDQSxPQUFBMkIsRUFBQTNCLEVBQUFNLEVBQUFDLFVBQUF1RixRQTZFQSxTQUFBOUYsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0FhLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUF1RixRQUNBLElBQUFDLEVBQUFDLEVBQUFoRyxFQUFBLE1BRUEsSUFBQStGLEdBQUFwRSxFQUFBM0IsRUFBQU0sRUFBQUMsVUFBQW1CLE1BQ0EsT0FDQWpULEtBQUF5UixFQUFBQyxLQUFBOEYsZ0JBQ0E3ZCxLQUFBZ2MsRUFBQXBFLEdBQ0FpQyxXQUFBQyxFQUFBbEMsR0FBQSxHQUNBck0sTUFBQXFNLEVBQUFoTSxJQUlBLE9BQ0F2RixLQUFBeVIsRUFBQUMsS0FBQStGLGdCQUNBM0IsY0FBQXdCLEVBQUEzRSxFQUFBcEIsUUFBQXpULEVBQ0EwVixXQUFBQyxFQUFBbEMsR0FBQSxHQUNBd0UsYUFBQUMsRUFBQXpFLEdBQ0FyTSxNQUFBcU0sRUFBQWhNLElBaEdBbVMsQ0FBQW5HLEdBU0EsU0FBQUEsR0FDQSxJQUVBb0csRUFDQWhlLEVBSEE0TCxFQUFBZ00sRUFBQUMsTUFDQW9HLEVBQUE1RSxFQUFBekIsR0FJQXVGLEVBQUF2RixFQUFBTSxFQUFBQyxVQUFBOEUsUUFDQWUsRUFBQUMsRUFDQWplLEVBQUFxWixFQUFBekIsSUFFQTVYLEVBQUFpZSxFQUdBLE9BQ0E1WCxLQUFBeVIsRUFBQUMsS0FBQW1HLE1BQ0FGLFFBQ0FoZSxPQUNBK0MsVUFBQW9iLEVBQUF2RyxHQUFBLEdBQ0FpQyxXQUFBQyxFQUFBbEMsR0FBQSxHQUNBd0UsYUFBQTdDLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBNkIsU0FBQXFDLEVBQUF6RSxRQUFBelQsRUFDQW9ILE1BQUFxTSxFQUFBaE0sSUE3QkF3UyxDQUFBeEcsR0FxQ0EsU0FBQXVHLEVBQUF2RyxFQUFBeUcsR0FDQSxJQUFBQyxFQUFBRCxFQUFBRSxFQUFBQyxFQUNBLE9BQUFqRixFQUFBM0IsRUFBQU0sRUFBQUMsVUFBQXdFLFNBQUExRSxHQUFBTCxFQUFBTSxFQUFBQyxVQUFBd0UsUUFBQTJCLEVBQUFwRyxFQUFBQyxVQUFBMEUsU0FBQSxHQU9BLFNBQUEyQixFQUFBNUcsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0E3WCxFQUFBcVosRUFBQXpCLEdBRUEsT0FEQWMsRUFBQWQsRUFBQU0sRUFBQUMsVUFBQThFLE9BQ0EsQ0FDQTVXLEtBQUF5UixFQUFBQyxLQUFBMEcsU0FDQXplLE9BQ0FVLE1BQUFpWSxFQUFBZixHQUFBLEdBQ0FyTSxNQUFBcU0sRUFBQWhNLElBSUEsU0FBQTJTLEVBQUEzRyxHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFDQSxPQUNBeFIsS0FBQXlSLEVBQUFDLEtBQUEwRyxTQUNBemUsS0FBQXFaLEVBQUF6QixHQUNBbFgsT0FBQWdZLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUE4RSxPQUFBbEUsRUFBQW5CLElBQ0FyTSxNQUFBcU0sRUFBQWhNLElBMkVBLFNBQUFvUSxFQUFBcEUsR0FDQSxVQUFBQSxFQUFBQyxNQUFBblgsTUFDQSxNQUFBeVosR0FBQXZDLEdBR0EsT0FBQXlCLEVBQUF6QixHQXVCQSxTQUFBZSxFQUFBZixFQUFBeUcsR0FDQSxJQUFBeEcsRUFBQUQsRUFBQUMsTUFFQSxPQUFBQSxFQUFBeFIsTUFDQSxLQUFBNlIsRUFBQUMsVUFBQXVHLFVBQ0EsT0FvRkEsU0FBQTlHLEVBQUF5RyxHQUNBLElBQUF6UyxFQUFBZ00sRUFBQUMsTUFDQXlHLEVBQUFELEVBQUF0RixFQUFBNEYsRUFDQSxPQUNBdFksS0FBQXlSLEVBQUFDLEtBQUE2RyxLQUNBeEQsT0FBQXlELEdBQUFqSCxFQUFBTSxFQUFBQyxVQUFBdUcsVUFBQUosRUFBQXBHLEVBQUFDLFVBQUEyRyxXQUNBdlQsTUFBQXFNLEVBQUFoTSxJQTFGQW1ULENBQUFuSCxFQUFBeUcsR0FFQSxLQUFBbkcsRUFBQUMsVUFBQTZCLFFBQ0EsT0FpR0EsU0FBQXBDLEVBQUF5RyxHQUNBLElBQUF6UyxFQUFBZ00sRUFBQUMsTUFNQSxPQUNBeFIsS0FBQXlSLEVBQUFDLEtBQUFpSCxPQUNBdEUsT0FBQW1FLEdBQUFqSCxFQUFBTSxFQUFBQyxVQUFBNkIsUUFOQSxXQUNBLE9BY0EsU0FBQXBDLEVBQUF5RyxHQUNBLElBQUF6UyxFQUFBZ00sRUFBQUMsTUFDQTdYLEVBQUFxWixFQUFBekIsR0FFQSxPQURBYyxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBOEUsT0FDQSxDQUNBNVcsS0FBQXlSLEVBQUFDLEtBQUFrSCxhQUNBamYsT0FDQVUsTUFBQWlZLEVBQUFmLEVBQUF5RyxHQUNBOVMsTUFBQXFNLEVBQUFoTSxJQXRCQXNULENBQUF0SCxFQUFBeUcsSUFLQW5HLEVBQUFDLFVBQUErQixTQUNBM08sTUFBQXFNLEVBQUFoTSxJQTNHQXVULENBQUF2SCxFQUFBeUcsR0FFQSxLQUFBbkcsRUFBQUMsVUFBQWlILElBRUEsT0FEQXhILEVBQUF5SCxVQUNBLENBQ0FoWixLQUFBeVIsRUFBQUMsS0FBQXFILElBQ0ExZSxNQUFBbVgsRUFBQW5YLE1BQ0E2SyxNQUFBcU0sRUFBQUMsSUFHQSxLQUFBSyxFQUFBQyxVQUFBbUgsTUFFQSxPQURBMUgsRUFBQXlILFVBQ0EsQ0FDQWhaLEtBQUF5UixFQUFBQyxLQUFBdUgsTUFDQTVlLE1BQUFtWCxFQUFBblgsTUFDQTZLLE1BQUFxTSxFQUFBQyxJQUdBLEtBQUFLLEVBQUFDLFVBQUFvSCxPQUNBLEtBQUFySCxFQUFBQyxVQUFBcUgsYUFDQSxPQUFBQyxFQUFBN0gsR0FFQSxLQUFBTSxFQUFBQyxVQUFBbUIsS0FDQSxlQUFBekIsRUFBQW5YLE9BQUEsVUFBQW1YLEVBQUFuWCxPQUNBa1gsRUFBQXlILFVBQ0EsQ0FDQWhaLEtBQUF5UixFQUFBQyxLQUFBMkgsUUFDQWhmLE1BQUEsU0FBQW1YLEVBQUFuWCxNQUNBNkssTUFBQXFNLEVBQUFDLEtBRU8sU0FBQUEsRUFBQW5YLE9BQ1BrWCxFQUFBeUgsVUFDQSxDQUNBaFosS0FBQXlSLEVBQUFDLEtBQUE0SCxLQUNBcFUsTUFBQXFNLEVBQUFDLE1BSUFELEVBQUF5SCxVQUNBLENBQ0FoWixLQUFBeVIsRUFBQUMsS0FBQTZILEtBQ0FsZixNQUFBbVgsRUFBQW5YLE1BQ0E2SyxNQUFBcU0sRUFBQUMsS0FHQSxLQUFBSyxFQUFBQyxVQUFBa0YsT0FDQSxJQUFBZ0IsRUFDQSxPQUFBckIsRUFBQXBGLEdBTUEsTUFBQXVDLEdBQUF2QyxHQUdBLFNBQUE2SCxFQUFBN0gsR0FDQSxJQUFBQyxFQUFBRCxFQUFBQyxNQUVBLE9BREFELEVBQUF5SCxVQUNBLENBQ0FoWixLQUFBeVIsRUFBQUMsS0FBQXdILE9BQ0E3ZSxNQUFBbVgsRUFBQW5YLE1BQ0FtZixNQUFBaEksRUFBQXhSLE9BQUE2UixFQUFBQyxVQUFBcUgsYUFDQWpVLE1BQUFxTSxFQUFBQyxJQUlBLFNBQUFrQixFQUFBbkIsR0FDQSxPQUFBZSxFQUFBZixHQUFBLEdBR0EsU0FBQStHLEVBQUEvRyxHQUNBLE9BQUFlLEVBQUFmLEdBQUEsR0E0REEsU0FBQWtDLEVBQUFsQyxFQUFBeUcsR0FHQSxJQUZBLElBQUF4RSxFQUFBLEdBRUFOLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBMkgsS0FDQWpHLEVBQUEvVCxLQUFBaWEsRUFBQW5JLEVBQUF5RyxJQUdBLE9BQUF4RSxFQU9BLFNBQUFrRyxFQUFBbkksRUFBQXlHLEdBQ0EsSUFBQXpTLEVBQUFnTSxFQUFBQyxNQUVBLE9BREFhLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUEySCxJQUNBLENBQ0F6WixLQUFBeVIsRUFBQUMsS0FBQWlJLFVBQ0FoZ0IsS0FBQXFaLEVBQUF6QixHQUNBN1UsVUFBQW9iLEVBQUF2RyxFQUFBeUcsR0FDQTlTLE1BQUFxTSxFQUFBaE0sSUFZQSxTQUFBa04sRUFBQWxCLEdBQ0EsSUFDQWlCLEVBREFqTixFQUFBZ00sRUFBQUMsTUFlQSxPQVpBc0YsRUFBQXZGLEVBQUFNLEVBQUFDLFVBQUF1RyxZQUNBN0YsRUFBQUMsRUFBQWxCLEdBQ0FjLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUEyRyxXQUNBakcsRUFBQSxDQUNBeFMsS0FBQXlSLEVBQUFDLEtBQUFrSSxVQUNBcEgsT0FDQXROLE1BQUFxTSxFQUFBaE0sS0FHQWlOLEVBQUFHLEVBQUFwQixHQUdBdUYsRUFBQXZGLEVBQUFNLEVBQUFDLFVBQUErSCxNQUNBLENBQ0E3WixLQUFBeVIsRUFBQUMsS0FBQW9JLGNBQ0F0SCxPQUNBdE4sTUFBQXFNLEVBQUFoTSxJQUlBaU4sRUFPQSxTQUFBRyxFQUFBcEIsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0EsT0FDQXhSLEtBQUF5UixFQUFBQyxLQUFBcUksV0FDQXBnQixLQUFBcVosRUFBQXpCLEdBQ0FyTSxNQUFBcU0sRUFBQWhNLElBb0JBLFNBQUE2TixFQUFBN0IsR0FFQSxJQUFBOEIsRUFBQWtDLEVBQUFoRSxLQUFBK0IsWUFBQS9CLEVBQUFDLE1BRUEsR0FBQTZCLEVBQUFyVCxPQUFBNlIsRUFBQUMsVUFBQW1CLEtBQ0EsT0FBQUksRUFBQWhaLE9BQ0EsYUFDQSxPQThDQSxTQUFBa1gsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0ErQixFQUFBaEMsRUFBQSxVQUNBLElBQUFpQyxFQUFBQyxFQUFBbEMsR0FBQSxHQUNBbUMsRUFBQTlCLEdBQUFMLEVBQUFNLEVBQUFDLFVBQUE2QixRQUFBQyxFQUFBL0IsRUFBQUMsVUFBQStCLFNBQ0EsT0FDQTdULEtBQUF5UixFQUFBQyxLQUFBc0ksa0JBQ0F4RyxhQUNBRSxpQkFDQXhPLE1BQUFxTSxFQUFBaE0sSUF2REEwVSxDQUFBMUksR0FFQSxhQUNBLE9BNkVBLFNBQUFBLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUNBMEksRUFBQUMsRUFBQTVJLEdBQ0FnQyxFQUFBaEMsRUFBQSxVQUNBLElBQUE1WCxFQUFBcVosRUFBQXpCLEdBQ0FpQyxFQUFBQyxFQUFBbEMsR0FBQSxHQUNBLE9BQ0F2UixLQUFBeVIsRUFBQUMsS0FBQTBJLHVCQUNBRixjQUNBdmdCLE9BQ0E2WixhQUNBdE8sTUFBQXFNLEVBQUFoTSxJQXhGQThVLENBQUE5SSxHQUVBLFdBQ0EsT0ErRkEsU0FBQUEsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0EwSSxFQUFBQyxFQUFBNUksR0FDQWdDLEVBQUFoQyxFQUFBLFFBQ0EsSUFBQTVYLEVBQUFxWixFQUFBekIsR0FDQTRDLEVBQUFDLEVBQUE3QyxHQUNBaUMsRUFBQUMsRUFBQWxDLEdBQUEsR0FDQThDLEVBQUFDLEVBQUEvQyxHQUNBLE9BQ0F2UixLQUFBeVIsRUFBQUMsS0FBQTRJLHVCQUNBSixjQUNBdmdCLE9BQ0F3YSxhQUNBWCxhQUNBYSxTQUNBblAsTUFBQXFNLEVBQUFoTSxJQTlHQWdWLENBQUFoSixHQUVBLGdCQUNBLE9BME5BLFNBQUFBLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUNBMEksRUFBQUMsRUFBQTVJLEdBQ0FnQyxFQUFBaEMsRUFBQSxhQUNBLElBQUE1WCxFQUFBcVosRUFBQXpCLEdBQ0FpQyxFQUFBQyxFQUFBbEMsR0FBQSxHQUNBOEMsRUFBQUMsRUFBQS9DLEdBQ0EsT0FDQXZSLEtBQUF5UixFQUFBQyxLQUFBOEksMEJBQ0FOLGNBQ0F2Z0IsT0FDQTZaLGFBQ0FhLFNBQ0FuUCxNQUFBcU0sRUFBQWhNLElBdk9Ba1YsQ0FBQWxKLEdBRUEsWUFDQSxPQTZPQSxTQUFBQSxHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFDQTBJLEVBQUFDLEVBQUE1SSxHQUNBZ0MsRUFBQWhDLEVBQUEsU0FDQSxJQUFBNVgsRUFBQXFaLEVBQUF6QixHQUNBaUMsRUFBQUMsRUFBQWxDLEdBQUEsR0FDQW9ELEVBQUFDLEVBQUFyRCxHQUNBLE9BQ0F2UixLQUFBeVIsRUFBQUMsS0FBQWdKLHNCQUNBUixjQUNBdmdCLE9BQ0E2WixhQUNBbUIsUUFDQXpQLE1BQUFxTSxFQUFBaE0sSUExUEFvVixDQUFBcEosR0FFQSxXQUNBLE9BcVJBLFNBQUFBLEdBQ0EsSUFBQWhNLEVBQUFnTSxFQUFBQyxNQUNBMEksRUFBQUMsRUFBQTVJLEdBQ0FnQyxFQUFBaEMsRUFBQSxRQUNBLElBQUE1WCxFQUFBcVosRUFBQXpCLEdBQ0FpQyxFQUFBQyxFQUFBbEMsR0FBQSxHQUNBd0QsRUFBQUMsRUFBQXpELEdBQ0EsT0FDQXZSLEtBQUF5UixFQUFBQyxLQUFBa0oscUJBQ0FWLGNBQ0F2Z0IsT0FDQTZaLGFBQ0F1QixTQUNBN1AsTUFBQXFNLEVBQUFoTSxJQWxTQXNWLENBQUF0SixHQUVBLFlBQ0EsT0FvVUEsU0FBQUEsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0EwSSxFQUFBQyxFQUFBNUksR0FDQWdDLEVBQUFoQyxFQUFBLFNBQ0EsSUFBQTVYLEVBQUFxWixFQUFBekIsR0FDQWlDLEVBQUFDLEVBQUFsQyxHQUFBLEdBQ0E4QyxFQUFBYyxFQUFBNUQsR0FDQSxPQUNBdlIsS0FBQXlSLEVBQUFDLEtBQUFvSiw2QkFDQVosY0FDQXZnQixPQUNBNlosYUFDQWEsU0FDQW5QLE1BQUFxTSxFQUFBaE0sSUFqVkF3VixDQUFBeEosR0FFQSxnQkFDQSxPQXVrQkEsU0FBQUEsR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0EwSSxFQUFBQyxFQUFBNUksR0FDQWdDLEVBQUFoQyxFQUFBLGFBQ0FjLEVBQUFkLEVBQUFNLEVBQUFDLFVBQUEySCxJQUNBLElBQUE5ZixFQUFBcVosRUFBQXpCLEdBQ0F4RSxFQUFBaU8sRUFBQXpKLEdBQ0FnQyxFQUFBaEMsRUFBQSxNQUNBLElBQUF6TCxFQWlCQSxTQUFBeUwsR0FFQXVGLEVBQUF2RixFQUFBTSxFQUFBQyxVQUFBbUosTUFDQSxJQUFBblYsRUFBQSxHQUVBLEdBQ0FBLEVBQUFyRyxLQUFBeWIsRUFBQTNKLFVBQ0d1RixFQUFBdkYsRUFBQU0sRUFBQUMsVUFBQW1KLE9BRUgsT0FBQW5WLEVBMUJBcVYsQ0FBQTVKLEdBQ0EsT0FDQXZSLEtBQUF5UixFQUFBQyxLQUFBMEoscUJBQ0FsQixjQUNBdmdCLE9BQ0ErQyxVQUFBcVEsRUFDQWpILFlBQ0FaLE1BQUFxTSxFQUFBaE0sSUF0bEJBOFYsQ0FBQTlKLEdBSUEsTUFBQXVDLEdBQUF2QyxFQUFBOEIsR0FHQSxTQUFBa0MsRUFBQWhFLEdBQ0EsT0FBQTJCLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBb0gsU0FBQWhHLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBcUgsY0FPQSxTQUFBZ0IsRUFBQTVJLEdBQ0EsR0FBQWdFLEVBQUFoRSxHQUNBLE9BQUE2SCxFQUFBN0gsR0F5QkEsU0FBQXFDLEVBQUFyQyxHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFDQTJFLEVBQUFDLEVBQUE3RSxHQUNBYyxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBOEUsT0FDQSxJQUFBcEUsRUFBQUcsRUFBQXBCLEdBQ0EsT0FDQXZSLEtBQUF5UixFQUFBQyxLQUFBNEosMEJBQ0FuRixZQUNBM0QsT0FDQXROLE1BQUFxTSxFQUFBaE0sSUFzREEsU0FBQTZPLEVBQUE3QyxHQUNBLElBQUFvRCxFQUFBLEdBRUEsR0FBQTRDLEVBQUFoRyxFQUFBLGVBRUF1RixFQUFBdkYsRUFBQU0sRUFBQUMsVUFBQXlKLEtBRUEsR0FDQTVHLEVBQUFsVixLQUFBa1QsRUFBQXBCLFVBQ0t1RixFQUFBdkYsRUFBQU0sRUFBQUMsVUFBQXlKLE1BQ0xoSyxFQUFBcEIsUUFBQXFMLG9DQUFBdEksRUFBQTNCLEVBQUFNLEVBQUFDLFVBQUFtQixPQUdBLE9BQUEwQixFQU9BLFNBQUFMLEVBQUEvQyxHQUVBLE9BQUFBLEVBQUFwQixRQUFBc0wsMkJBQUF2SSxFQUFBM0IsRUFBQU0sRUFBQUMsVUFBQTZCLFVBQUFwQyxFQUFBK0IsWUFBQXRULE9BQUE2UixFQUFBQyxVQUFBK0IsU0FDQXRDLEVBQUF5SCxVQUNBekgsRUFBQXlILFVBQ0EsSUFHQTlGLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBNkIsU0FBQS9CLEdBQUFMLEVBQUFNLEVBQUFDLFVBQUE2QixRQUFBK0gsRUFBQTdKLEVBQUFDLFVBQUErQixTQUFBLEdBUUEsU0FBQTZILEVBQUFuSyxHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFDQTBJLEVBQUFDLEVBQUE1SSxHQUNBNVgsRUFBQXFaLEVBQUF6QixHQUNBeEUsRUFBQWlPLEVBQUF6SixHQUNBYyxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBOEUsT0FDQSxJQUFBcEUsRUFBQUMsRUFBQWxCLEdBQ0FpQyxFQUFBQyxFQUFBbEMsR0FBQSxHQUNBLE9BQ0F2UixLQUFBeVIsRUFBQUMsS0FBQWlLLGlCQUNBekIsY0FDQXZnQixPQUNBK0MsVUFBQXFRLEVBQ0F5RixPQUNBZ0IsYUFDQXRPLE1BQUFxTSxFQUFBaE0sSUFRQSxTQUFBeVYsRUFBQXpKLEdBQ0EsT0FBQTJCLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBd0UsU0FJQTFFLEdBQUFMLEVBQUFNLEVBQUFDLFVBQUF3RSxRQUFBc0YsRUFBQS9KLEVBQUFDLFVBQUEwRSxTQUhBLEdBV0EsU0FBQW9GLEVBQUFySyxHQUNBLElBQUFoTSxFQUFBZ00sRUFBQUMsTUFDQTBJLEVBQUFDLEVBQUE1SSxHQUNBNVgsRUFBQXFaLEVBQUF6QixHQUNBYyxFQUFBZCxFQUFBTSxFQUFBQyxVQUFBOEUsT0FDQSxJQUNBQyxFQURBckUsRUFBQUMsRUFBQWxCLEdBR0F1RixFQUFBdkYsRUFBQU0sRUFBQUMsVUFBQWlGLFVBQ0FGLEVBQUFuRSxFQUFBbkIsSUFHQSxJQUFBaUMsRUFBQUMsRUFBQWxDLEdBQUEsR0FDQSxPQUNBdlIsS0FBQXlSLEVBQUFDLEtBQUFtSyx1QkFDQTNCLGNBQ0F2Z0IsT0FDQTZZLE9BQ0FxRSxlQUNBckQsYUFDQXRPLE1BQUFxTSxFQUFBaE0sSUFzREEsU0FBQXFQLEVBQUFyRCxHQUNBLElBQUFvRCxFQUFBLEdBRUEsR0FBQW1DLEVBQUF2RixFQUFBTSxFQUFBQyxVQUFBaUYsUUFBQSxDQUVBRCxFQUFBdkYsRUFBQU0sRUFBQUMsVUFBQW1KLE1BRUEsR0FDQXRHLEVBQUFsVixLQUFBa1QsRUFBQXBCLFVBQ0t1RixFQUFBdkYsRUFBQU0sRUFBQUMsVUFBQW1KLE9BR0wsT0FBQXRHLEVBNkJBLFNBQUFLLEVBQUF6RCxHQUNBLE9BQUEyQixFQUFBM0IsRUFBQU0sRUFBQUMsVUFBQTZCLFNBQUEvQixHQUFBTCxFQUFBTSxFQUFBQyxVQUFBNkIsUUFBQW1JLEVBQUFqSyxFQUFBQyxVQUFBK0IsU0FBQSxHQVNBLFNBQUFpSSxFQUFBdkssR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0EwSSxFQUFBQyxFQUFBNUksR0FDQTVYLEVBQUFxWixFQUFBekIsR0FDQWlDLEVBQUFDLEVBQUFsQyxHQUFBLEdBQ0EsT0FDQXZSLEtBQUF5UixFQUFBQyxLQUFBcUssc0JBQ0E3QixjQUNBdmdCLE9BQ0E2WixhQUNBdE8sTUFBQXFNLEVBQUFoTSxJQThCQSxTQUFBNFAsRUFBQTVELEdBQ0EsT0FBQTJCLEVBQUEzQixFQUFBTSxFQUFBQyxVQUFBNkIsU0FBQS9CLEdBQUFMLEVBQUFNLEVBQUFDLFVBQUE2QixRQUFBaUksRUFBQS9KLEVBQUFDLFVBQUErQixTQUFBLEdBaVRBLFNBQUFxSCxFQUFBM0osR0FDQSxJQUFBaE0sRUFBQWdNLEVBQUFDLE1BQ0E3WCxFQUFBcVosRUFBQXpCLEdBRUEsUUFBQXpULElBQUFpVixFQUFBaUosa0JBQUFyaUIsRUFBQVUsT0FDQSxPQUFBVixFQUdBLE1BQUFtYSxHQUFBdkMsRUFBQWhNLEdBU0EsU0FBQUwsRUFBQXFNLEVBQUEwSyxHQUNBLElBQUExSyxFQUFBcEIsUUFBQStMLFdBQ0EsV0FBQUMsRUFBQUYsRUFBQTFLLEVBQUE2SyxVQUFBN0ssRUFBQTNNLFFBSUEsU0FBQXVYLEVBQUFGLEVBQUFJLEVBQUF6WCxHQUNBMUksS0FBQXFKLE1BQUEwVyxFQUFBMVcsTUFDQXJKLEtBQUFvZ0IsSUFBQUQsRUFBQUMsSUFDQXBnQixLQUFBK2YsYUFDQS9mLEtBQUFtZ0IsV0FDQW5nQixLQUFBMEksU0FjQSxTQUFBc08sRUFBQTNCLEVBQUF2UixHQUNBLE9BQUF1UixFQUFBQyxNQUFBeFIsU0FRQSxTQUFBcVMsRUFBQWQsRUFBQXZSLEdBQ0EsSUFBQXdSLEVBQUFELEVBQUFDLE1BRUEsR0FBQUEsRUFBQXhSLFNBRUEsT0FEQXVSLEVBQUF5SCxVQUNBeEgsRUFHQSxRQUFBc0IsRUFBQTFLLGFBQUFtSixFQUFBM00sT0FBQTRNLEVBQUFqTSxNQUFBLFlBQUFrQixPQUFBekcsRUFBQSxZQUFBeUcsUUFBQSxFQUFBb0wsRUFBQTBLLGNBQUEvSyxLQVFBLFNBQUFzRixFQUFBdkYsRUFBQXZSLEdBQ0EsSUFBQXdSLEVBQUFELEVBQUFDLE1BRUEsR0FBQUEsRUFBQXhSLFNBRUEsT0FEQXVSLEVBQUF5SCxVQUNBeEgsRUFXQSxTQUFBK0IsRUFBQWhDLEVBQUFsWCxHQUNBLElBQUFtWCxFQUFBRCxFQUFBQyxNQUVBLEdBQUFBLEVBQUF4UixPQUFBNlIsRUFBQUMsVUFBQW1CLE1BQUF6QixFQUFBblgsVUFFQSxPQURBa1gsRUFBQXlILFVBQ0F4SCxFQUdBLFFBQUFzQixFQUFBMUssYUFBQW1KLEVBQUEzTSxPQUFBNE0sRUFBQWpNLE1BQUEsYUFBQWtCLE9BQUFwTSxFQUFBLGFBQUFvTSxRQUFBLEVBQUFvTCxFQUFBMEssY0FBQS9LLEtBUUEsU0FBQStGLEVBQUFoRyxFQUFBbFgsR0FDQSxJQUFBbVgsRUFBQUQsRUFBQUMsTUFFQSxHQUFBQSxFQUFBeFIsT0FBQTZSLEVBQUFDLFVBQUFtQixNQUFBekIsRUFBQW5YLFVBRUEsT0FEQWtYLEVBQUF5SCxVQUNBeEgsRUFXQSxTQUFBc0MsR0FBQXZDLEVBQUFpTCxHQUNBLElBQUFoTCxFQUFBZ0wsR0FBQWpMLEVBQUFDLE1BQ0EsU0FBQXNCLEVBQUExSyxhQUFBbUosRUFBQTNNLE9BQUE0TSxFQUFBak0sTUFBQSxjQUFBa0IsUUFBQSxFQUFBb0wsRUFBQTBLLGNBQUEvSyxLQVVBLFNBQUFnSCxHQUFBakgsRUFBQWtMLEVBQUFDLEVBQUFDLEdBQ0F0SyxFQUFBZCxFQUFBa0wsR0FHQSxJQUZBLElBQUE5WCxFQUFBLElBRUFtUyxFQUFBdkYsRUFBQW9MLElBQ0FoWSxFQUFBbEYsS0FBQWlkLEVBQUFuTCxJQUdBLE9BQUE1TSxFQVVBLFNBQUFpTixHQUFBTCxFQUFBa0wsRUFBQUMsRUFBQUMsR0FDQXRLLEVBQUFkLEVBQUFrTCxHQUdBLElBRkEsSUFBQTlYLEVBQUEsQ0FBQStYLEVBQUFuTCxLQUVBdUYsRUFBQXZGLEVBQUFvTCxJQUNBaFksRUFBQWxGLEtBQUFpZCxFQUFBbkwsSUFHQSxPQUFBNU0sR0F6SEEsRUFBQWtPLEVBQUFoVCxTQUFBc2MsRUFBQSxXQUNBLE9BQ0E1VyxNQUFBckosS0FBQXFKLE1BQ0ErVyxJQUFBcGdCLEtBQUFvZ0IscUNDOTNDQXhpQixPQUFBQyxlQUFBYixFQUFBLGNBQ0FtQixPQUFBLElBRUFuQixFQUFBb1ksWUFBQSxFQUVBLElBQUFzTCxFQUFBaEssRUFBd0M1WixFQUFRLElBRWhENmpCLEVBQUFqSyxFQUFnRDVaLEVBQVEsS0FFeEQsU0FBQTRaLEVBQUFoWCxHQUFzQyxPQUFBQSxLQUFBcEIsV0FBQW9CLEVBQUEsQ0FBdUNpRSxRQUFBakUsR0FtQjdFLElBQUEwVixFQUFBLFNBQUF6SCxFQUFBbFEsRUFBQWdRLEdBQ0F6TixLQUFBMk4sT0FDQTNOLEtBQUF2QyxRQUFBLGtCQUNBdUMsS0FBQXlOLGtCQUFBLENBQ0FLLEtBQUEsRUFDQUosT0FBQSxHQUVBMU4sS0FBQXlOLGVBQUFLLEtBQUEsTUFBQTRTLEVBQUEvYyxTQUFBLDhEQUNBM0QsS0FBQXlOLGVBQUFDLE9BQUEsTUFBQWdULEVBQUEvYyxTQUFBLGlFQUlBM0csRUFBQW9ZLFVBQ0EsRUFBQXVMLEVBQUFoZCxTQUFBeVIsaUNDekNBeFgsT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQTJHLFFBd0JBLFNBQUFtSSxHQUNBLG1CQUFBN04sZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWlPLEVBQUFoTixVQUFBYixPQUFBQyxZQUFBLENBQ0FILElBQUEsV0FDQSxPQUFBaUMsS0FBQXFCLFlBQUE1RCx1Q0MvQkFHLE9BQUFDLGVBQUFiLEVBQUEsY0FDQW1CLE9BQUEsSUFFQW5CLEVBQUFrUCxZQWlCQSxTQUFBeEQsRUFBQXlHLEVBQUE2TyxHQUNBLFdBQUFoUyxFQUFBNUQsYUFBQSxpQkFBQW1DLE9BQUF5VCxRQUFBcGMsRUFBQThHLEVBQUEsQ0FBQXlHLEtBaEJBLElBQUFuRCxFQUFvQmxQLEVBQVEsaUNDTDVCYyxPQUFBQyxlQUFBYixFQUFBLGNBQ0FtQixPQUFBLElBRUFuQixFQUFBb1AsYUFrQkEsU0FBQXhELEVBQUFILEVBQUFuRyxHQUdBLEdBQUFzRyxHQUFBekgsTUFBQWEsUUFBQTRHLEVBQUF0RyxNQUNBLE9BQUFzRyxFQUdBLFdBQUFvRCxFQUFBNUQsYUFBQVEsS0FBQTlJLFFBQUE4SSxLQUFBSCxTQUFBRyxLQUFBRixPQUFBRSxLQUFBRCxVQUFBckcsRUFBQXNHLElBdkJBLElBQUFvRCxFQUFvQmxQLEVBQVEsaUNDTDVCYyxPQUFBQyxlQUFBYixFQUFBLGNBQ0FtQixPQUFBLElBRUFuQixFQUFBc1AsWUFtQkEsU0FBQTVMLEdBQ0FBLElBQUEsRUFBQWdnQixFQUFBL2MsU0FBQSx1Q0FDQSxJQUFBN0QsRUFBQVksRUFBQVosU0FBQSw2QkFDQThKLEVBQUFsSixFQUFBa0osVUFDQXRILEVBQUE1QixFQUFBNEIsS0FDQXVHLEVBQUFuSSxFQUFBbUksV0FDQSxPQUFBQSxFQUFBLENBQ0EvSSxVQUNBOEosWUFDQXRILE9BQ0F1RyxjQUNHLENBQ0gvSSxVQUNBOEosWUFDQXRILFNBL0JBLElBRUE1QyxFQUZBZ2hCLEdBRUFoaEIsRUFGd0M1QyxFQUFRLEtBRVY0QyxFQUFBcEIsV0FBQW9CLEVBQUEsQ0FBdUNpRSxRQUFBakUsaUNDUDdFOUIsT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQWlaLFlBOEJBLFNBQUF2TixFQUFBdUwsR0FDQSxJQUFBMk0sRUFBQSxJQUFBQyxFQUFBakwsRUFBQUMsSUFBQSxjQVdBLE1BVkEsQ0FDQW5OLFNBQ0F1TCxVQUNBaU0sVUFBQVUsRUFDQXRMLE1BQUFzTCxFQUNBOVMsS0FBQSxFQUNBZ1QsVUFBQSxFQUNBaEUsUUFBQWlFLEVBQ0EzSixjQXZDQXBhLEVBQUFna0Isa0JBc0dBLFNBQUExTCxHQUNBLElBQUF4UixFQUFBd1IsRUFBQXhSLEtBQ0EsT0FBQUEsSUFBQThSLEVBQUErSCxNQUFBN1osSUFBQThSLEVBQUFrRixRQUFBaFgsSUFBQThSLEVBQUF5SixLQUFBdmIsSUFBQThSLEVBQUF3RSxTQUFBdFcsSUFBQThSLEVBQUEwRSxTQUFBeFcsSUFBQThSLEVBQUF1RixRQUFBclgsSUFBQThSLEVBQUE4RSxPQUFBNVcsSUFBQThSLEVBQUFpRixRQUFBL1csSUFBQThSLEVBQUEySCxJQUFBelosSUFBQThSLEVBQUF1RyxXQUFBclksSUFBQThSLEVBQUEyRyxXQUFBelksSUFBQThSLEVBQUE2QixTQUFBM1QsSUFBQThSLEVBQUFtSixNQUFBamIsSUFBQThSLEVBQUErQixTQXZHQTNhLEVBQUFxakIsYUE4R0EsU0FBQS9LLEdBQ0EsSUFBQW5YLEVBQUFtWCxFQUFBblgsTUFDQSxPQUFBQSxFQUFBLEdBQUFvTSxPQUFBK0ssRUFBQXhSLEtBQUEsTUFBQXlHLE9BQUFwTSxFQUFBLEtBQUFtWCxFQUFBeFIsTUEvR0E5RyxFQUFBNFksZUFBQSxFQUVBLElBTUFsVyxFQU5BaVgsR0FNQWpYLEVBTjJDNUMsRUFBUSxLQU1iNEMsRUFBQXBCLFdBQUFvQixFQUFBLENBQXVDaUUsUUFBQWpFLEdBSjdFa1gsRUFBYTlaLEVBQVEsR0FFckJta0IsRUFBbUJua0IsRUFBUSxJQW9DM0IsU0FBQWlrQixJQUdBLE9BRkEvZ0IsS0FBQWtnQixVQUFBbGdCLEtBQUFzVixNQUNBdFYsS0FBQXNWLE1BQUF0VixLQUFBb1gsWUFJQSxTQUFBQSxJQUNBLElBQUE5QixFQUFBdFYsS0FBQXNWLE1BRUEsR0FBQUEsRUFBQXhSLE9BQUE4UixFQUFBRyxJQUNBLEdBRUFULElBQUF6SSxPQUFBeUksRUFBQXpJLEtBQUFxVSxFQUFBbGhCLEtBQUFzVixVQUNLQSxFQUFBeFIsT0FBQThSLEVBQUF1TCxTQUdMLE9BQUE3TCxFQVdBLElBQUFNLEVBQUFoWSxPQUFBd2pCLE9BQUEsQ0FDQXZMLElBQUEsUUFDQUUsSUFBQSxRQUNBNEgsS0FBQSxJQUNBN0MsT0FBQSxJQUNBdUUsSUFBQSxJQUNBakYsUUFBQSxJQUNBRSxRQUFBLElBQ0FhLE9BQUEsTUFDQVQsTUFBQSxJQUNBRyxPQUFBLElBQ0EwQyxHQUFBLElBQ0FwQixVQUFBLElBQ0FJLFVBQUEsSUFDQTlFLFFBQUEsSUFDQXNILEtBQUEsSUFDQXBILFFBQUEsSUFDQVosS0FBQSxPQUNBOEYsSUFBQSxNQUNBRSxNQUFBLFFBQ0FDLE9BQUEsU0FDQUMsYUFBQSxjQUNBa0UsUUFBQSxZQTJCQSxTQUFBTixFQUFBL2MsRUFBQXVGLEVBQUErVyxFQUFBdFMsRUFBQUosRUFBQXBLLEVBQUFuRixHQUNBNkIsS0FBQThELE9BQ0E5RCxLQUFBcUosUUFDQXJKLEtBQUFvZ0IsTUFDQXBnQixLQUFBOE4sT0FDQTlOLEtBQUEwTixTQUNBMU4sS0FBQTdCLFFBQ0E2QixLQUFBc0QsT0FDQXRELEtBQUE2TSxLQUFBLEtBYUEsU0FBQXdVLEVBQUFDLEdBQ0EsT0FDQUMsTUFBQUQsR0FBQTFMLEVBQUFHLElBQ0F1TCxFQUFBLElBQUFqWCxLQUFBQyxVQUFBSyxPQUFBNlcsYUFBQUYsSUFDQSxPQUFBL1csUUFBQSxLQUFBK1csRUFBQW5aLFNBQUEsSUFBQXNaLGVBQUE3ZSxPQUFBLFFBWUEsU0FBQXNlLEVBQUE3TCxFQUFBL1IsR0FDQSxJQUFBb0YsRUFBQTJNLEVBQUEzTSxPQUNBaUYsRUFBQWpGLEVBQUFpRixLQUNBK1QsRUFBQS9ULEVBQUFwTSxPQUNBK0gsRUFtTEEsU0FBQXFFLEVBQUFnVSxFQUFBdE0sR0FDQSxJQUFBcU0sRUFBQS9ULEVBQUFwTSxPQUNBNE4sRUFBQXdTLEVBRUEsS0FBQXhTLEVBQUF1UyxHQUFBLENBQ0EsSUFBQUosRUFBQTNULEVBQUFpVSxXQUFBelMsR0FFQSxPQUFBbVMsR0FBQSxLQUFBQSxHQUFBLEtBQUFBLEdBQUEsUUFBQUEsSUFDQW5TLE9BQ0ssUUFBQW1TLElBRUxuUyxJQUNBa0csRUFBQXZILEtBQ0F1SCxFQUFBeUwsVUFBQTNSLE1BQ0ssU0FBQW1TLEVBV0wsTUFUQSxLQUFBM1QsRUFBQWlVLFdBQUF6UyxFQUFBLEdBQ0FBLEdBQUEsSUFFQUEsSUFHQWtHLEVBQUF2SCxLQUNBdUgsRUFBQXlMLFVBQUEzUixHQU1BLE9BQUFBLEVBaE5BMFMsQ0FBQWxVLEVBQUFySyxFQUFBOGMsSUFBQS9LLEdBQ0F2SCxFQUFBdUgsRUFBQXZILEtBQ0FnVSxFQUFBLEVBQUF4WSxFQUFBK0wsRUFBQXlMLFVBRUEsR0FBQXhYLEdBQUFvWSxFQUNBLFdBQUFiLEVBQUFqTCxFQUFBRyxJQUFBMkwsSUFBQTVULEVBQUFnVSxFQUFBeGUsR0FHQSxJQUFBZ2UsRUFBQTNULEVBQUFpVSxXQUFBdFksR0FFQSxPQUFBZ1ksR0FFQSxRQUNBLFdBQUFULEVBQUFqTCxFQUFBK0gsS0FBQXJVLElBQUEsRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxRQUNBLE9Bd01BLFNBQUFvRixFQUFBVyxFQUFBeUUsRUFBQWdVLEVBQUF4ZSxHQUNBLElBQ0FnZSxFQURBM1QsRUFBQWpGLEVBQUFpRixLQUVBd0IsRUFBQTlGLEVBRUEsR0FDQWlZLEVBQUEzVCxFQUFBaVUsYUFBQXpTLFVBQ0dvUyxNQUFBRCxLQUNIQSxFQUFBLFFBQUFBLElBRUEsV0FBQVQsRUFBQWpMLEVBQUF1TCxRQUFBOVgsRUFBQThGLEVBQUFyQixFQUFBZ1UsRUFBQXhlLEVBQUFxSyxFQUFBL0ssTUFBQXlHLEVBQUEsRUFBQThGLElBbE5BNFMsQ0FBQXJaLEVBQUFZLEVBQUF3RSxFQUFBZ1UsRUFBQXhlLEdBR0EsUUFDQSxXQUFBdWQsRUFBQWpMLEVBQUFrRixPQUFBeFIsSUFBQSxFQUFBd0UsRUFBQWdVLEVBQUF4ZSxHQUdBLFFBQ0EsV0FBQXVkLEVBQUFqTCxFQUFBeUosSUFBQS9WLElBQUEsRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxRQUNBLFdBQUF1ZCxFQUFBakwsRUFBQXdFLFFBQUE5USxJQUFBLEVBQUF3RSxFQUFBZ1UsRUFBQXhlLEdBR0EsUUFDQSxXQUFBdWQsRUFBQWpMLEVBQUEwRSxRQUFBaFIsSUFBQSxFQUFBd0UsRUFBQWdVLEVBQUF4ZSxHQUdBLFFBQ0EsUUFBQXFLLEVBQUFpVSxXQUFBdFksRUFBQSxTQUFBcUUsRUFBQWlVLFdBQUF0WSxFQUFBLEdBQ0EsV0FBQXVYLEVBQUFqTCxFQUFBdUYsT0FBQTdSLElBQUEsRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxNQUdBLFFBQ0EsV0FBQXVkLEVBQUFqTCxFQUFBOEUsTUFBQXBSLElBQUEsRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxRQUNBLFdBQUF1ZCxFQUFBakwsRUFBQWlGLE9BQUF2UixJQUFBLEVBQUF3RSxFQUFBZ1UsRUFBQXhlLEdBR0EsUUFDQSxXQUFBdWQsRUFBQWpMLEVBQUEySCxHQUFBalUsSUFBQSxFQUFBd0UsRUFBQWdVLEVBQUF4ZSxHQUdBLFFBQ0EsV0FBQXVkLEVBQUFqTCxFQUFBdUcsVUFBQTdTLElBQUEsRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxRQUNBLFdBQUF1ZCxFQUFBakwsRUFBQTJHLFVBQUFqVCxJQUFBLEVBQUF3RSxFQUFBZ1UsRUFBQXhlLEdBR0EsU0FDQSxXQUFBdWQsRUFBQWpMLEVBQUE2QixRQUFBbk8sSUFBQSxFQUFBd0UsRUFBQWdVLEVBQUF4ZSxHQUdBLFNBQ0EsV0FBQXVkLEVBQUFqTCxFQUFBbUosS0FBQXpWLElBQUEsRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxTQUNBLFdBQUF1ZCxFQUFBakwsRUFBQStCLFFBQUFyTyxJQUFBLEVBQUF3RSxFQUFBZ1UsRUFBQXhlLEdBR0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLE9Bd1dBLFNBQUFvRixFQUFBVyxFQUFBeUUsRUFBQWdVLEVBQUF4ZSxHQUNBLElBQUFxSyxFQUFBakYsRUFBQWlGLEtBQ0ErVCxFQUFBL1QsRUFBQXBNLE9BQ0E0TixFQUFBOUYsRUFBQSxFQUNBaVksRUFBQSxFQUVBLEtBQUFuUyxJQUFBdVMsSUFBQUgsTUFBQUQsRUFBQTNULEVBQUFpVSxXQUFBelMsTUFBQSxLQUFBbVMsR0FDQUEsR0FBQSxJQUFBQSxHQUFBLElBQ0FBLEdBQUEsSUFBQUEsR0FBQSxJQUNBQSxHQUFBLElBQUFBLEdBQUEsUUFFQW5TLEVBR0EsV0FBQTBSLEVBQUFqTCxFQUFBbUIsS0FBQTFOLEVBQUE4RixFQUFBckIsRUFBQWdVLEVBQUF4ZSxFQUFBcUssRUFBQS9LLE1BQUF5RyxFQUFBOEYsSUF0WEE2UyxDQUFBdFosRUFBQVksRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsT0ErRkEsU0FBQW9GLEVBQUFXLEVBQUE0WSxFQUFBblUsRUFBQWdVLEVBQUF4ZSxHQUNBLElBQUFxSyxFQUFBakYsRUFBQWlGLEtBQ0EyVCxFQUFBVyxFQUNBOVMsRUFBQTlGLEVBQ0E2WSxHQUFBLEVBRUEsS0FBQVosSUFFQUEsRUFBQTNULEVBQUFpVSxhQUFBelMsSUFHQSxRQUFBbVMsR0FJQSxJQUZBQSxFQUFBM1QsRUFBQWlVLGFBQUF6UyxLQUVBLElBQUFtUyxHQUFBLEdBQ0EsUUFBQTFLLEVBQUExSyxhQUFBeEQsRUFBQXlHLEVBQUEsNkNBQUE1RSxPQUFBOFcsRUFBQUMsR0FBQSxXQUdBblMsRUFBQWdULEVBQUF6WixFQUFBeUcsRUFBQW1TLEdBQ0FBLEVBQUEzVCxFQUFBaVUsV0FBQXpTLEdBR0EsS0FBQW1TLElBRUFZLEdBQUEsRUFDQVosRUFBQTNULEVBQUFpVSxhQUFBelMsR0FDQUEsRUFBQWdULEVBQUF6WixFQUFBeUcsRUFBQW1TLEdBQ0FBLEVBQUEzVCxFQUFBaVUsV0FBQXpTLElBR0EsS0FBQW1TLEdBQUEsTUFBQUEsSUFFQVksR0FBQSxFQUdBLE1BRkFaLEVBQUEzVCxFQUFBaVUsYUFBQXpTLEtBRUEsS0FBQW1TLElBRUFBLEVBQUEzVCxFQUFBaVUsYUFBQXpTLElBR0FBLEVBQUFnVCxFQUFBelosRUFBQXlHLEVBQUFtUyxJQUdBLFdBQUFULEVBQUFxQixFQUFBdE0sRUFBQW1ILE1BQUFuSCxFQUFBaUgsSUFBQXhULEVBQUE4RixFQUFBckIsRUFBQWdVLEVBQUF4ZSxFQUFBcUssRUFBQS9LLE1BQUF5RyxFQUFBOEYsSUEzSUFpVCxDQUFBMVosRUFBQVksRUFBQWdZLEVBQUF4VCxFQUFBZ1UsRUFBQXhlLEdBR0EsUUFDQSxZQUFBcUssRUFBQWlVLFdBQUF0WSxFQUFBLFNBQUFxRSxFQUFBaVUsV0FBQXRZLEVBQUEsR0FrUUEsU0FBQVosRUFBQVcsRUFBQXlFLEVBQUFnVSxFQUFBeGUsRUFBQStSLEdBQ0EsSUFBQTFILEVBQUFqRixFQUFBaUYsS0FDQXdCLEVBQUE5RixFQUFBLEVBQ0FnWixFQUFBbFQsRUFDQW1TLEVBQUEsRUFDQWdCLEVBQUEsR0FFQSxLQUFBblQsRUFBQXhCLEVBQUFwTSxTQUFBZ2dCLE1BQUFELEVBQUEzVCxFQUFBaVUsV0FBQXpTLEtBQUEsQ0FFQSxRQUFBbVMsR0FBQSxLQUFBM1QsRUFBQWlVLFdBQUF6UyxFQUFBLFNBQUF4QixFQUFBaVUsV0FBQXpTLEVBQUEsR0FFQSxPQURBbVQsR0FBQTNVLEVBQUEvSyxNQUFBeWYsRUFBQWxULEdBQ0EsSUFBQTBSLEVBQUFqTCxFQUFBcUgsYUFBQTVULEVBQUE4RixFQUFBLEVBQUFyQixFQUFBZ1UsRUFBQXhlLEdBQUEsRUFBQTJkLEVBQUFzQix3QkFBQUQsSUFJQSxHQUFBaEIsRUFBQSxRQUFBQSxHQUFBLEtBQUFBLEdBQUEsS0FBQUEsRUFDQSxRQUFBMUssRUFBQTFLLGFBQUF4RCxFQUFBeUcsRUFBQSxvQ0FBQTVFLE9BQUE4VyxFQUFBQyxHQUFBLE1BR0EsS0FBQUEsS0FFQW5TLElBQ0FrRyxFQUFBdkgsS0FDQXVILEVBQUF5TCxVQUFBM1IsR0FDSyxLQUFBbVMsR0FFTCxLQUFBM1QsRUFBQWlVLFdBQUF6UyxFQUFBLEdBQ0FBLEdBQUEsSUFFQUEsSUFHQWtHLEVBQUF2SCxLQUNBdUgsRUFBQXlMLFVBQUEzUixHQUVBLEtBQUFtUyxHQUFBLEtBQUEzVCxFQUFBaVUsV0FBQXpTLEVBQUEsU0FBQXhCLEVBQUFpVSxXQUFBelMsRUFBQSxTQUFBeEIsRUFBQWlVLFdBQUF6UyxFQUFBLElBQ0FtVCxHQUFBM1UsRUFBQS9LLE1BQUF5ZixFQUFBbFQsR0FBQSxNQUVBa1QsRUFEQWxULEdBQUEsS0FHQUEsRUFJQSxRQUFBeUgsRUFBQTFLLGFBQUF4RCxFQUFBeUcsRUFBQSx3QkE3U0FxVCxDQUFBOVosRUFBQVksRUFBQXdFLEVBQUFnVSxFQUFBeGUsRUFBQStSLEdBcUtBLFNBQUEzTSxFQUFBVyxFQUFBeUUsRUFBQWdVLEVBQUF4ZSxHQUNBLElBQUFxSyxFQUFBakYsRUFBQWlGLEtBQ0F3QixFQUFBOUYsRUFBQSxFQUNBZ1osRUFBQWxULEVBQ0FtUyxFQUFBLEVBQ0FuakIsRUFBQSxHQUVBLEtBQUFnUixFQUFBeEIsRUFBQXBNLFNBQUFnZ0IsTUFBQUQsRUFBQTNULEVBQUFpVSxXQUFBelMsS0FDQSxLQUFBbVMsR0FBQSxLQUFBQSxHQUFBLENBRUEsUUFBQUEsRUFFQSxPQURBbmpCLEdBQUF3UCxFQUFBL0ssTUFBQXlmLEVBQUFsVCxHQUNBLElBQUEwUixFQUFBakwsRUFBQW9ILE9BQUEzVCxFQUFBOEYsRUFBQSxFQUFBckIsRUFBQWdVLEVBQUF4ZSxFQUFBbkYsR0FJQSxHQUFBbWpCLEVBQUEsUUFBQUEsRUFDQSxRQUFBMUssRUFBQTFLLGFBQUF4RCxFQUFBeUcsRUFBQSxvQ0FBQTVFLE9BQUE4VyxFQUFBQyxHQUFBLE1BS0EsS0FGQW5TLEVBRUEsS0FBQW1TLEVBQUEsQ0FLQSxPQUhBbmpCLEdBQUF3UCxFQUFBL0ssTUFBQXlmLEVBQUFsVCxFQUFBLEdBQ0FtUyxFQUFBM1QsRUFBQWlVLFdBQUF6UyxJQUdBLFFBQ0FoUixHQUFBLElBQ0EsTUFFQSxRQUNBQSxHQUFBLElBQ0EsTUFFQSxRQUNBQSxHQUFBLEtBQ0EsTUFFQSxRQUNBQSxHQUFBLEtBQ0EsTUFFQSxTQUNBQSxHQUFBLEtBQ0EsTUFFQSxTQUNBQSxHQUFBLEtBQ0EsTUFFQSxTQUNBQSxHQUFBLEtBQ0EsTUFFQSxTQUNBQSxHQUFBLEtBQ0EsTUFFQSxTQUdBLElBQUFza0IsR0F1RkFoUSxFQXZGQTlFLEVBQUFpVSxXQUFBelMsRUFBQSxHQXVGQWpPLEVBdkZBeU0sRUFBQWlVLFdBQUF6UyxFQUFBLEdBdUZBNVIsRUF2RkFvUSxFQUFBaVUsV0FBQXpTLEVBQUEsR0F1RkEzUixFQXZGQW1RLEVBQUFpVSxXQUFBelMsRUFBQSxHQXdGQXVULEVBQUFqUSxJQUFBLEdBQUFpUSxFQUFBeGhCLElBQUEsRUFBQXdoQixFQUFBbmxCLElBQUEsRUFBQW1sQixFQUFBbGxCLElBdEZBLEdBQUFpbEIsRUFBQSxFQUNBLFFBQUE3TCxFQUFBMUssYUFBQXhELEVBQUF5RyxFQUFBLDRDQUFBNUUsT0FBQW9ELEVBQUEvSyxNQUFBdU0sRUFBQSxFQUFBQSxFQUFBLFNBR0FoUixHQUFBd00sT0FBQTZXLGFBQUFpQixHQUNBdFQsR0FBQSxFQUNBLE1BR0EsUUFDQSxRQUFBeUgsRUFBQTFLLGFBQUF4RCxFQUFBeUcsRUFBQSx3Q0FBQTVFLE9BQUFJLE9BQUE2VyxhQUFBRixHQUFBLE1BSUFlLElBREFsVCxHQXdFQSxJQUFBc0QsRUFBQXZSLEVBQUEzRCxFQUFBQyxFQW5FQSxRQUFBb1osRUFBQTFLLGFBQUF4RCxFQUFBeUcsRUFBQSx3QkFyUEF3VCxDQUFBamEsRUFBQVksRUFBQXdFLEVBQUFnVSxFQUFBeGUsR0FHQSxRQUFBc1QsRUFBQTFLLGFBQUF4RCxFQUFBWSxFQU9BLFNBQUFnWSxHQUNBLEdBQUFBLEVBQUEsUUFBQUEsR0FBQSxLQUFBQSxHQUFBLEtBQUFBLEVBQ0EsOENBQUEvVyxPQUFBOFcsRUFBQUMsR0FBQSxLQUdBLFFBQUFBLEVBRUEsd0ZBR0EsK0NBQUEvVyxPQUFBOFcsRUFBQUMsR0FBQSxLQWpCQXNCLENBQUF0QixJQXVJQSxTQUFBYSxFQUFBelosRUFBQVcsRUFBQTRZLEdBQ0EsSUFBQXRVLEVBQUFqRixFQUFBaUYsS0FDQXdCLEVBQUE5RixFQUNBaVksRUFBQVcsRUFFQSxHQUFBWCxHQUFBLElBQUFBLEdBQUEsSUFFQSxHQUNBQSxFQUFBM1QsRUFBQWlVLGFBQUF6UyxTQUNLbVMsR0FBQSxJQUFBQSxHQUFBLElBR0wsT0FBQW5TLEVBR0EsUUFBQXlILEVBQUExSyxhQUFBeEQsRUFBQXlHLEVBQUEsMkNBQUE1RSxPQUFBOFcsRUFBQUMsR0FBQSxNQTRLQSxTQUFBb0IsRUFBQWpRLEdBQ0EsT0FBQUEsR0FBQSxJQUFBQSxHQUFBLEdBQUFBLEVBQUEsR0FDQUEsR0FBQSxJQUFBQSxHQUFBLEdBQUFBLEVBQUEsR0FDQUEsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBQUEsSUFDQSxFQTloQkF6VixFQUFBNFksYUFpQ0EsRUFBQWUsRUFBQWhULFNBQUFrZCxFQUFBLFdBQ0EsT0FDQS9jLEtBQUE5RCxLQUFBOEQsS0FDQTNGLE1BQUE2QixLQUFBN0IsTUFDQTJQLEtBQUE5TixLQUFBOE4sS0FDQUosT0FBQTFOLEtBQUEwTix3Q0M3RkEsU0FBQW1WLEVBQUExVSxHQUdBLElBRkEsSUFBQTJVLEVBQUEsS0FFQTVsQixFQUFBLEVBQWlCQSxFQUFBaVIsRUFBQTVNLE9BQWtCckUsSUFBQSxDQUNuQyxJQUFBNFEsRUFBQUssRUFBQWpSLEdBQ0E2bEIsRUFBQUMsRUFBQWxWLEdBRUEsR0FBQWlWLElBQUFqVixFQUFBdk0sVUFJQSxPQUFBdWhCLEdBQUFDLEVBQUFELElBR0EsS0FGQUEsRUFBQUMsSUFHQSxNQUtBLGNBQUFELEVBQUEsRUFBQUEsRUFHQSxTQUFBRSxFQUFBL1QsR0FHQSxJQUZBLElBQUEvUixFQUFBLEVBRUFBLEVBQUErUixFQUFBMU4sU0FBQSxNQUFBME4sRUFBQS9SLElBQUEsT0FBQStSLEVBQUEvUixLQUNBQSxJQUdBLE9BQUFBLEVBR0EsU0FBQStsQixFQUFBaFUsR0FDQSxPQUFBK1QsRUFBQS9ULE9BQUExTixPQWxGQTNELE9BQUFDLGVBQUFiLEVBQUEsY0FDQW1CLE9BQUEsSUFFQW5CLEVBQUF1bEIsdUJBbUJBLFNBQUFXLEdBRUEsSUFBQS9VLEVBQUErVSxFQUFBOVUsTUFBQSxnQkFFQTBVLEVBQUFELEVBQUExVSxHQUVBLE9BQUEyVSxFQUNBLFFBQUE1bEIsRUFBQSxFQUFtQkEsRUFBQWlSLEVBQUE1TSxPQUFrQnJFLElBQ3JDaVIsRUFBQWpSLEdBQUFpUixFQUFBalIsR0FBQTBGLE1BQUFrZ0IsR0FLQSxLQUFBM1UsRUFBQTVNLE9BQUEsR0FBQTBoQixFQUFBOVUsRUFBQSxLQUNBQSxFQUFBZ1YsUUFHQSxLQUFBaFYsRUFBQTVNLE9BQUEsR0FBQTBoQixFQUFBOVUsSUFBQTVNLE9BQUEsS0FDQTRNLEVBQUF4TCxNQUlBLE9BQUF3TCxFQUFBOUMsS0FBQSxPQXhDQXJPLEVBQUE2bEIsNEJBQ0E3bEIsRUFBQW9tQixpQkFzRkEsU0FBQWpsQixHQUNBLElBQUFrbEIsRUFBQTdpQixVQUFBZSxPQUFBLFFBQUFLLElBQUFwQixVQUFBLEdBQUFBLFVBQUEsTUFDQThpQixFQUFBOWlCLFVBQUFlLE9BQUEsUUFBQUssSUFBQXBCLFVBQUEsSUFBQUEsVUFBQSxHQUNBK2lCLEdBQUEsSUFBQXBsQixFQUFBc00sUUFBQSxNQUNBK1ksRUFBQSxNQUFBcmxCLEVBQUEsV0FBQUEsRUFBQSxHQUNBc2xCLEVBQUEsTUFBQXRsQixJQUFBb0QsT0FBQSxHQUNBbWlCLEdBQUFILEdBQUFFLEdBQUFILEVBQ0E5ZixFQUFBLElBRUFrZ0IsR0FBQUgsR0FBQUMsSUFDQWhnQixHQUFBLEtBQUE2ZixHQUdBN2YsR0FBQTZmLEVBQUFsbEIsRUFBQXFOLFFBQUEsV0FBQTZYLEdBQUFsbEIsRUFFQXVsQixJQUNBbGdCLEdBQUEsTUFHQSxZQUFBQSxFQUFBZ0ksUUFBQSxxREM5R0E1TixPQUFBQyxlQUFBYixFQUFBLGNBQ0FtQixPQUFBLElBRUFuQixFQUFBd1ksVUFBQSxFQWNBLElBQUFBLEVBQUE1WCxPQUFBd2pCLE9BQUEsQ0FFQXJLLEtBQUEsT0FFQXRCLFNBQUEsV0FDQXVFLHFCQUFBLHNCQUNBTyxvQkFBQSxxQkFDQVMsY0FBQSxlQUNBVyxNQUFBLFFBQ0FPLFNBQUEsV0FFQVosZ0JBQUEsaUJBQ0FDLGdCQUFBLGlCQUNBL0Isb0JBQUEscUJBRUF1QixTQUFBLFdBQ0E4QixJQUFBLFdBQ0FFLE1BQUEsYUFDQUMsT0FBQSxjQUNBRyxRQUFBLGVBQ0FDLEtBQUEsWUFDQUMsS0FBQSxZQUNBaEIsS0FBQSxZQUNBSSxPQUFBLGNBQ0FDLGFBQUEsY0FFQWUsVUFBQSxZQUVBSSxXQUFBLFlBQ0FILFVBQUEsV0FDQUUsY0FBQSxjQUVBRSxrQkFBQSxtQkFDQXNCLDBCQUFBLDBCQUVBbEIsdUJBQUEsdUJBQ0FFLHVCQUFBLHVCQUNBcUIsaUJBQUEsa0JBQ0FFLHVCQUFBLHVCQUNBckIsMEJBQUEsMEJBQ0FFLHNCQUFBLHNCQUNBRSxxQkFBQSxxQkFDQW1CLHNCQUFBLHNCQUNBakIsNkJBQUEsNEJBRUFNLHFCQUFBLHNCQUVBckgsaUJBQUEsa0JBRUFFLHNCQUFBLHNCQUNBTSxzQkFBQSxzQkFDQUUseUJBQUEseUJBQ0FJLHFCQUFBLHFCQUNBSSxvQkFBQSxvQkFDQUcsNEJBQUEsNkJBTUFsYyxFQUFBd1kscUNDN0VBNVgsT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUVBbkIsRUFBQThpQix1QkFBQSxFQWNBLElBQUFBLEVBQUFsaUIsT0FBQXdqQixPQUFBLENBRUF1QyxNQUFBLFFBQ0FDLFNBQUEsV0FDQUMsYUFBQSxlQUNBbEksTUFBQSxRQUNBbkMsb0JBQUEsc0JBQ0E4QixnQkFBQSxrQkFDQUMsZ0JBQUEsa0JBQ0FoQixvQkFBQSxzQkFFQXVKLE9BQUEsU0FDQUMsT0FBQSxTQUNBdEgsT0FBQSxTQUNBZ0QsaUJBQUEsbUJBQ0F1RSxvQkFBQSxzQkFDQUMsVUFBQSxZQUNBQyxNQUFBLFFBQ0E3RyxLQUFBLE9BQ0E4RyxXQUFBLGFBQ0FDLGFBQUEsZUFDQUMsdUJBQUEsMkJBTUFybkIsRUFBQThpQixrREM1Q0FsaUIsT0FBQUMsZUFBQWIsRUFBQSxjQUNBbUIsT0FBQSxJQUdBLElBQUFtbUIsRUFBQSxXQUFnQyxTQUFBNWEsRUFBQTZhLEVBQUFDLEdBQTJDLFFBQUF0bkIsRUFBQSxFQUFnQkEsRUFBQXNuQixFQUFBampCLE9BQWtCckUsSUFBQSxDQUFPLElBQUF1bkIsRUFBQUQsRUFBQXRuQixHQUEyQnVuQixFQUFBM21CLFdBQUEybUIsRUFBQTNtQixhQUFBLEVBQXdEMm1CLEVBQUE1YSxjQUFBLEVBQWdDLFVBQUE0YSxNQUFBOWEsVUFBQSxHQUF1RC9MLE9BQUFDLGVBQUEwbUIsRUFBQUUsRUFBQWhtQixJQUFBZ21CLElBQStELGdCQUFBQyxFQUFBQyxFQUFBQyxHQUEyTCxPQUFsSUQsR0FBQWpiLEVBQUFnYixFQUFBNWxCLFVBQUE2bEIsR0FBcUVDLEdBQUFsYixFQUFBZ2IsRUFBQUUsR0FBNkRGLEdBQXhoQixHQUVBLFNBQUFHLEVBQUFDLEVBQUFKLEdBQWlELEtBQUFJLGFBQUFKLEdBQTBDLFVBQUEzUixVQUFBLHFDQUkzRixJQUFBZ1MsRUFBQSxXQUNBLHlCQUFBOW1CLFFBRUErbUIsRUFBQSxTQUFBdm5CLEdBQ0EsT0FBQXNuQixLQUFBM2QsUUFBQW5KLE9BQUFSLEtBRUF3bkIsRUFBQSxTQUFBeG5CLEdBQ0EsT0FBQXVuQixFQUFBdm5CLEdBQUFRLE9BQUFSLEdBQUEsS0FBQUEsR0FHQXNuQixNQUFBQyxFQUFBLGdCQUNBL21CLE9BQUFpbkIsV0FBQWpuQixPQUFBLGVBR0EsSUFBQWtuQixFQUFBRixFQUFBLFlBQ0FHLEVBQUFILEVBQUEsY0FDQUksRUFBQUosRUFBQSxXQUlBLFNBQUFLLEVBQUE1bEIsRUFBQWpCLEdBQ0EsSUFBQU4sRUFBQXVCLEVBQUFqQixHQUVBLFNBQUFOLEVBQUEsQ0FFQSxzQkFBQUEsRUFBQSxVQUFBNFUsVUFBQTVVLEVBQUEsc0JBRUEsT0FBQUEsR0FHQSxTQUFBb25CLEVBQUE3bEIsR0FDQSxJQUFBOGxCLEVBQUE5bEIsRUFBQTJCLFlBT0EsWUFOQU8sSUFBQTRqQixHQUVBLFFBREFBLElBQUFILE1BRUFHLE9BQUE1akIsUUFHQUEsSUFBQTRqQixJQUFBclQsRUFHQSxTQUFBc1QsRUFBQTFkLEdBQ0EsT0FBQUEsYUFBQW9LLEVBR0EsU0FBQXVULEVBQUE1VixHQUNBNFYsRUFBQW5SLElBQ0FtUixFQUFBblIsSUFBQXpFLEdBRUFELFdBQUEsV0FDQSxNQUFBQyxJQUtBLFNBQUE2VixFQUFBdmhCLEdBQ0F3aEIsUUFBQUMsVUFBQUMsS0FBQSxXQUNBLElBQ0ExaEIsSUFDSyxNQUFBMEwsR0FDTDRWLEVBQUE1VixNQUtBLFNBQUFpVyxFQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQUFFLFNBQ0EsUUFBQXRrQixJQUFBcWtCLElBRUFELEVBQUFFLGNBQUF0a0IsRUFFQXFrQixHQUlBLElBQ0Esc0JBQUFBLEVBQ0FBLFFBQ0ssQ0FDTCxJQUFBRSxFQUFBYixFQUFBVyxFQUFBLGVBQ0FFLEdBQ0FBLEVBQUE5b0IsS0FBQTRvQixJQUdHLE1BQUFuVyxHQUNINFYsRUFBQTVWLElBSUEsU0FBQXNXLEVBQUFKLEdBQ0FBLEVBQUFLLGVBQUF6a0IsRUFDQW9rQixFQUFBTSxZQUFBMWtCLEVBQ0Fva0IsRUFBQU8sT0FBQSxTQWdCQSxTQUFBQyxFQUFBUixFQUFBMVAsRUFBQW5ZLEdBQ0E2bkIsRUFBQU8sT0FBQSxVQUVBLElBQUFFLEVBQUFULEVBQUFLLFVBRUEsSUFDQSxJQUFBL29CLEVBQUFnb0IsRUFBQW1CLEVBQUFuUSxHQUNBLE9BQUFBLEdBQ0EsV0FDQWhaLEtBQUFELEtBQUFvcEIsRUFBQXRvQixHQUNBLE1BQ0EsWUFFQSxHQURBaW9CLEVBQUFKLElBQ0Exb0IsRUFBdUMsTUFBQWEsRUFBdkNiLEVBQUFELEtBQUFvcEIsRUFBQXRvQixHQUNBLE1BQ0EsZUFDQWlvQixFQUFBSixHQUNBMW9CLEtBQUFELEtBQUFvcEIsSUFHRyxNQUFBM1csR0FDSDRWLEVBQUE1VixHQUdBLFdBQUFrVyxFQUFBTyxPQUFBUixFQUFBQyxHQUEwRSxZQUFBQSxFQUFBTyxTQUFBUCxFQUFBTyxPQUFBLFNBRzFFLFNBQUFHLEVBQUFWLEVBQUExUCxFQUFBblksR0FDQSxjQUFBNm5CLEVBQUFPLE9BQUEsQ0FFQSxpQkFBQVAsRUFBQU8sT0FLQSxnQkFBQVAsRUFBQU8sUUFDQVAsRUFBQU8sT0FBQSxZQUNBUCxFQUFBTSxPQUFBLEVBQTRCaFEsT0FBQW5ZLGVBQzVCd25CLEVBQUEsV0FDQSxPQXBEQSxTQUFBSyxHQUNBLElBQUEvVixFQUFBK1YsRUFBQU0sT0FDQSxHQUFBclcsRUFBQSxDQUdBK1YsRUFBQU0sWUFBQTFrQixFQUNBb2tCLEVBQUFPLE9BQUEsUUFDQSxRQUFBcnBCLEVBQUEsRUFBaUJBLEVBQUErUyxFQUFBMU8sU0FDakJpbEIsRUFBQVIsRUFBQS9WLEVBQUEvUyxHQUFBb1osS0FBQXJHLEVBQUEvUyxHQUFBaUIsT0FDQSxXQUFBNm5CLEVBQUFPLFVBRm1DcnBCLEtBNkNuQ3lwQixDQUFBWCxXQUtBUSxFQUFBUixFQUFBMVAsRUFBQW5ZLEdBYkE2bkIsRUFBQU0sT0FBQS9pQixLQUFBLENBQThCK1MsT0FBQW5ZLFdBZ0I5QixJQUFBeW9CLEVBQUEsV0FDQSxTQUFBQSxFQUFBSCxFQUFBSSxHQUNBaEMsRUFBQTdrQixLQUFBNG1CLEdBS0E1bUIsS0FBQWttQixjQUFBdGtCLEVBQ0E1QixLQUFBcW1CLFVBQUFJLEVBQ0F6bUIsS0FBQXNtQixZQUFBMWtCLEVBQ0E1QixLQUFBdW1CLE9BQUEsZUFFQSxJQUFBTyxFQUFBLElBQUFDLEVBQUEvbUIsTUFFQSxJQUNBQSxLQUFBa21CLFNBQUFXLEVBQUF4cEIsVUFBQXVFLEVBQUFrbEIsR0FDSyxNQUFBaFgsR0FDTGdYLEVBQUFwbUIsTUFBQW9QLEdBR0EsaUJBQUE5UCxLQUFBdW1CLFNBQUF2bUIsS0FBQXVtQixPQUFBLFNBa0JBLE9BZkFqQyxFQUFBc0MsRUFBQSxFQUNBbm9CLElBQUEsY0FDQU4sTUFBQSxXQUNBLFdBQUE2QixLQUFBdW1CLFNBQ0FILEVBQUFwbUIsTUFDQStsQixFQUFBL2xCLFNBR0csQ0FDSHZCLElBQUEsU0FDQVYsSUFBQSxXQUNBLGlCQUFBaUMsS0FBQXVtQixXQUlBSyxFQXRDQSxHQXlDQUcsRUFBQSxXQUNBLFNBQUFBLEVBQUFmLEdBQ0FuQixFQUFBN2tCLEtBQUErbUIsR0FFQS9tQixLQUFBZ25CLGNBQUFoQixFQXlCQSxPQXRCQTFCLEVBQUF5QyxFQUFBLEVBQ0F0b0IsSUFBQSxPQUNBTixNQUFBLFNBQUFBLEdBQ0F1b0IsRUFBQTFtQixLQUFBZ25CLGNBQUEsT0FBQTdvQixLQUVHLENBQ0hNLElBQUEsUUFDQU4sTUFBQSxTQUFBQSxHQUNBdW9CLEVBQUExbUIsS0FBQWduQixjQUFBLFFBQUE3b0IsS0FFRyxDQUNITSxJQUFBLFdBQ0FOLE1BQUEsV0FDQXVvQixFQUFBMW1CLEtBQUFnbkIsY0FBQSxjQUVHLENBQ0h2b0IsSUFBQSxTQUNBVixJQUFBLFdBQ0EsaUJBQUFpQyxLQUFBZ25CLGNBQUFULFdBSUFRLEVBN0JBLEdBZ0NBNVUsRUFBQW5WLEVBQUFtVixXQUFBLFdBQ0EsU0FBQUEsRUFBQTBVLEdBR0EsR0FGQWhDLEVBQUE3a0IsS0FBQW1TLEtBRUFuUyxnQkFBQW1TLEdBQUEsVUFBQVksVUFBQSw2Q0FFQSxzQkFBQThULEVBQUEsVUFBQTlULFVBQUEsNkNBRUEvUyxLQUFBaW5CLFlBQUFKLEVBOFZBLE9BM1ZBdkMsRUFBQW5TLEVBQUEsRUFDQTFULElBQUEsWUFDQU4sTUFBQSxTQUFBc29CLEdBUUEsTUFQQSxpQkFBQUEsR0FBQSxPQUFBQSxJQUNBQSxFQUFBLENBQ0E1WixLQUFBNFosRUFDQS9sQixNQUFBRixVQUFBLEdBQ0EwbUIsU0FBQTFtQixVQUFBLEtBR0EsSUFBQW9tQixFQUFBSCxFQUFBem1CLEtBQUFpbkIsZUFFRyxDQUNIeG9CLElBQUEsVUFDQU4sTUFBQSxTQUFBaUcsR0FDQSxJQUFBckUsRUFBQUMsS0FFQSxXQUFBNGxCLFFBQUEsU0FBQUMsRUFBQXNCLEdBQ0Esc0JBQUEvaUIsRUFVQSxJQUFBNGhCLEVBQUFqbUIsRUFBQXFuQixVQUFBLENBQ0F2YSxLQUFBLFNBQUExTyxHQUNBLElBQ0FpRyxFQUFBakcsRUFBQTJPLEdBQ2EsTUFBQWdELEdBQ2JxWCxFQUFBclgsR0FDQWtXLEVBQUFHLGdCQUlBemxCLE1BQUF5bUIsRUFDQUQsU0FBQXJCLFNBcEJBc0IsRUFBQSxJQUFBcFUsVUFBQTNPLEVBQUEsdUJBSUEsU0FBQTBJLElBQ0FrWixFQUFBRyxjQUNBTixTQWtCRyxDQUNIcG5CLElBQUEsTUFDQU4sTUFBQSxTQUFBaUcsR0FDQSxJQUFBaWpCLEVBQUFybkIsS0FFQSxzQkFBQW9FLEVBQUEsVUFBQTJPLFVBQUEzTyxFQUFBLHNCQUlBLFdBRkFtaEIsRUFBQXZsQixNQUVBLFVBQUF5bUIsR0FDQSxPQUFBWSxFQUFBRCxVQUFBLENBQ0F2YSxLQUFBLFNBQUExTyxHQUNBLElBQ0FBLEVBQUFpRyxFQUFBakcsR0FDYSxNQUFBMlIsR0FDYixPQUFBMlcsRUFBQS9sQixNQUFBb1AsR0FFQTJXLEVBQUE1WixLQUFBMU8sSUFFQXVDLE1BQUEsU0FBQW9QLEdBQ0EyVyxFQUFBL2xCLE1BQUFvUCxJQUVBb1gsU0FBQSxXQUNBVCxFQUFBUyxrQkFLRyxDQUNIem9CLElBQUEsU0FDQU4sTUFBQSxTQUFBaUcsR0FDQSxJQUFBa2pCLEVBQUF0bkIsS0FFQSxzQkFBQW9FLEVBQUEsVUFBQTJPLFVBQUEzTyxFQUFBLHNCQUlBLFdBRkFtaEIsRUFBQXZsQixNQUVBLFVBQUF5bUIsR0FDQSxPQUFBYSxFQUFBRixVQUFBLENBQ0F2YSxLQUFBLFNBQUExTyxHQUNBLElBQ0EsSUFBQWlHLEVBQUFqRyxHQUFBLE9BQ2EsTUFBQTJSLEdBQ2IsT0FBQTJXLEVBQUEvbEIsTUFBQW9QLEdBRUEyVyxFQUFBNVosS0FBQTFPLElBRUF1QyxNQUFBLFNBQUFvUCxHQUNBMlcsRUFBQS9sQixNQUFBb1AsSUFFQW9YLFNBQUEsV0FDQVQsRUFBQVMsa0JBS0csQ0FDSHpvQixJQUFBLFNBQ0FOLE1BQUEsU0FBQWlHLEdBQ0EsSUFBQW1qQixFQUFBdm5CLEtBRUEsc0JBQUFvRSxFQUFBLFVBQUEyTyxVQUFBM08sRUFBQSxzQkFFQSxJQUFBb2pCLEVBQUFqQyxFQUFBdmxCLE1BQ0F5bkIsRUFBQWpuQixVQUFBZSxPQUFBLEVBQ0FtbUIsR0FBQSxFQUVBQyxFQURBbm5CLFVBQUEsR0FHQSxXQUFBZ25CLEVBQUEsU0FBQWYsR0FDQSxPQUFBYyxFQUFBSCxVQUFBLENBQ0F2YSxLQUFBLFNBQUExTyxHQUNBLElBQUF5cEIsR0FBQUYsRUFHQSxHQUZBQSxHQUFBLEdBRUFFLEdBQUFILEVBQ0EsSUFDQUUsRUFBQXZqQixFQUFBdWpCLEVBQUF4cEIsR0FDZSxNQUFBMlIsR0FDZixPQUFBMlcsRUFBQS9sQixNQUFBb1AsUUFHQTZYLEVBQUF4cEIsR0FHQXVDLE1BQUEsU0FBQW9QLEdBQ0EyVyxFQUFBL2xCLE1BQUFvUCxJQUVBb1gsU0FBQSxXQUNBLElBQUFRLElBQUFELEVBQUEsT0FBQWhCLEVBQUEvbEIsTUFBQSxJQUFBcVMsVUFBQSxvQ0FFQTBULEVBQUE1WixLQUFBOGEsR0FDQWxCLEVBQUFTLGtCQUtHLENBQ0h6b0IsSUFBQSxTQUNBTixNQUFBLFdBR0EsSUFGQSxJQUFBMHBCLEVBQUE3bkIsS0FFQThuQixFQUFBdG5CLFVBQUFlLE9BQUF3bUIsRUFBQTVtQixNQUFBMm1CLEdBQUFFLEVBQUEsRUFBd0VBLEVBQUFGLEVBQWFFLElBQ3JGRCxFQUFBQyxHQUFBeG5CLFVBQUF3bkIsR0FHQSxJQUFBUixFQUFBakMsRUFBQXZsQixNQUVBLFdBQUF3bkIsRUFBQSxTQUFBZixHQUNBLElBQUFULE9BQUEsRUFDQTlqQixFQUFBLEVBdUJBLE9BckJBLFNBQUErbEIsRUFBQXBiLEdBQ0FtWixFQUFBblosRUFBQXVhLFVBQUEsQ0FDQXZhLEtBQUEsU0FBQXFiLEdBQ0F6QixFQUFBNVosS0FBQXFiLElBRUF4bkIsTUFBQSxTQUFBb1AsR0FDQTJXLEVBQUEvbEIsTUFBQW9QLElBRUFvWCxTQUFBLFdBQ0FobEIsSUFBQTZsQixFQUFBeG1CLFFBQ0F5a0IsT0FBQXBrQixFQUNBNmtCLEVBQUFTLFlBRUFlLEVBQUFULEVBQUFXLEtBQUFKLEVBQUE3bEIsVUFNQStsQixDQUFBSixHQUVBLFdBQ0E3QixJQUNBQSxFQUFBRyxjQUNBSCxPQUFBcGtCLFFBS0csQ0FDSG5ELElBQUEsVUFDQU4sTUFBQSxTQUFBaUcsR0FDQSxJQUFBZ2tCLEVBQUFwb0IsS0FFQSxzQkFBQW9FLEVBQUEsVUFBQTJPLFVBQUEzTyxFQUFBLHNCQUVBLElBQUFvakIsRUFBQWpDLEVBQUF2bEIsTUFFQSxXQUFBd25CLEVBQUEsU0FBQWYsR0FDQSxJQUFBNEIsRUFBQSxHQUVBQyxFQUFBRixFQUFBaEIsVUFBQSxDQUNBdmEsS0FBQSxTQUFBMU8sR0FDQSxHQUFBaUcsRUFDQSxJQUNBakcsRUFBQWlHLEVBQUFqRyxHQUNlLE1BQUEyUixHQUNmLE9BQUEyVyxFQUFBL2xCLE1BQUFvUCxHQUlBLElBQUF5WSxFQUFBZixFQUFBVyxLQUFBaHFCLEdBQUFpcEIsVUFBQSxDQUNBdmEsS0FBQSxTQUFBMU8sR0FDQXNvQixFQUFBNVosS0FBQTFPLElBRUF1QyxNQUFBLFNBQUFvUCxHQUNBMlcsRUFBQS9sQixNQUFBb1AsSUFFQW9YLFNBQUEsV0FDQSxJQUFBaHFCLEVBQUFtckIsRUFBQTVkLFFBQUE4ZCxHQUNBcnJCLEdBQUEsR0FBQW1yQixFQUFBaGxCLE9BQUFuRyxFQUFBLEdBQ0FzckIsT0FJQUgsRUFBQTlrQixLQUFBZ2xCLElBRUE3bkIsTUFBQSxTQUFBb1AsR0FDQTJXLEVBQUEvbEIsTUFBQW9QLElBRUFvWCxTQUFBLFdBQ0FzQixPQUlBLFNBQUFBLElBQ0FGLEVBQUFHLFFBQUEsSUFBQUosRUFBQTltQixRQUFBa2xCLEVBQUFTLFdBR0Esa0JBQ0FtQixFQUFBdFQsUUFBQSxTQUFBOVYsR0FDQSxPQUFBQSxFQUFBa25CLGdCQUVBbUMsRUFBQW5DLG1CQUlHLENBQ0gxbkIsSUFBQTJtQixFQUNBam5CLE1BQUEsV0FDQSxPQUFBNkIsUUFFRyxFQUNIdkIsSUFBQSxPQUNBTixNQUFBLFNBQUE0SixHQUNBLElBQUF5ZixFQUFBLG1CQUFBeG5CLFVBQUFtUyxFQUVBLFNBQUFwSyxFQUFBLFVBQUFnTCxVQUFBaEwsRUFBQSxxQkFFQSxJQUFBMUgsRUFBQWlsQixFQUFBdmQsRUFBQXFkLEdBQ0EsR0FBQS9rQixFQUFBLENBQ0EsSUFBQTZrQixFQUFBN2tCLEVBQUFoRCxLQUFBMEssR0FFQSxHQUFBbkssT0FBQXNuQixPQUFBLFVBQUFuUyxVQUFBbVMsRUFBQSxxQkFFQSxPQUFBTyxFQUFBUCxNQUFBN2pCLGNBQUFtbUIsRUFBQXRDLEVBRUEsSUFBQXNDLEVBQUEsU0FBQWYsR0FDQSxPQUFBdkIsRUFBQWtDLFVBQUFYLEtBSUEsR0FBQXpCLEVBQUEsY0FDQTNrQixFQUFBaWxCLEVBQUF2ZCxFQUFBb2QsSUFFQSxXQUFBcUMsRUFBQSxTQUFBZixHQUNBZCxFQUFBLFdBQ0EsSUFBQWMsRUFBQWdDLE9BQUEsQ0FDQSxJQUFBamMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLE9BQUE5SyxFQUVBLElBQ0EsUUFBQStLLEVBQUFDLEVBQUF2TSxFQUFBaEQsS0FBQTBLLEdBQUE5SixPQUFBdUssY0FBOEVnRSxHQUFBRyxFQUFBQyxFQUFBQyxRQUFBQyxNQUFnRU4sR0FBQSxHQUM5SSxJQUFBdVAsRUFBQXBQLEVBQUF4TyxNQUdBLEdBREFzb0IsRUFBQTVaLEtBQUFrUCxHQUNBMEssRUFBQWdDLE9BQUEsUUFFZSxNQUFBemIsR0FDZlAsR0FBQSxFQUNBQyxFQUFBTSxFQUNlLFFBQ2YsS0FDQVIsR0FBQUksRUFBQUssUUFDQUwsRUFBQUssU0FFaUIsUUFDakIsR0FBQVIsRUFDQSxNQUFBQyxHQUtBK1osRUFBQVMsZ0JBTUEsR0FBQS9sQixNQUFBYSxRQUFBK0YsR0FDQSxXQUFBeWYsRUFBQSxTQUFBZixHQUNBZCxFQUFBLFdBQ0EsSUFBQWMsRUFBQWdDLE9BQUEsQ0FDQSxRQUFBdnJCLEVBQUEsRUFBMkJBLEVBQUE2SyxFQUFBeEcsU0FBY3JFLEVBRXpDLEdBREF1cEIsRUFBQTVaLEtBQUE5RSxFQUFBN0ssSUFDQXVwQixFQUFBZ0MsT0FBQSxPQUVBaEMsRUFBQVMsZ0JBS0EsVUFBQW5VLFVBQUFoTCxFQUFBLHdCQUVHLENBQ0h0SixJQUFBLEtBQ0FOLE1BQUEsV0FDQSxRQUFBdXFCLEVBQUFsb0IsVUFBQWUsT0FBQTZKLEVBQUFqSyxNQUFBdW5CLEdBQUFDLEVBQUEsRUFBeUVBLEVBQUFELEVBQWVDLElBQ3hGdmQsRUFBQXVkLEdBQUFub0IsVUFBQW1vQixHQUtBLFdBRkEsbUJBQUEzb0IsVUFBQW1TLEdBRUEsU0FBQXNVLEdBQ0FkLEVBQUEsV0FDQSxJQUFBYyxFQUFBZ0MsT0FBQSxDQUNBLFFBQUF2ckIsRUFBQSxFQUF5QkEsRUFBQWtPLEVBQUE3SixTQUFrQnJFLEVBRTNDLEdBREF1cEIsRUFBQTVaLEtBQUF6QixFQUFBbE8sSUFDQXVwQixFQUFBZ0MsT0FBQSxPQUVBaEMsRUFBQVMsa0JBSUcsQ0FDSHpvQixJQUFBNG1CLEVBQ0F0bkIsSUFBQSxXQUNBLE9BQUFpQyxTQUlBbVMsRUF0V0EsR0F5V0E0UyxLQUNBbm5CLE9BQUFDLGVBQUFzVSxFQUFBbFUsT0FBQSxlQUNBRSxNQUFBLENBQ0F5cUIsT0FBQXhELEVBQ0FNLG1CQUVBN2IsY0FBQSxxREMzbEJlZ2YsU0FGRXBXLHVCQ0ZqQjNWLEVBQUFVLEVBQUEyQixFQUFBLCtCQUFBMnBCLElBQUFoc0IsRUFBQVUsRUFBQTJCLEVBQUEsMkJBQUFvTCxJQUFBek4sRUFBQVUsRUFBQTJCLEVBQUEsb0NBQUE0cEIsSUFBQWpzQixFQUFBVSxFQUFBMkIsRUFBQSwwQkFBQXdVLElBQUE3VyxFQUFBVSxFQUFBMkIsRUFBQSw0QkFBQTZwQixJQUFBbHNCLEVBQUFVLEVBQUEyQixFQUFBLHlCQUFBZ3BCLElBQUFyckIsRUFBQVUsRUFBQTJCLEVBQUEsOEJBQUE4cEIsSUFBQW5zQixFQUFBVSxFQUFBMkIsRUFBQSxnQ0FBQStwQixJQUFBcHNCLEVBQUFVLEVBQUEyQixFQUFBLGdDQUFBZ3FCLElBQUFyc0IsRUFBQVUsRUFBQTJCLEVBQUEsMEJBQUFpUCxJQUFBdFIsRUFBQVUsRUFBQTJCLEVBQUEsOEJBQUFpcUIsSUFBQXRzQixFQUFBVSxFQUFBMkIsRUFBQSwrQkFBQTBwQixJQUFBL3JCLEVBQUFVLEVBQUEyQixFQUFBLHFDQUFBa3FCLEVBQUEsS0F1QmEsU0FBQXhwQixHQUViLFNBQUF5cEIsRUFBQXhwQixFQUFBMlQsR0FDQSxJQUFBMVQsRUFBQUYsRUFBQXhDLEtBQUEyQyxLQUFBRixJQUFBRSxLQUVBLE9BREFELEVBQUEwVCxPQUNBMVQsRUFKSW5DLE9BQUEyckIsRUFBQSxFQUFBM3JCLENBQVMwckIsRUFBQXpwQixHQURBLENBUVpLLE9BQ0QsU0FBQXNwQixFQUFBL1YsR0FDQSxPQUFBQSxFQUFBZ1csUUFBQWxvQixRQUFBLEVBRUEsU0FBQTZuQixFQUFBbEUsR0FDQSxJQUFBd0UsR0FBQSxFQUNBLFdBQUE5RCxRQUFBLFNBQUFDLEVBQUFzQixHQUNBakMsRUFBQWtDLFVBQUEsQ0FDQXZhLEtBQUEsU0FBQXVGLEdBQ0FzWCxJQUlBQSxHQUFBLEVBQ0E3RCxFQUFBelQsS0FHQTFSLE1BQUF5bUIsTUFJQSxJQUFBZ0MsRUFBQUMsRUFDQSxTQUFBRixFQUFBUyxHQUNBLFdBQWVkLEVBQVUsU0FBQXBDLEdBQ3pCa0QsRUFDQTdELEtBQUEsU0FBQTNuQixHQUNBc29CLEVBQUE1WixLQUFBMU8sR0FDQXNvQixFQUFBUyxhQUVBMEMsTUFBQW5ELEVBQUEvbEIsTUFBQWhDLEtBQUErbkIsTUFHQSxTQUFBd0MsRUFBQVksR0FDQSxXQUFlaEIsRUFBVSxTQUFBcEMsR0FDekJBLEVBQUEvbEIsTUFBQW1wQixLQWtCQSxTQUFBZCxFQUFBZSxFQUFBN1AsR0FDQSxJQUFBOFAsRUFBa0Juc0IsT0FBQTJyQixFQUFBLEVBQUEzckIsQ0FBUSxHQUFHa3NCLEdBc0I3QixPQVpBbHNCLE9BQUFDLGVBQUFvYyxFQUFBLGNBQ0FuYyxZQUFBLEVBQ0FLLE1BWEEsU0FBQTBPLEdBRUFrZCxFQURBLG1CQUFBbGQsRUFDc0JqUCxPQUFBMnJCLEVBQUEsRUFBQTNyQixDQUFRLEdBQUdtc0IsRUFBQWxkLEVBQUFrZCxJQUdYbnNCLE9BQUEyckIsRUFBQSxFQUFBM3JCLENBQVEsR0FBR21zQixFQUFBbGQsTUFRakNqUCxPQUFBQyxlQUFBb2MsRUFBQSxjQUNBbmMsWUFBQSxFQUNBSyxNQVBBLFdBQWtDLE9BQVNQLE9BQUEyckIsRUFBQSxFQUFULENBQWlCLEdBQUdRLE1BU3REbnNCLE9BQUFDLGVBQUFvYyxFQUFBLFNBQ0FuYyxZQUFBLEVBQ0FLLE1BQUEsV0FBNEIsT0FJNUIsU0FBQThiLEdBQ0EsSUFBQStQLEVBQUEvUCxFQUFBK1AsTUFBQUMsRUFBQWhRLEVBQUFnUSxVQUFBQyxFQUFBalEsRUFBQWlRLGNBQ0EsT0FBQTdmLEtBQUFDLFVBQUEsQ0FBQTRmLEVBQUFGLEVBQUFDLElBTjRCRSxDQUFBbFEsTUFFNUJBLEVBT0EsU0FBQW1RLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUEsSUFBQUQsR0FBbUN4QixFQUFVMEIsS0FFN0MsU0FBQUMsRUFBQUMsR0FDQSx5QkFBQUEsRUFBQSxJQUErQzNCLEVBQVUyQixLQUV6RCxTQUFBOVcsSUFDQSxXQUFlbVYsRUFBVSxXQUFjLE9BQVFELEVBQVUwQixPQUV6RCxTQUFBcEMsRUFBQXVDLEdBQ0EsV0FBQUEsRUFBQW5wQixPQUNBb1MsSUFDQStXLEVBQUE1aUIsSUFBQTBpQixHQUFBcmhCLE9BQUEsU0FBQXBCLEVBQUE0aUIsR0FBcUQsT0FBQTVpQixFQUFBd0MsT0FBQW9nQixLQUVyRCxTQUFBdmMsRUFBQXdjLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQVAsRUFBQUssR0FDQUcsRUFBQVIsRUFBQU0sR0FBQSxJQUF3Q2hDLEVBQVVzQixJQUNsRCxPQUFBWixFQUFBdUIsSUFBQXZCLEVBQUF3QixHQUNBLElBQW1CbEMsRUFBVSxTQUFBN08sR0FDN0IsT0FBQTJRLEVBQUEzUSxHQUNBOFEsRUFBQXRCLFFBQUF4UCxJQUFpRDRPLEVBQVUwQixLQUMzRFMsRUFBQXZCLFFBQUF4UCxJQUFrRDRPLEVBQVUwQixPQUk1RCxJQUFtQnpCLEVBQVUsU0FBQTdPLEVBQUFxUSxHQUM3QixPQUFBTSxFQUFBM1EsR0FDQThRLEVBQUF0QixRQUFBeFAsRUFBQXFRLElBQTBEekIsRUFBVTBCLEtBQ3BFUyxFQUFBdkIsUUFBQXhQLEVBQUFxUSxJQUEyRHpCLEVBQVUwQixPQUlyRSxJQUFBaGdCLEVBQUEsU0FBQXFkLEVBQUFxRCxHQUNBLElBQUFDLEVBQUFWLEVBQUE1QyxHQUNBLEdBQUE0QixFQUFBMEIsR0FFQSxPQUFBQSxFQUVBLElBQUFDLEVBQUFYLEVBQUFTLEdBQ0EsT0FBQXpCLEVBQUEyQixHQUNBLElBQW1CckMsRUFBVSxTQUFBN08sR0FDN0IsT0FBQWlSLEVBQUF6QixRQUFBeFAsRUFBQSxTQUFBb1EsR0FBK0QsT0FBQWMsRUFBQTFCLFFBQUFZLElBQWdDeEIsRUFBVTBCLFFBQWExQixFQUFVMEIsT0FJaEksSUFBbUJ6QixFQUFVLFNBQUE3TyxFQUFBcVEsR0FDN0IsT0FBQVksRUFBQXpCLFFBQUF4UCxFQUFBLFNBQUFvUSxHQUNBLE9BQUFjLEVBQUExQixRQUFBWSxFQUFBQyxJQUF3RHpCLEVBQVUwQixRQUNoRDFCLEVBQVUwQixRQUl4QnpCLEVBQVUsV0FDZCxTQUFBcFYsRUFBQStWLEdBQ0FBLElBQ0F6cEIsS0FBQXlwQixXQWVBLE9BYkEvVixFQUFBNVUsVUFBQXNQLE1BQUEsU0FBQXdjLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQTlxQixLQUFBdUssT0FBQTZELEVBQUF3YyxFQUFBQyxFQUFBQyxHQUFBLElBQUFwWCxFQUFBMFcsTUFFQTFXLEVBQUE1VSxVQUFBeUwsT0FBQSxTQUFBc0MsR0FDQSxPQUFBdEMsRUFBQXZLLEtBQUE2TSxJQUVBNkcsRUFBQTVVLFVBQUEycUIsUUFBQSxTQUFBeFAsRUFBQXFRLEdBQ0EsTUFBbUQsSUFBT2MsRUFBQSxFQUFjLElBRXhFMVgsRUFBQUMsUUFDQUQsRUFBQXlVLE9BQ0F6VSxFQUFBdEYsUUFDQXNGLEVBQUFzVixVQUNBdFYsRUFsQmMsR0FvQmQsU0FBQXNWLEVBQUF2VixFQUFBd0csR0FDQSxPQUFBeEcsRUFBQWdXLFFBQUFWLEVBQUE5TyxFQUFBOFAsUUF0SEEsU0FBQTlQLEdBQ0EsSUFBQW9SLEVBQUEsQ0FDQXBCLFVBQUFoUSxFQUFBZ1EsV0FBQSxHQUNBcGhCLFdBQUFvUixFQUFBcFIsWUFBQSxHQUNBcWhCLGNBQUFqUSxFQUFBaVEsY0FDQUYsTUFBQS9QLEVBQUErUCxPQVFBLE9BTkFxQixFQUFBbkIsZ0JBQ0FtQixFQUFBbkIsY0FDQSxpQkFBQW1CLEVBQUFyQixNQUNrQnBzQixPQUFBeXJCLEVBQUEsRUFBQXpyQixDQUFnQnl0QixFQUFBckIsT0FDbEMsSUFFQXFCLEVBeUdBQyxDQW5MQSxTQUFBclIsR0FRQSxJQVBBLElBQUFzUixFQUFBLENBQ0EsUUFDQSxnQkFDQSxZQUNBLGFBQ0EsV0FFQXpvQixFQUFBLEVBQUF0RCxFQUFBNUIsT0FBQXFFLEtBQUFnWSxHQUFpRG5YLEVBQUF0RCxFQUFBK0IsT0FBZ0J1QixJQUFBLENBQ2pFLElBQUFyRSxFQUFBZSxFQUFBc0QsR0FDQSxHQUFBeW9CLEVBQUE5Z0IsUUFBQWhNLEdBQUEsRUFDQSxNQUF1RCxJQUFPMnNCLEVBQUEsRUFBYyxHQUc1RSxPQUFBblIsRUFxS0F1UixDQUFBdlIsT0FBa0g0TyxFQUFVMEIiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE2KTtcbiIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gJ3RzbGliJztcblxudmFyIGdlbmVyaWNNZXNzYWdlID0gXCJJbnZhcmlhbnQgVmlvbGF0aW9uXCI7XHJcbnZhciBfYSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiwgc2V0UHJvdG90eXBlT2YgPSBfYSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG9iaiwgcHJvdG8pIHtcclxuICAgIG9iai5fX3Byb3RvX18gPSBwcm90bztcclxuICAgIHJldHVybiBvYmo7XHJcbn0gOiBfYTtcclxudmFyIEludmFyaWFudEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEludmFyaWFudEVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSW52YXJpYW50RXJyb3IobWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IGdlbmVyaWNNZXNzYWdlOyB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHlwZW9mIG1lc3NhZ2UgPT09IFwibnVtYmVyXCJcclxuICAgICAgICAgICAgPyBnZW5lcmljTWVzc2FnZSArIFwiOiBcIiArIG1lc3NhZ2UgKyBcIiAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2ludmFyaWFudC1wYWNrYWdlcylcIlxyXG4gICAgICAgICAgICA6IG1lc3NhZ2UpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZnJhbWVzVG9Qb3AgPSAxO1xyXG4gICAgICAgIF90aGlzLm5hbWUgPSBnZW5lcmljTWVzc2FnZTtcclxuICAgICAgICBzZXRQcm90b3R5cGVPZihfdGhpcywgSW52YXJpYW50RXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSW52YXJpYW50RXJyb3I7XHJcbn0oRXJyb3IpKTtcclxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFjb25kaXRpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgSW52YXJpYW50RXJyb3IobWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gd3JhcENvbnNvbGVNZXRob2QobWV0aG9kKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBjb25zb2xlW21ldGhvZF0uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbn1cclxuKGZ1bmN0aW9uIChpbnZhcmlhbnQpIHtcclxuICAgIGludmFyaWFudC53YXJuID0gd3JhcENvbnNvbGVNZXRob2QoXCJ3YXJuXCIpO1xyXG4gICAgaW52YXJpYW50LmVycm9yID0gd3JhcENvbnNvbGVNZXRob2QoXCJlcnJvclwiKTtcclxufSkoaW52YXJpYW50IHx8IChpbnZhcmlhbnQgPSB7fSkpO1xyXG4vLyBDb2RlIHRoYXQgdXNlcyB0cy1pbnZhcmlhbnQgd2l0aCByb2xsdXAtcGx1Z2luLWludmFyaWFudCBtYXkgd2FudCB0b1xyXG4vLyBpbXBvcnQgdGhpcyBwcm9jZXNzIHN0dWIgdG8gYXZvaWQgZXJyb3JzIGV2YWx1YXRpbmcgcHJvY2Vzcy5lbnYuTk9ERV9FTlYuXHJcbi8vIEhvd2V2ZXIsIGJlY2F1c2UgbW9zdCBFU00tdG8tQ0pTIGNvbXBpbGVycyB3aWxsIHJld3JpdGUgdGhlIHByb2Nlc3MgaW1wb3J0XHJcbi8vIGFzIHRzSW52YXJpYW50LnByb2Nlc3MsIHdoaWNoIHByZXZlbnRzIHByb3BlciByZXBsYWNlbWVudCBieSBtaW5pZmllcnMsIHdlXHJcbi8vIGFsc28gYXR0ZW1wdCB0byBkZWZpbmUgdGhlIHN0dWIgZ2xvYmFsbHkgd2hlbiBpdCBpcyBub3QgYWxyZWFkeSBkZWZpbmVkLlxyXG52YXIgcHJvY2Vzc1N0dWIgPSB7IGVudjoge30gfTtcclxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICBwcm9jZXNzU3R1YiA9IHByb2Nlc3M7XHJcbn1cclxuZWxzZVxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBVc2luZyBGdW5jdGlvbiB0byBldmFsdWF0ZSB0aGlzIGFzc2lnbm1lbnQgaW4gZ2xvYmFsIHNjb3BlIGFsc28gZXNjYXBlc1xyXG4gICAgICAgIC8vIHRoZSBzdHJpY3QgbW9kZSBvZiB0aGUgY3VycmVudCBtb2R1bGUsIHRoZXJlYnkgYWxsb3dpbmcgdGhlIGFzc2lnbm1lbnQuXHJcbiAgICAgICAgLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL3B1bGwvMzY5LlxyXG4gICAgICAgIEZ1bmN0aW9uKFwic3R1YlwiLCBcInByb2Nlc3MgPSBzdHViXCIpKHByb2Nlc3NTdHViKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChhdExlYXN0V2VUcmllZCkge1xyXG4gICAgICAgIC8vIFRoZSBhc3NpZ25tZW50IGNhbiBmYWlsIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgaGVhdnktaGFuZGVkbHlcclxuICAgICAgICAvLyBmb3JiaWRzIEZ1bmN0aW9uIHVzYWdlLiBJbiB0aG9zZSBlbnZpcm9ubWVudHMsIGRldmVsb3BlcnMgc2hvdWxkIHRha2VcclxuICAgICAgICAvLyBleHRyYSBjYXJlIHRvIHJlcGxhY2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgaW4gdGhlaXIgcHJvZHVjdGlvbiBidWlsZHMsXHJcbiAgICAgICAgLy8gb3IgZGVmaW5lIGFuIGFwcHJvcHJpYXRlIGdsb2JhbC5wcm9jZXNzIHBvbHlmaWxsLlxyXG4gICAgfVxyXG52YXIgaW52YXJpYW50JDEgPSBpbnZhcmlhbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudCQxO1xuZXhwb3J0IHsgSW52YXJpYW50RXJyb3IsIGludmFyaWFudCwgcHJvY2Vzc1N0dWIgYXMgcHJvY2VzcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW52YXJpYW50LmVzbS5qcy5tYXBcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy52aXNpdCA9IHZpc2l0O1xuZXhwb3J0cy52aXNpdEluUGFyYWxsZWwgPSB2aXNpdEluUGFyYWxsZWw7XG5leHBvcnRzLnZpc2l0V2l0aFR5cGVJbmZvID0gdmlzaXRXaXRoVHlwZUluZm87XG5leHBvcnRzLmdldFZpc2l0Rm4gPSBnZXRWaXNpdEZuO1xuZXhwb3J0cy5CUkVBSyA9IGV4cG9ydHMuUXVlcnlEb2N1bWVudEtleXMgPSB2b2lkIDA7XG5cbnZhciBfaW5zcGVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2pzdXRpbHMvaW5zcGVjdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbnZhciBRdWVyeURvY3VtZW50S2V5cyA9IHtcbiAgTmFtZTogW10sXG4gIERvY3VtZW50OiBbJ2RlZmluaXRpb25zJ10sXG4gIE9wZXJhdGlvbkRlZmluaXRpb246IFsnbmFtZScsICd2YXJpYWJsZURlZmluaXRpb25zJywgJ2RpcmVjdGl2ZXMnLCAnc2VsZWN0aW9uU2V0J10sXG4gIFZhcmlhYmxlRGVmaW5pdGlvbjogWyd2YXJpYWJsZScsICd0eXBlJywgJ2RlZmF1bHRWYWx1ZScsICdkaXJlY3RpdmVzJ10sXG4gIFZhcmlhYmxlOiBbJ25hbWUnXSxcbiAgU2VsZWN0aW9uU2V0OiBbJ3NlbGVjdGlvbnMnXSxcbiAgRmllbGQ6IFsnYWxpYXMnLCAnbmFtZScsICdhcmd1bWVudHMnLCAnZGlyZWN0aXZlcycsICdzZWxlY3Rpb25TZXQnXSxcbiAgQXJndW1lbnQ6IFsnbmFtZScsICd2YWx1ZSddLFxuICBGcmFnbWVudFNwcmVhZDogWyduYW1lJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW5saW5lRnJhZ21lbnQ6IFsndHlwZUNvbmRpdGlvbicsICdkaXJlY3RpdmVzJywgJ3NlbGVjdGlvblNldCddLFxuICBGcmFnbWVudERlZmluaXRpb246IFsnbmFtZScsIC8vIE5vdGU6IGZyYWdtZW50IHZhcmlhYmxlIGRlZmluaXRpb25zIGFyZSBleHBlcmltZW50YWwgYW5kIG1heSBiZSBjaGFuZ2VkXG4gIC8vIG9yIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgJ3ZhcmlhYmxlRGVmaW5pdGlvbnMnLCAndHlwZUNvbmRpdGlvbicsICdkaXJlY3RpdmVzJywgJ3NlbGVjdGlvblNldCddLFxuICBJbnRWYWx1ZTogW10sXG4gIEZsb2F0VmFsdWU6IFtdLFxuICBTdHJpbmdWYWx1ZTogW10sXG4gIEJvb2xlYW5WYWx1ZTogW10sXG4gIE51bGxWYWx1ZTogW10sXG4gIEVudW1WYWx1ZTogW10sXG4gIExpc3RWYWx1ZTogWyd2YWx1ZXMnXSxcbiAgT2JqZWN0VmFsdWU6IFsnZmllbGRzJ10sXG4gIE9iamVjdEZpZWxkOiBbJ25hbWUnLCAndmFsdWUnXSxcbiAgRGlyZWN0aXZlOiBbJ25hbWUnLCAnYXJndW1lbnRzJ10sXG4gIE5hbWVkVHlwZTogWyduYW1lJ10sXG4gIExpc3RUeXBlOiBbJ3R5cGUnXSxcbiAgTm9uTnVsbFR5cGU6IFsndHlwZSddLFxuICBTY2hlbWFEZWZpbml0aW9uOiBbJ2RpcmVjdGl2ZXMnLCAnb3BlcmF0aW9uVHlwZXMnXSxcbiAgT3BlcmF0aW9uVHlwZURlZmluaXRpb246IFsndHlwZSddLFxuICBTY2FsYXJUeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnXSxcbiAgT2JqZWN0VHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdpbnRlcmZhY2VzJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIEZpZWxkRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2FyZ3VtZW50cycsICd0eXBlJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW5wdXRWYWx1ZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICd0eXBlJywgJ2RlZmF1bHRWYWx1ZScsICdkaXJlY3RpdmVzJ10sXG4gIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbiAgVW5pb25UeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnLCAndHlwZXMnXSxcbiAgRW51bVR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcycsICd2YWx1ZXMnXSxcbiAgRW51bVZhbHVlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIERpcmVjdGl2ZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdhcmd1bWVudHMnLCAnbG9jYXRpb25zJ10sXG4gIFNjaGVtYUV4dGVuc2lvbjogWydkaXJlY3RpdmVzJywgJ29wZXJhdGlvblR5cGVzJ10sXG4gIFNjYWxhclR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJ10sXG4gIE9iamVjdFR5cGVFeHRlbnNpb246IFsnbmFtZScsICdpbnRlcmZhY2VzJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIEludGVyZmFjZVR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBVbmlvblR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJywgJ3R5cGVzJ10sXG4gIEVudW1UeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICd2YWx1ZXMnXSxcbiAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXVxufTtcbmV4cG9ydHMuUXVlcnlEb2N1bWVudEtleXMgPSBRdWVyeURvY3VtZW50S2V5cztcbnZhciBCUkVBSyA9IHt9O1xuLyoqXG4gKiB2aXNpdCgpIHdpbGwgd2FsayB0aHJvdWdoIGFuIEFTVCB1c2luZyBhIGRlcHRoIGZpcnN0IHRyYXZlcnNhbCwgY2FsbGluZ1xuICogdGhlIHZpc2l0b3IncyBlbnRlciBmdW5jdGlvbiBhdCBlYWNoIG5vZGUgaW4gdGhlIHRyYXZlcnNhbCwgYW5kIGNhbGxpbmcgdGhlXG4gKiBsZWF2ZSBmdW5jdGlvbiBhZnRlciB2aXNpdGluZyB0aGF0IG5vZGUgYW5kIGFsbCBvZiBpdHMgY2hpbGQgbm9kZXMuXG4gKlxuICogQnkgcmV0dXJuaW5nIGRpZmZlcmVudCB2YWx1ZXMgZnJvbSB0aGUgZW50ZXIgYW5kIGxlYXZlIGZ1bmN0aW9ucywgdGhlXG4gKiBiZWhhdmlvciBvZiB0aGUgdmlzaXRvciBjYW4gYmUgYWx0ZXJlZCwgaW5jbHVkaW5nIHNraXBwaW5nIG92ZXIgYSBzdWItdHJlZSBvZlxuICogdGhlIEFTVCAoYnkgcmV0dXJuaW5nIGZhbHNlKSwgZWRpdGluZyB0aGUgQVNUIGJ5IHJldHVybmluZyBhIHZhbHVlIG9yIG51bGxcbiAqIHRvIHJlbW92ZSB0aGUgdmFsdWUsIG9yIHRvIHN0b3AgdGhlIHdob2xlIHRyYXZlcnNhbCBieSByZXR1cm5pbmcgQlJFQUsuXG4gKlxuICogV2hlbiB1c2luZyB2aXNpdCgpIHRvIGVkaXQgYW4gQVNULCB0aGUgb3JpZ2luYWwgQVNUIHdpbGwgbm90IGJlIG1vZGlmaWVkLCBhbmRcbiAqIGEgbmV3IHZlcnNpb24gb2YgdGhlIEFTVCB3aXRoIHRoZSBjaGFuZ2VzIGFwcGxpZWQgd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoZVxuICogdmlzaXQgZnVuY3Rpb24uXG4gKlxuICogICAgIGNvbnN0IGVkaXRlZEFTVCA9IHZpc2l0KGFzdCwge1xuICogICAgICAgZW50ZXIobm9kZSwga2V5LCBwYXJlbnQsIHBhdGgsIGFuY2VzdG9ycykge1xuICogICAgICAgICAvLyBAcmV0dXJuXG4gKiAgICAgICAgIC8vICAgdW5kZWZpbmVkOiBubyBhY3Rpb25cbiAqICAgICAgICAgLy8gICBmYWxzZTogc2tpcCB2aXNpdGluZyB0aGlzIG5vZGVcbiAqICAgICAgICAgLy8gICB2aXNpdG9yLkJSRUFLOiBzdG9wIHZpc2l0aW5nIGFsdG9nZXRoZXJcbiAqICAgICAgICAgLy8gICBudWxsOiBkZWxldGUgdGhpcyBub2RlXG4gKiAgICAgICAgIC8vICAgYW55IHZhbHVlOiByZXBsYWNlIHRoaXMgbm9kZSB3aXRoIHRoZSByZXR1cm5lZCB2YWx1ZVxuICogICAgICAgfSxcbiAqICAgICAgIGxlYXZlKG5vZGUsIGtleSwgcGFyZW50LCBwYXRoLCBhbmNlc3RvcnMpIHtcbiAqICAgICAgICAgLy8gQHJldHVyblxuICogICAgICAgICAvLyAgIHVuZGVmaW5lZDogbm8gYWN0aW9uXG4gKiAgICAgICAgIC8vICAgZmFsc2U6IG5vIGFjdGlvblxuICogICAgICAgICAvLyAgIHZpc2l0b3IuQlJFQUs6IHN0b3AgdmlzaXRpbmcgYWx0b2dldGhlclxuICogICAgICAgICAvLyAgIG51bGw6IGRlbGV0ZSB0aGlzIG5vZGVcbiAqICAgICAgICAgLy8gICBhbnkgdmFsdWU6IHJlcGxhY2UgdGhpcyBub2RlIHdpdGggdGhlIHJldHVybmVkIHZhbHVlXG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogQWx0ZXJuYXRpdmVseSB0byBwcm92aWRpbmcgZW50ZXIoKSBhbmQgbGVhdmUoKSBmdW5jdGlvbnMsIGEgdmlzaXRvciBjYW5cbiAqIGluc3RlYWQgcHJvdmlkZSBmdW5jdGlvbnMgbmFtZWQgdGhlIHNhbWUgYXMgdGhlIGtpbmRzIG9mIEFTVCBub2Rlcywgb3JcbiAqIGVudGVyL2xlYXZlIHZpc2l0b3JzIGF0IGEgbmFtZWQga2V5LCBsZWFkaW5nIHRvIGZvdXIgcGVybXV0YXRpb25zIG9mXG4gKiB2aXNpdG9yIEFQSTpcbiAqXG4gKiAxKSBOYW1lZCB2aXNpdG9ycyB0cmlnZ2VyZWQgd2hlbiBlbnRlcmluZyBhIG5vZGUgYSBzcGVjaWZpYyBraW5kLlxuICpcbiAqICAgICB2aXNpdChhc3QsIHtcbiAqICAgICAgIEtpbmQobm9kZSkge1xuICogICAgICAgICAvLyBlbnRlciB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgICAgfVxuICogICAgIH0pXG4gKlxuICogMikgTmFtZWQgdmlzaXRvcnMgdGhhdCB0cmlnZ2VyIHVwb24gZW50ZXJpbmcgYW5kIGxlYXZpbmcgYSBub2RlIG9mXG4gKiAgICBhIHNwZWNpZmljIGtpbmQuXG4gKlxuICogICAgIHZpc2l0KGFzdCwge1xuICogICAgICAgS2luZDoge1xuICogICAgICAgICBlbnRlcihub2RlKSB7XG4gKiAgICAgICAgICAgLy8gZW50ZXIgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgICAgfVxuICogICAgICAgICBsZWF2ZShub2RlKSB7XG4gKiAgICAgICAgICAgLy8gbGVhdmUgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH0pXG4gKlxuICogMykgR2VuZXJpYyB2aXNpdG9ycyB0aGF0IHRyaWdnZXIgdXBvbiBlbnRlcmluZyBhbmQgbGVhdmluZyBhbnkgbm9kZS5cbiAqXG4gKiAgICAgdmlzaXQoYXN0LCB7XG4gKiAgICAgICBlbnRlcihub2RlKSB7XG4gKiAgICAgICAgIC8vIGVudGVyIGFueSBub2RlXG4gKiAgICAgICB9LFxuICogICAgICAgbGVhdmUobm9kZSkge1xuICogICAgICAgICAvLyBsZWF2ZSBhbnkgbm9kZVxuICogICAgICAgfVxuICogICAgIH0pXG4gKlxuICogNCkgUGFyYWxsZWwgdmlzaXRvcnMgZm9yIGVudGVyaW5nIGFuZCBsZWF2aW5nIG5vZGVzIG9mIGEgc3BlY2lmaWMga2luZC5cbiAqXG4gKiAgICAgdmlzaXQoYXN0LCB7XG4gKiAgICAgICBlbnRlcjoge1xuICogICAgICAgICBLaW5kKG5vZGUpIHtcbiAqICAgICAgICAgICAvLyBlbnRlciB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgICAgICB9XG4gKiAgICAgICB9LFxuICogICAgICAgbGVhdmU6IHtcbiAqICAgICAgICAgS2luZChub2RlKSB7XG4gKiAgICAgICAgICAgLy8gbGVhdmUgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH0pXG4gKi9cblxuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuXG5mdW5jdGlvbiB2aXNpdChyb290LCB2aXNpdG9yKSB7XG4gIHZhciB2aXNpdG9yS2V5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogUXVlcnlEb2N1bWVudEtleXM7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYtaW5pdCAqL1xuICB2YXIgc3RhY2sgPSB1bmRlZmluZWQ7XG4gIHZhciBpbkFycmF5ID0gQXJyYXkuaXNBcnJheShyb290KTtcbiAgdmFyIGtleXMgPSBbcm9vdF07XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgZWRpdHMgPSBbXTtcbiAgdmFyIG5vZGUgPSB1bmRlZmluZWQ7XG4gIHZhciBrZXkgPSB1bmRlZmluZWQ7XG4gIHZhciBwYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHZhciBwYXRoID0gW107XG4gIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgdmFyIG5ld1Jvb3QgPSByb290O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmLWluaXQgKi9cblxuICBkbyB7XG4gICAgaW5kZXgrKztcbiAgICB2YXIgaXNMZWF2aW5nID0gaW5kZXggPT09IGtleXMubGVuZ3RoO1xuICAgIHZhciBpc0VkaXRlZCA9IGlzTGVhdmluZyAmJiBlZGl0cy5sZW5ndGggIT09IDA7XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBrZXkgPSBhbmNlc3RvcnMubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IGFuY2VzdG9ycy5wb3AoKTtcblxuICAgICAgaWYgKGlzRWRpdGVkKSB7XG4gICAgICAgIGlmIChpbkFycmF5KSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuc2xpY2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY2xvbmUgPSB7fTtcblxuICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX09iamVjdCRrZXlzID0gT2JqZWN0LmtleXMobm9kZSk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGsgPSBfT2JqZWN0JGtleXNbX2ldO1xuICAgICAgICAgICAgY2xvbmVba10gPSBub2RlW2tdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGUgPSBjbG9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlZGl0T2Zmc2V0ID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgZWRpdHMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgdmFyIGVkaXRLZXkgPSBlZGl0c1tpaV1bMF07XG4gICAgICAgICAgdmFyIGVkaXRWYWx1ZSA9IGVkaXRzW2lpXVsxXTtcblxuICAgICAgICAgIGlmIChpbkFycmF5KSB7XG4gICAgICAgICAgICBlZGl0S2V5IC09IGVkaXRPZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGluQXJyYXkgJiYgZWRpdFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnNwbGljZShlZGl0S2V5LCAxKTtcbiAgICAgICAgICAgIGVkaXRPZmZzZXQrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZVtlZGl0S2V5XSA9IGVkaXRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW5kZXggPSBzdGFjay5pbmRleDtcbiAgICAgIGtleXMgPSBzdGFjay5rZXlzO1xuICAgICAgZWRpdHMgPSBzdGFjay5lZGl0cztcbiAgICAgIGluQXJyYXkgPSBzdGFjay5pbkFycmF5O1xuICAgICAgc3RhY2sgPSBzdGFjay5wcmV2O1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXkgPSBwYXJlbnQgPyBpbkFycmF5ID8gaW5kZXggOiBrZXlzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIG5vZGUgPSBwYXJlbnQgPyBwYXJlbnRba2V5XSA6IG5ld1Jvb3Q7XG5cbiAgICAgIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXRoLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gdm9pZCAwO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICBpZiAoIWlzTm9kZShub2RlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQVNUIE5vZGU6ICcgKyAoMCwgX2luc3BlY3QuZGVmYXVsdCkobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlzaXRGbiA9IGdldFZpc2l0Rm4odmlzaXRvciwgbm9kZS5raW5kLCBpc0xlYXZpbmcpO1xuXG4gICAgICBpZiAodmlzaXRGbikge1xuICAgICAgICByZXN1bHQgPSB2aXNpdEZuLmNhbGwodmlzaXRvciwgbm9kZSwga2V5LCBwYXJlbnQsIHBhdGgsIGFuY2VzdG9ycyk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gQlJFQUspIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKCFpc0xlYXZpbmcpIHtcbiAgICAgICAgICAgIHBhdGgucG9wKCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlZGl0cy5wdXNoKFtrZXksIHJlc3VsdF0pO1xuXG4gICAgICAgICAgaWYgKCFpc0xlYXZpbmcpIHtcbiAgICAgICAgICAgIGlmIChpc05vZGUocmVzdWx0KSkge1xuICAgICAgICAgICAgICBub2RlID0gcmVzdWx0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIGlzRWRpdGVkKSB7XG4gICAgICBlZGl0cy5wdXNoKFtrZXksIG5vZGVdKTtcbiAgICB9XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBwYXRoLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFjayA9IHtcbiAgICAgICAgaW5BcnJheTogaW5BcnJheSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICBlZGl0czogZWRpdHMsXG4gICAgICAgIHByZXY6IHN0YWNrXG4gICAgICB9O1xuICAgICAgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkobm9kZSk7XG4gICAgICBrZXlzID0gaW5BcnJheSA/IG5vZGUgOiB2aXNpdG9yS2V5c1tub2RlLmtpbmRdIHx8IFtdO1xuICAgICAgaW5kZXggPSAtMTtcbiAgICAgIGVkaXRzID0gW107XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gbm9kZTtcbiAgICB9XG4gIH0gd2hpbGUgKHN0YWNrICE9PSB1bmRlZmluZWQpO1xuXG4gIGlmIChlZGl0cy5sZW5ndGggIT09IDApIHtcbiAgICBuZXdSb290ID0gZWRpdHNbZWRpdHMubGVuZ3RoIC0gMV1bMV07XG4gIH1cblxuICByZXR1cm4gbmV3Um9vdDtcbn1cblxuZnVuY3Rpb24gaXNOb2RlKG1heWJlTm9kZSkge1xuICByZXR1cm4gQm9vbGVhbihtYXliZU5vZGUgJiYgdHlwZW9mIG1heWJlTm9kZS5raW5kID09PSAnc3RyaW5nJyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmlzaXRvciBpbnN0YW5jZSB3aGljaCBkZWxlZ2F0ZXMgdG8gbWFueSB2aXNpdG9ycyB0byBydW4gaW5cbiAqIHBhcmFsbGVsLiBFYWNoIHZpc2l0b3Igd2lsbCBiZSB2aXNpdGVkIGZvciBlYWNoIG5vZGUgYmVmb3JlIG1vdmluZyBvbi5cbiAqXG4gKiBJZiBhIHByaW9yIHZpc2l0b3IgZWRpdHMgYSBub2RlLCBubyBmb2xsb3dpbmcgdmlzaXRvcnMgd2lsbCBzZWUgdGhhdCBub2RlLlxuICovXG5cblxuZnVuY3Rpb24gdmlzaXRJblBhcmFsbGVsKHZpc2l0b3JzKSB7XG4gIHZhciBza2lwcGluZyA9IG5ldyBBcnJheSh2aXNpdG9ycy5sZW5ndGgpO1xuICByZXR1cm4ge1xuICAgIGVudGVyOiBmdW5jdGlvbiBlbnRlcihub2RlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpc2l0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghc2tpcHBpbmdbaV0pIHtcbiAgICAgICAgICB2YXIgZm4gPSBnZXRWaXNpdEZuKHZpc2l0b3JzW2ldLCBub2RlLmtpbmQsXG4gICAgICAgICAgLyogaXNMZWF2aW5nICovXG4gICAgICAgICAgZmFsc2UpO1xuXG4gICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkodmlzaXRvcnNbaV0sIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSBCUkVBSykge1xuICAgICAgICAgICAgICBza2lwcGluZ1tpXSA9IEJSRUFLO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGVhdmU6IGZ1bmN0aW9uIGxlYXZlKG5vZGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlzaXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFza2lwcGluZ1tpXSkge1xuICAgICAgICAgIHZhciBmbiA9IGdldFZpc2l0Rm4odmlzaXRvcnNbaV0sIG5vZGUua2luZCxcbiAgICAgICAgICAvKiBpc0xlYXZpbmcgKi9cbiAgICAgICAgICB0cnVlKTtcblxuICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZuLmFwcGx5KHZpc2l0b3JzW2ldLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBCUkVBSykge1xuICAgICAgICAgICAgICBza2lwcGluZ1tpXSA9IEJSRUFLO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNraXBwaW5nW2ldID09PSBub2RlKSB7XG4gICAgICAgICAgc2tpcHBpbmdbaV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZpc2l0b3IgaW5zdGFuY2Ugd2hpY2ggbWFpbnRhaW5zIGEgcHJvdmlkZWQgVHlwZUluZm8gaW5zdGFuY2VcbiAqIGFsb25nIHdpdGggdmlzaXRpbmcgdmlzaXRvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZpc2l0V2l0aFR5cGVJbmZvKHR5cGVJbmZvLCB2aXNpdG9yKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKG5vZGUpIHtcbiAgICAgIHR5cGVJbmZvLmVudGVyKG5vZGUpO1xuICAgICAgdmFyIGZuID0gZ2V0VmlzaXRGbih2aXNpdG9yLCBub2RlLmtpbmQsXG4gICAgICAvKiBpc0xlYXZpbmcgKi9cbiAgICAgIGZhbHNlKTtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh2aXNpdG9yLCBhcmd1bWVudHMpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHR5cGVJbmZvLmxlYXZlKG5vZGUpO1xuXG4gICAgICAgICAgaWYgKGlzTm9kZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0eXBlSW5mby5lbnRlcihyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUobm9kZSkge1xuICAgICAgdmFyIGZuID0gZ2V0VmlzaXRGbih2aXNpdG9yLCBub2RlLmtpbmQsXG4gICAgICAvKiBpc0xlYXZpbmcgKi9cbiAgICAgIHRydWUpO1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KHZpc2l0b3IsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHR5cGVJbmZvLmxlYXZlKG5vZGUpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG59XG4vKipcbiAqIEdpdmVuIGEgdmlzaXRvciBpbnN0YW5jZSwgaWYgaXQgaXMgbGVhdmluZyBvciBub3QsIGFuZCBhIG5vZGUga2luZCwgcmV0dXJuXG4gKiB0aGUgZnVuY3Rpb24gdGhlIHZpc2l0b3IgcnVudGltZSBzaG91bGQgY2FsbC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFZpc2l0Rm4odmlzaXRvciwga2luZCwgaXNMZWF2aW5nKSB7XG4gIHZhciBraW5kVmlzaXRvciA9IHZpc2l0b3Jba2luZF07XG5cbiAgaWYgKGtpbmRWaXNpdG9yKSB7XG4gICAgaWYgKCFpc0xlYXZpbmcgJiYgdHlwZW9mIGtpbmRWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyB7IEtpbmQoKSB7fSB9XG4gICAgICByZXR1cm4ga2luZFZpc2l0b3I7XG4gICAgfVxuXG4gICAgdmFyIGtpbmRTcGVjaWZpY1Zpc2l0b3IgPSBpc0xlYXZpbmcgPyBraW5kVmlzaXRvci5sZWF2ZSA6IGtpbmRWaXNpdG9yLmVudGVyO1xuXG4gICAgaWYgKHR5cGVvZiBraW5kU3BlY2lmaWNWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyB7IEtpbmQ6IHsgZW50ZXIoKSB7fSwgbGVhdmUoKSB7fSB9IH1cbiAgICAgIHJldHVybiBraW5kU3BlY2lmaWNWaXNpdG9yO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc3BlY2lmaWNWaXNpdG9yID0gaXNMZWF2aW5nID8gdmlzaXRvci5sZWF2ZSA6IHZpc2l0b3IuZW50ZXI7XG5cbiAgICBpZiAoc3BlY2lmaWNWaXNpdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIHNwZWNpZmljVmlzaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyB7IGVudGVyKCkge30sIGxlYXZlKCkge30gfVxuICAgICAgICByZXR1cm4gc3BlY2lmaWNWaXNpdG9yO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3BlY2lmaWNLaW5kVmlzaXRvciA9IHNwZWNpZmljVmlzaXRvcltraW5kXTtcblxuICAgICAgaWYgKHR5cGVvZiBzcGVjaWZpY0tpbmRWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIHsgZW50ZXI6IHsgS2luZCgpIHt9IH0sIGxlYXZlOiB7IEtpbmQoKSB7fSB9IH1cbiAgICAgICAgcmV0dXJuIHNwZWNpZmljS2luZFZpc2l0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyB2aXNpdCB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvdmlzaXRvcic7XG5pbXBvcnQgeyBJbnZhcmlhbnRFcnJvciwgaW52YXJpYW50IH0gZnJvbSAndHMtaW52YXJpYW50JztcbmltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICdmYXN0LWpzb24tc3RhYmxlLXN0cmluZ2lmeSc7XG5leHBvcnQgeyBlcXVhbCBhcyBpc0VxdWFsIH0gZnJvbSAnQHdyeS9lcXVhbGl0eSc7XG5cbmZ1bmN0aW9uIGlzU2NhbGFyVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gWydTdHJpbmdWYWx1ZScsICdCb29sZWFuVmFsdWUnLCAnRW51bVZhbHVlJ10uaW5kZXhPZih2YWx1ZS5raW5kKSA+IC0xO1xufVxuZnVuY3Rpb24gaXNOdW1iZXJWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBbJ0ludFZhbHVlJywgJ0Zsb2F0VmFsdWUnXS5pbmRleE9mKHZhbHVlLmtpbmQpID4gLTE7XG59XG5mdW5jdGlvbiBpc1N0cmluZ1ZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmtpbmQgPT09ICdTdHJpbmdWYWx1ZSc7XG59XG5mdW5jdGlvbiBpc0Jvb2xlYW5WYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5raW5kID09PSAnQm9vbGVhblZhbHVlJztcbn1cbmZ1bmN0aW9uIGlzSW50VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUua2luZCA9PT0gJ0ludFZhbHVlJztcbn1cbmZ1bmN0aW9uIGlzRmxvYXRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5raW5kID09PSAnRmxvYXRWYWx1ZSc7XG59XG5mdW5jdGlvbiBpc1ZhcmlhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmtpbmQgPT09ICdWYXJpYWJsZSc7XG59XG5mdW5jdGlvbiBpc09iamVjdFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmtpbmQgPT09ICdPYmplY3RWYWx1ZSc7XG59XG5mdW5jdGlvbiBpc0xpc3RWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5raW5kID09PSAnTGlzdFZhbHVlJztcbn1cbmZ1bmN0aW9uIGlzRW51bVZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmtpbmQgPT09ICdFbnVtVmFsdWUnO1xufVxuZnVuY3Rpb24gaXNOdWxsVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUua2luZCA9PT0gJ051bGxWYWx1ZSc7XG59XG5mdW5jdGlvbiB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24oYXJnT2JqLCBuYW1lLCB2YWx1ZSwgdmFyaWFibGVzKSB7XG4gICAgaWYgKGlzSW50VmFsdWUodmFsdWUpIHx8IGlzRmxvYXRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgYXJnT2JqW25hbWUudmFsdWVdID0gTnVtYmVyKHZhbHVlLnZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNCb29sZWFuVmFsdWUodmFsdWUpIHx8IGlzU3RyaW5nVmFsdWUodmFsdWUpKSB7XG4gICAgICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IHZhbHVlLnZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdFZhbHVlKHZhbHVlKSkge1xuICAgICAgICB2YXIgbmVzdGVkQXJnT2JqXzEgPSB7fTtcbiAgICAgICAgdmFsdWUuZmllbGRzLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKG5lc3RlZEFyZ09ial8xLCBvYmoubmFtZSwgb2JqLnZhbHVlLCB2YXJpYWJsZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXJnT2JqW25hbWUudmFsdWVdID0gbmVzdGVkQXJnT2JqXzE7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVmFyaWFibGUodmFsdWUpKSB7XG4gICAgICAgIHZhciB2YXJpYWJsZVZhbHVlID0gKHZhcmlhYmxlcyB8fCB7fSlbdmFsdWUubmFtZS52YWx1ZV07XG4gICAgICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IHZhcmlhYmxlVmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTGlzdFZhbHVlKHZhbHVlKSkge1xuICAgICAgICBhcmdPYmpbbmFtZS52YWx1ZV0gPSB2YWx1ZS52YWx1ZXMubWFwKGZ1bmN0aW9uIChsaXN0VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBuZXN0ZWRBcmdBcnJheU9iaiA9IHt9O1xuICAgICAgICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKG5lc3RlZEFyZ0FycmF5T2JqLCBuYW1lLCBsaXN0VmFsdWUsIHZhcmlhYmxlcyk7XG4gICAgICAgICAgICByZXR1cm4gbmVzdGVkQXJnQXJyYXlPYmpbbmFtZS52YWx1ZV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0VudW1WYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgYXJnT2JqW25hbWUudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTnVsbFZhbHVlKHZhbHVlKSkge1xuICAgICAgICBhcmdPYmpbbmFtZS52YWx1ZV0gPSBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gbmV3IEludmFyaWFudEVycm9yKDE3KSA6IG5ldyBJbnZhcmlhbnRFcnJvcihcIlRoZSBpbmxpbmUgYXJndW1lbnQgXFxcIlwiICsgbmFtZS52YWx1ZSArIFwiXFxcIiBvZiBraW5kIFxcXCJcIiArIHZhbHVlLmtpbmQgKyBcIlxcXCJcIiArXG4gICAgICAgICAgICAnaXMgbm90IHN1cHBvcnRlZC4gVXNlIHZhcmlhYmxlcyBpbnN0ZWFkIG9mIGlubGluZSBhcmd1bWVudHMgdG8gJyArXG4gICAgICAgICAgICAnb3ZlcmNvbWUgdGhpcyBsaW1pdGF0aW9uLicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0b3JlS2V5TmFtZUZyb21GaWVsZChmaWVsZCwgdmFyaWFibGVzKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXNPYmogPSBudWxsO1xuICAgIGlmIChmaWVsZC5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGRpcmVjdGl2ZXNPYmogPSB7fTtcbiAgICAgICAgZmllbGQuZGlyZWN0aXZlcy5mb3JFYWNoKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdID0ge307XG4gICAgICAgICAgICBpZiAoZGlyZWN0aXZlLmFyZ3VtZW50cykge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5hcmd1bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfYS5uYW1lLCB2YWx1ZSA9IF9hLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdLCBuYW1lLCB2YWx1ZSwgdmFyaWFibGVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBhcmdPYmogPSBudWxsO1xuICAgIGlmIChmaWVsZC5hcmd1bWVudHMgJiYgZmllbGQuYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBhcmdPYmogPSB7fTtcbiAgICAgICAgZmllbGQuYXJndW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9hLm5hbWUsIHZhbHVlID0gX2EudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGFyZ09iaiwgbmFtZSwgdmFsdWUsIHZhcmlhYmxlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0U3RvcmVLZXlOYW1lKGZpZWxkLm5hbWUudmFsdWUsIGFyZ09iaiwgZGlyZWN0aXZlc09iaik7XG59XG52YXIgS05PV05fRElSRUNUSVZFUyA9IFtcbiAgICAnY29ubmVjdGlvbicsXG4gICAgJ2luY2x1ZGUnLFxuICAgICdza2lwJyxcbiAgICAnY2xpZW50JyxcbiAgICAncmVzdCcsXG4gICAgJ2V4cG9ydCcsXG5dO1xuZnVuY3Rpb24gZ2V0U3RvcmVLZXlOYW1lKGZpZWxkTmFtZSwgYXJncywgZGlyZWN0aXZlcykge1xuICAgIGlmIChkaXJlY3RpdmVzICYmXG4gICAgICAgIGRpcmVjdGl2ZXNbJ2Nvbm5lY3Rpb24nXSAmJlxuICAgICAgICBkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2tleSddKSB7XG4gICAgICAgIGlmIChkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2ZpbHRlciddICYmXG4gICAgICAgICAgICBkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2ZpbHRlciddLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJLZXlzID0gZGlyZWN0aXZlc1snY29ubmVjdGlvbiddWydmaWx0ZXInXVxuICAgICAgICAgICAgICAgID8gZGlyZWN0aXZlc1snY29ubmVjdGlvbiddWydmaWx0ZXInXVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICBmaWx0ZXJLZXlzLnNvcnQoKTtcbiAgICAgICAgICAgIHZhciBxdWVyeUFyZ3NfMSA9IGFyZ3M7XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRBcmdzXzEgPSB7fTtcbiAgICAgICAgICAgIGZpbHRlcktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRBcmdzXzFba2V5XSA9IHF1ZXJ5QXJnc18xW2tleV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2tleSddICsgXCIoXCIgKyBKU09OLnN0cmluZ2lmeShmaWx0ZXJlZEFyZ3NfMSkgKyBcIilcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2tleSddO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBjb21wbGV0ZUZpZWxkTmFtZSA9IGZpZWxkTmFtZTtcbiAgICBpZiAoYXJncykge1xuICAgICAgICB2YXIgc3RyaW5naWZpZWRBcmdzID0gc3RyaW5naWZ5KGFyZ3MpO1xuICAgICAgICBjb21wbGV0ZUZpZWxkTmFtZSArPSBcIihcIiArIHN0cmluZ2lmaWVkQXJncyArIFwiKVwiO1xuICAgIH1cbiAgICBpZiAoZGlyZWN0aXZlcykge1xuICAgICAgICBPYmplY3Qua2V5cyhkaXJlY3RpdmVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChLTk9XTl9ESVJFQ1RJVkVTLmluZGV4T2Yoa2V5KSAhPT0gLTEpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZXNba2V5XSAmJiBPYmplY3Qua2V5cyhkaXJlY3RpdmVzW2tleV0pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlRmllbGROYW1lICs9IFwiQFwiICsga2V5ICsgXCIoXCIgKyBKU09OLnN0cmluZ2lmeShkaXJlY3RpdmVzW2tleV0pICsgXCIpXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUZpZWxkTmFtZSArPSBcIkBcIiArIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wbGV0ZUZpZWxkTmFtZTtcbn1cbmZ1bmN0aW9uIGFyZ3VtZW50c09iamVjdEZyb21GaWVsZChmaWVsZCwgdmFyaWFibGVzKSB7XG4gICAgaWYgKGZpZWxkLmFyZ3VtZW50cyAmJiBmaWVsZC5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcmdPYmpfMSA9IHt9O1xuICAgICAgICBmaWVsZC5hcmd1bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX2EubmFtZSwgdmFsdWUgPSBfYS52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24oYXJnT2JqXzEsIG5hbWUsIHZhbHVlLCB2YXJpYWJsZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFyZ09ial8xO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc3VsdEtleU5hbWVGcm9tRmllbGQoZmllbGQpIHtcbiAgICByZXR1cm4gZmllbGQuYWxpYXMgPyBmaWVsZC5hbGlhcy52YWx1ZSA6IGZpZWxkLm5hbWUudmFsdWU7XG59XG5mdW5jdGlvbiBpc0ZpZWxkKHNlbGVjdGlvbikge1xuICAgIHJldHVybiBzZWxlY3Rpb24ua2luZCA9PT0gJ0ZpZWxkJztcbn1cbmZ1bmN0aW9uIGlzSW5saW5lRnJhZ21lbnQoc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbi5raW5kID09PSAnSW5saW5lRnJhZ21lbnQnO1xufVxuZnVuY3Rpb24gaXNJZFZhbHVlKGlkT2JqZWN0KSB7XG4gICAgcmV0dXJuIGlkT2JqZWN0ICYmXG4gICAgICAgIGlkT2JqZWN0LnR5cGUgPT09ICdpZCcgJiZcbiAgICAgICAgdHlwZW9mIGlkT2JqZWN0LmdlbmVyYXRlZCA9PT0gJ2Jvb2xlYW4nO1xufVxuZnVuY3Rpb24gdG9JZFZhbHVlKGlkQ29uZmlnLCBnZW5lcmF0ZWQpIHtcbiAgICBpZiAoZ2VuZXJhdGVkID09PSB2b2lkIDApIHsgZ2VuZXJhdGVkID0gZmFsc2U7IH1cbiAgICByZXR1cm4gX19hc3NpZ24oeyB0eXBlOiAnaWQnLCBnZW5lcmF0ZWQ6IGdlbmVyYXRlZCB9LCAodHlwZW9mIGlkQ29uZmlnID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHsgaWQ6IGlkQ29uZmlnLCB0eXBlbmFtZTogdW5kZWZpbmVkIH1cbiAgICAgICAgOiBpZENvbmZpZykpO1xufVxuZnVuY3Rpb24gaXNKc29uVmFsdWUoanNvbk9iamVjdCkge1xuICAgIHJldHVybiAoanNvbk9iamVjdCAhPSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBqc29uT2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBqc29uT2JqZWN0LnR5cGUgPT09ICdqc29uJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0VmFsdWVGcm9tVmFyaWFibGUobm9kZSkge1xuICAgIHRocm93IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IG5ldyBJbnZhcmlhbnRFcnJvcigxOCkgOiBuZXcgSW52YXJpYW50RXJyb3IoXCJWYXJpYWJsZSBub2RlcyBhcmUgbm90IHN1cHBvcnRlZCBieSB2YWx1ZUZyb21Ob2RlXCIpO1xufVxuZnVuY3Rpb24gdmFsdWVGcm9tTm9kZShub2RlLCBvblZhcmlhYmxlKSB7XG4gICAgaWYgKG9uVmFyaWFibGUgPT09IHZvaWQgMCkgeyBvblZhcmlhYmxlID0gZGVmYXVsdFZhbHVlRnJvbVZhcmlhYmxlOyB9XG4gICAgc3dpdGNoIChub2RlLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnVmFyaWFibGUnOlxuICAgICAgICAgICAgcmV0dXJuIG9uVmFyaWFibGUobm9kZSk7XG4gICAgICAgIGNhc2UgJ051bGxWYWx1ZSc6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY2FzZSAnSW50VmFsdWUnOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG5vZGUudmFsdWUsIDEwKTtcbiAgICAgICAgY2FzZSAnRmxvYXRWYWx1ZSc6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLnZhbHVlKTtcbiAgICAgICAgY2FzZSAnTGlzdFZhbHVlJzpcbiAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZhbHVlRnJvbU5vZGUodiwgb25WYXJpYWJsZSk7IH0pO1xuICAgICAgICBjYXNlICdPYmplY3RWYWx1ZSc6IHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IG5vZGUuZmllbGRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICB2YWx1ZVtmaWVsZC5uYW1lLnZhbHVlXSA9IHZhbHVlRnJvbU5vZGUoZmllbGQudmFsdWUsIG9uVmFyaWFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZUluZm9Gcm9tRmllbGQoZmllbGQsIHZhcmlhYmxlcykge1xuICAgIGlmIChmaWVsZC5kaXJlY3RpdmVzICYmIGZpZWxkLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmVPYmpfMSA9IHt9O1xuICAgICAgICBmaWVsZC5kaXJlY3RpdmVzLmZvckVhY2goZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgZGlyZWN0aXZlT2JqXzFbZGlyZWN0aXZlLm5hbWUudmFsdWVdID0gYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkKGRpcmVjdGl2ZSwgdmFyaWFibGVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmVPYmpfMTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBzaG91bGRJbmNsdWRlKHNlbGVjdGlvbiwgdmFyaWFibGVzKSB7XG4gICAgaWYgKHZhcmlhYmxlcyA9PT0gdm9pZCAwKSB7IHZhcmlhYmxlcyA9IHt9OyB9XG4gICAgcmV0dXJuIGdldEluY2x1c2lvbkRpcmVjdGl2ZXMoc2VsZWN0aW9uLmRpcmVjdGl2ZXMpLmV2ZXJ5KGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0gX2EuZGlyZWN0aXZlLCBpZkFyZ3VtZW50ID0gX2EuaWZBcmd1bWVudDtcbiAgICAgICAgdmFyIGV2YWxlZFZhbHVlID0gZmFsc2U7XG4gICAgICAgIGlmIChpZkFyZ3VtZW50LnZhbHVlLmtpbmQgPT09ICdWYXJpYWJsZScpIHtcbiAgICAgICAgICAgIGV2YWxlZFZhbHVlID0gdmFyaWFibGVzW2lmQXJndW1lbnQudmFsdWUubmFtZS52YWx1ZV07XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZXZhbGVkVmFsdWUgIT09IHZvaWQgMCwgMykgOiBpbnZhcmlhbnQoZXZhbGVkVmFsdWUgIT09IHZvaWQgMCwgXCJJbnZhbGlkIHZhcmlhYmxlIHJlZmVyZW5jZWQgaW4gQFwiICsgZGlyZWN0aXZlLm5hbWUudmFsdWUgKyBcIiBkaXJlY3RpdmUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPSBpZkFyZ3VtZW50LnZhbHVlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gJ3NraXAnID8gIWV2YWxlZFZhbHVlIDogZXZhbGVkVmFsdWU7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXREaXJlY3RpdmVOYW1lcyhkb2MpIHtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICB2aXNpdChkb2MsIHtcbiAgICAgICAgRGlyZWN0aXZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgbmFtZXMucHVzaChub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBuYW1lcztcbn1cbmZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXMobmFtZXMsIGRvYykge1xuICAgIHJldHVybiBnZXREaXJlY3RpdmVOYW1lcyhkb2MpLnNvbWUoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG5hbWVzLmluZGV4T2YobmFtZSkgPiAtMTsgfSk7XG59XG5mdW5jdGlvbiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIChkb2N1bWVudCAmJlxuICAgICAgICBoYXNEaXJlY3RpdmVzKFsnY2xpZW50J10sIGRvY3VtZW50KSAmJlxuICAgICAgICBoYXNEaXJlY3RpdmVzKFsnZXhwb3J0J10sIGRvY3VtZW50KSk7XG59XG5mdW5jdGlvbiBpc0luY2x1c2lvbkRpcmVjdGl2ZShfYSkge1xuICAgIHZhciB2YWx1ZSA9IF9hLm5hbWUudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID09PSAnc2tpcCcgfHwgdmFsdWUgPT09ICdpbmNsdWRlJztcbn1cbmZ1bmN0aW9uIGdldEluY2x1c2lvbkRpcmVjdGl2ZXMoZGlyZWN0aXZlcykge1xuICAgIHJldHVybiBkaXJlY3RpdmVzID8gZGlyZWN0aXZlcy5maWx0ZXIoaXNJbmNsdXNpb25EaXJlY3RpdmUpLm1hcChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmVBcmd1bWVudHMgPSBkaXJlY3RpdmUuYXJndW1lbnRzO1xuICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZGlyZWN0aXZlQXJndW1lbnRzICYmIGRpcmVjdGl2ZUFyZ3VtZW50cy5sZW5ndGggPT09IDEsIDQpIDogaW52YXJpYW50KGRpcmVjdGl2ZUFyZ3VtZW50cyAmJiBkaXJlY3RpdmVBcmd1bWVudHMubGVuZ3RoID09PSAxLCBcIkluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzIGZvciB0aGUgQFwiICsgZGlyZWN0aXZlTmFtZSArIFwiIGRpcmVjdGl2ZS5cIik7XG4gICAgICAgIHZhciBpZkFyZ3VtZW50ID0gZGlyZWN0aXZlQXJndW1lbnRzWzBdO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoaWZBcmd1bWVudC5uYW1lICYmIGlmQXJndW1lbnQubmFtZS52YWx1ZSA9PT0gJ2lmJywgNSkgOiBpbnZhcmlhbnQoaWZBcmd1bWVudC5uYW1lICYmIGlmQXJndW1lbnQubmFtZS52YWx1ZSA9PT0gJ2lmJywgXCJJbnZhbGlkIGFyZ3VtZW50IGZvciB0aGUgQFwiICsgZGlyZWN0aXZlTmFtZSArIFwiIGRpcmVjdGl2ZS5cIik7XG4gICAgICAgIHZhciBpZlZhbHVlID0gaWZBcmd1bWVudC52YWx1ZTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGlmVmFsdWUgJiZcbiAgICAgICAgICAgIChpZlZhbHVlLmtpbmQgPT09ICdWYXJpYWJsZScgfHwgaWZWYWx1ZS5raW5kID09PSAnQm9vbGVhblZhbHVlJyksIDYpIDogaW52YXJpYW50KGlmVmFsdWUgJiZcbiAgICAgICAgICAgIChpZlZhbHVlLmtpbmQgPT09ICdWYXJpYWJsZScgfHwgaWZWYWx1ZS5raW5kID09PSAnQm9vbGVhblZhbHVlJyksIFwiQXJndW1lbnQgZm9yIHRoZSBAXCIgKyBkaXJlY3RpdmVOYW1lICsgXCIgZGlyZWN0aXZlIG11c3QgYmUgYSB2YXJpYWJsZSBvciBhIGJvb2xlYW4gdmFsdWUuXCIpO1xuICAgICAgICByZXR1cm4geyBkaXJlY3RpdmU6IGRpcmVjdGl2ZSwgaWZBcmd1bWVudDogaWZBcmd1bWVudCB9O1xuICAgIH0pIDogW107XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50UXVlcnlEb2N1bWVudChkb2N1bWVudCwgZnJhZ21lbnROYW1lKSB7XG4gICAgdmFyIGFjdHVhbEZyYWdtZW50TmFtZSA9IGZyYWdtZW50TmFtZTtcbiAgICB2YXIgZnJhZ21lbnRzID0gW107XG4gICAgZG9jdW1lbnQuZGVmaW5pdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgICAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IG5ldyBJbnZhcmlhbnRFcnJvcigxKSA6IG5ldyBJbnZhcmlhbnRFcnJvcihcIkZvdW5kIGEgXCIgKyBkZWZpbml0aW9uLm9wZXJhdGlvbiArIFwiIG9wZXJhdGlvblwiICsgKGRlZmluaXRpb24ubmFtZSA/IFwiIG5hbWVkICdcIiArIGRlZmluaXRpb24ubmFtZS52YWx1ZSArIFwiJ1wiIDogJycpICsgXCIuIFwiICtcbiAgICAgICAgICAgICAgICAnTm8gb3BlcmF0aW9ucyBhcmUgYWxsb3dlZCB3aGVuIHVzaW5nIGEgZnJhZ21lbnQgYXMgYSBxdWVyeS4gT25seSBmcmFnbWVudHMgYXJlIGFsbG93ZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gJ0ZyYWdtZW50RGVmaW5pdGlvbicpIHtcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBhY3R1YWxGcmFnbWVudE5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmcmFnbWVudHMubGVuZ3RoID09PSAxLCAyKSA6IGludmFyaWFudChmcmFnbWVudHMubGVuZ3RoID09PSAxLCBcIkZvdW5kIFwiICsgZnJhZ21lbnRzLmxlbmd0aCArIFwiIGZyYWdtZW50cy4gYGZyYWdtZW50TmFtZWAgbXVzdCBiZSBwcm92aWRlZCB3aGVuIHRoZXJlIGlzIG5vdCBleGFjdGx5IDEgZnJhZ21lbnQuXCIpO1xuICAgICAgICBhY3R1YWxGcmFnbWVudE5hbWUgPSBmcmFnbWVudHNbMF0ubmFtZS52YWx1ZTtcbiAgICB9XG4gICAgdmFyIHF1ZXJ5ID0gX19hc3NpZ24oe30sIGRvY3VtZW50LCB7IGRlZmluaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2luZDogJ09wZXJhdGlvbkRlZmluaXRpb24nLFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25TZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ1NlbGVjdGlvblNldCcsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiAnRnJhZ21lbnRTcHJlYWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogJ05hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYWN0dWFsRnJhZ21lbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgIF0uY29uY2F0KGRvY3VtZW50LmRlZmluaXRpb25zKSB9KTtcbiAgICByZXR1cm4gcXVlcnk7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAndW5kZWZpbmVkJyB8fCBzb3VyY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gZ2V0TXV0YXRpb25EZWZpbml0aW9uKGRvYykge1xuICAgIGNoZWNrRG9jdW1lbnQoZG9jKTtcbiAgICB2YXIgbXV0YXRpb25EZWYgPSBkb2MuZGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uLmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJyAmJlxuICAgICAgICAgICAgZGVmaW5pdGlvbi5vcGVyYXRpb24gPT09ICdtdXRhdGlvbic7XG4gICAgfSlbMF07XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KG11dGF0aW9uRGVmLCA3KSA6IGludmFyaWFudChtdXRhdGlvbkRlZiwgJ011c3QgY29udGFpbiBhIG11dGF0aW9uIGRlZmluaXRpb24uJyk7XG4gICAgcmV0dXJuIG11dGF0aW9uRGVmO1xufVxuZnVuY3Rpb24gY2hlY2tEb2N1bWVudChkb2MpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZG9jICYmIGRvYy5raW5kID09PSAnRG9jdW1lbnQnLCA4KSA6IGludmFyaWFudChkb2MgJiYgZG9jLmtpbmQgPT09ICdEb2N1bWVudCcsIFwiRXhwZWN0aW5nIGEgcGFyc2VkIEdyYXBoUUwgZG9jdW1lbnQuIFBlcmhhcHMgeW91IG5lZWQgdG8gd3JhcCB0aGUgcXVlcnkgc3RyaW5nIGluIGEgXFxcImdxbFxcXCIgdGFnPyBodHRwOi8vZG9jcy5hcG9sbG9zdGFjay5jb20vYXBvbGxvLWNsaWVudC9jb3JlLmh0bWwjZ3FsXCIpO1xuICAgIHZhciBvcGVyYXRpb25zID0gZG9jLmRlZmluaXRpb25zXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQua2luZCAhPT0gJ0ZyYWdtZW50RGVmaW5pdGlvbic7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKGRlZmluaXRpb24ua2luZCAhPT0gJ09wZXJhdGlvbkRlZmluaXRpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBuZXcgSW52YXJpYW50RXJyb3IoOSkgOiBuZXcgSW52YXJpYW50RXJyb3IoXCJTY2hlbWEgdHlwZSBkZWZpbml0aW9ucyBub3QgYWxsb3dlZCBpbiBxdWVyaWVzLiBGb3VuZDogXFxcIlwiICsgZGVmaW5pdGlvbi5raW5kICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChvcGVyYXRpb25zLmxlbmd0aCA8PSAxLCAxMCkgOiBpbnZhcmlhbnQob3BlcmF0aW9ucy5sZW5ndGggPD0gMSwgXCJBbWJpZ3VvdXMgR3JhcGhRTCBkb2N1bWVudDogY29udGFpbnMgXCIgKyBvcGVyYXRpb25zLmxlbmd0aCArIFwiIG9wZXJhdGlvbnNcIik7XG4gICAgcmV0dXJuIGRvYztcbn1cbmZ1bmN0aW9uIGdldE9wZXJhdGlvbkRlZmluaXRpb24oZG9jKSB7XG4gICAgY2hlY2tEb2N1bWVudChkb2MpO1xuICAgIHJldHVybiBkb2MuZGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7IHJldHVybiBkZWZpbml0aW9uLmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJzsgfSlbMF07XG59XG5mdW5jdGlvbiBnZXRPcGVyYXRpb25EZWZpbml0aW9uT3JEaWUoZG9jdW1lbnQpIHtcbiAgICB2YXIgZGVmID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGRlZiwgMTEpIDogaW52YXJpYW50KGRlZiwgXCJHcmFwaFFMIGRvY3VtZW50IGlzIG1pc3NpbmcgYW4gb3BlcmF0aW9uXCIpO1xuICAgIHJldHVybiBkZWY7XG59XG5mdW5jdGlvbiBnZXRPcGVyYXRpb25OYW1lKGRvYykge1xuICAgIHJldHVybiAoZG9jLmRlZmluaXRpb25zXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb24ua2luZCA9PT0gJ09wZXJhdGlvbkRlZmluaXRpb24nICYmIGRlZmluaXRpb24ubmFtZTtcbiAgICB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lm5hbWUudmFsdWU7IH0pWzBdIHx8IG51bGwpO1xufVxuZnVuY3Rpb24gZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2MpIHtcbiAgICByZXR1cm4gZG9jLmRlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbiAoZGVmaW5pdGlvbikgeyByZXR1cm4gZGVmaW5pdGlvbi5raW5kID09PSAnRnJhZ21lbnREZWZpbml0aW9uJzsgfSk7XG59XG5mdW5jdGlvbiBnZXRRdWVyeURlZmluaXRpb24oZG9jKSB7XG4gICAgdmFyIHF1ZXJ5RGVmID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2MpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChxdWVyeURlZiAmJiBxdWVyeURlZi5vcGVyYXRpb24gPT09ICdxdWVyeScsIDEyKSA6IGludmFyaWFudChxdWVyeURlZiAmJiBxdWVyeURlZi5vcGVyYXRpb24gPT09ICdxdWVyeScsICdNdXN0IGNvbnRhaW4gYSBxdWVyeSBkZWZpbml0aW9uLicpO1xuICAgIHJldHVybiBxdWVyeURlZjtcbn1cbmZ1bmN0aW9uIGdldEZyYWdtZW50RGVmaW5pdGlvbihkb2MpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZG9jLmtpbmQgPT09ICdEb2N1bWVudCcsIDEzKSA6IGludmFyaWFudChkb2Mua2luZCA9PT0gJ0RvY3VtZW50JywgXCJFeHBlY3RpbmcgYSBwYXJzZWQgR3JhcGhRTCBkb2N1bWVudC4gUGVyaGFwcyB5b3UgbmVlZCB0byB3cmFwIHRoZSBxdWVyeSBzdHJpbmcgaW4gYSBcXFwiZ3FsXFxcIiB0YWc/IGh0dHA6Ly9kb2NzLmFwb2xsb3N0YWNrLmNvbS9hcG9sbG8tY2xpZW50L2NvcmUuaHRtbCNncWxcIik7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGRvYy5kZWZpbml0aW9ucy5sZW5ndGggPD0gMSwgMTQpIDogaW52YXJpYW50KGRvYy5kZWZpbml0aW9ucy5sZW5ndGggPD0gMSwgJ0ZyYWdtZW50IG11c3QgaGF2ZSBleGFjdGx5IG9uZSBkZWZpbml0aW9uLicpO1xuICAgIHZhciBmcmFnbWVudERlZiA9IGRvYy5kZWZpbml0aW9uc1swXTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZnJhZ21lbnREZWYua2luZCA9PT0gJ0ZyYWdtZW50RGVmaW5pdGlvbicsIDE1KSA6IGludmFyaWFudChmcmFnbWVudERlZi5raW5kID09PSAnRnJhZ21lbnREZWZpbml0aW9uJywgJ011c3QgYmUgYSBmcmFnbWVudCBkZWZpbml0aW9uLicpO1xuICAgIHJldHVybiBmcmFnbWVudERlZjtcbn1cbmZ1bmN0aW9uIGdldE1haW5EZWZpbml0aW9uKHF1ZXJ5RG9jKSB7XG4gICAgY2hlY2tEb2N1bWVudChxdWVyeURvYyk7XG4gICAgdmFyIGZyYWdtZW50RGVmaW5pdGlvbjtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcXVlcnlEb2MuZGVmaW5pdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBkZWZpbml0aW9uID0gX2FbX2ldO1xuICAgICAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBvcGVyYXRpb24gPSBkZWZpbml0aW9uLm9wZXJhdGlvbjtcbiAgICAgICAgICAgIGlmIChvcGVyYXRpb24gPT09ICdxdWVyeScgfHxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb24gPT09ICdtdXRhdGlvbicgfHxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb24gPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gJ0ZyYWdtZW50RGVmaW5pdGlvbicgJiYgIWZyYWdtZW50RGVmaW5pdGlvbikge1xuICAgICAgICAgICAgZnJhZ21lbnREZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhZ21lbnREZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiBmcmFnbWVudERlZmluaXRpb247XG4gICAgfVxuICAgIHRocm93IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IG5ldyBJbnZhcmlhbnRFcnJvcigxNikgOiBuZXcgSW52YXJpYW50RXJyb3IoJ0V4cGVjdGVkIGEgcGFyc2VkIEdyYXBoUUwgcXVlcnkgd2l0aCBhIHF1ZXJ5LCBtdXRhdGlvbiwgc3Vic2NyaXB0aW9uLCBvciBhIGZyYWdtZW50LicpO1xufVxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRNYXAoZnJhZ21lbnRzKSB7XG4gICAgaWYgKGZyYWdtZW50cyA9PT0gdm9pZCAwKSB7IGZyYWdtZW50cyA9IFtdOyB9XG4gICAgdmFyIHN5bVRhYmxlID0ge307XG4gICAgZnJhZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKGZyYWdtZW50KSB7XG4gICAgICAgIHN5bVRhYmxlW2ZyYWdtZW50Lm5hbWUudmFsdWVdID0gZnJhZ21lbnQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN5bVRhYmxlO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlcyhkZWZpbml0aW9uKSB7XG4gICAgaWYgKGRlZmluaXRpb24gJiZcbiAgICAgICAgZGVmaW5pdGlvbi52YXJpYWJsZURlZmluaXRpb25zICYmXG4gICAgICAgIGRlZmluaXRpb24udmFyaWFibGVEZWZpbml0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZXMgPSBkZWZpbml0aW9uLnZhcmlhYmxlRGVmaW5pdGlvbnNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gX2EuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgdmFyaWFibGUgPSBfYS52YXJpYWJsZSwgZGVmYXVsdFZhbHVlID0gX2EuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZU9iaiA9IHt9O1xuICAgICAgICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGRlZmF1bHRWYWx1ZU9iaiwgdmFyaWFibGUubmFtZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVPYmo7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXNzaWduLmFwcGx5KHZvaWQgMCwgW3t9XS5jb25jYXQoZGVmYXVsdFZhbHVlcykpO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5mdW5jdGlvbiB2YXJpYWJsZXNJbk9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgbmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgaWYgKG9wZXJhdGlvbi52YXJpYWJsZURlZmluaXRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBvcGVyYXRpb24udmFyaWFibGVEZWZpbml0aW9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBkZWZpbml0aW9uID0gX2FbX2ldO1xuICAgICAgICAgICAgbmFtZXMuYWRkKGRlZmluaXRpb24udmFyaWFibGUubmFtZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJJblBsYWNlKGFycmF5LCB0ZXN0LCBjb250ZXh0KSB7XG4gICAgdmFyIHRhcmdldCA9IDA7XG4gICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSwgaSkge1xuICAgICAgICBpZiAodGVzdC5jYWxsKHRoaXMsIGVsZW0sIGksIGFycmF5KSkge1xuICAgICAgICAgICAgYXJyYXlbdGFyZ2V0KytdID0gZWxlbTtcbiAgICAgICAgfVxuICAgIH0sIGNvbnRleHQpO1xuICAgIGFycmF5Lmxlbmd0aCA9IHRhcmdldDtcbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbnZhciBUWVBFTkFNRV9GSUVMRCA9IHtcbiAgICBraW5kOiAnRmllbGQnLFxuICAgIG5hbWU6IHtcbiAgICAgICAga2luZDogJ05hbWUnLFxuICAgICAgICB2YWx1ZTogJ19fdHlwZW5hbWUnLFxuICAgIH0sXG59O1xuZnVuY3Rpb24gaXNFbXB0eShvcCwgZnJhZ21lbnRzKSB7XG4gICAgcmV0dXJuIG9wLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbi5raW5kID09PSAnRnJhZ21lbnRTcHJlYWQnICYmXG4gICAgICAgICAgICBpc0VtcHR5KGZyYWdtZW50c1tzZWxlY3Rpb24ubmFtZS52YWx1ZV0sIGZyYWdtZW50cyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBudWxsSWZEb2NJc0VtcHR5KGRvYykge1xuICAgIHJldHVybiBpc0VtcHR5KGdldE9wZXJhdGlvbkRlZmluaXRpb24oZG9jKSB8fCBnZXRGcmFnbWVudERlZmluaXRpb24oZG9jKSwgY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2MpKSlcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogZG9jO1xufVxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTWF0Y2hlcihkaXJlY3RpdmVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRpcmVjdGl2ZU1hdGNoZXIoZGlyZWN0aXZlKSB7XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKGRpcikge1xuICAgICAgICAgICAgcmV0dXJuIChkaXIubmFtZSAmJiBkaXIubmFtZSA9PT0gZGlyZWN0aXZlLm5hbWUudmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgKGRpci50ZXN0ICYmIGRpci50ZXN0KGRpcmVjdGl2ZSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChkaXJlY3RpdmVzLCBkb2MpIHtcbiAgICB2YXIgdmFyaWFibGVzSW5Vc2UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciB2YXJpYWJsZXNUb1JlbW92ZSA9IFtdO1xuICAgIHZhciBmcmFnbWVudFNwcmVhZHNJblVzZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGZyYWdtZW50U3ByZWFkc1RvUmVtb3ZlID0gW107XG4gICAgdmFyIG1vZGlmaWVkRG9jID0gbnVsbElmRG9jSXNFbXB0eSh2aXNpdChkb2MsIHtcbiAgICAgICAgVmFyaWFibGU6IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSwgX2tleSwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5raW5kICE9PSAnVmFyaWFibGVEZWZpbml0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXNJblVzZVtub2RlLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBGaWVsZDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZXMgJiYgbm9kZS5kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaG91bGRSZW1vdmVGaWVsZCA9IGRpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoZGlyZWN0aXZlKSB7IHJldHVybiBkaXJlY3RpdmUucmVtb3ZlOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZFJlbW92ZUZpZWxkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRpcmVjdGl2ZXMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGlyZWN0aXZlcy5zb21lKGdldERpcmVjdGl2ZU1hdGNoZXIoZGlyZWN0aXZlcykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5hcmd1bWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFyZ3VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy52YWx1ZS5raW5kID09PSAnVmFyaWFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXNUb1JlbW92ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBhcmcudmFsdWUubmFtZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRBbGxGcmFnbWVudFNwcmVhZHNGcm9tU2VsZWN0aW9uU2V0KG5vZGUuc2VsZWN0aW9uU2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50U3ByZWFkc1RvUmVtb3ZlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZnJhZy5uYW1lLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgRnJhZ21lbnRTcHJlYWQ6IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50U3ByZWFkc0luVXNlW25vZGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgRGlyZWN0aXZlOiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0RGlyZWN0aXZlTWF0Y2hlcihkaXJlY3RpdmVzKShub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pKTtcbiAgICBpZiAobW9kaWZpZWREb2MgJiZcbiAgICAgICAgZmlsdGVySW5QbGFjZSh2YXJpYWJsZXNUb1JlbW92ZSwgZnVuY3Rpb24gKHYpIHsgcmV0dXJuICF2YXJpYWJsZXNJblVzZVt2Lm5hbWVdOyB9KS5sZW5ndGgpIHtcbiAgICAgICAgbW9kaWZpZWREb2MgPSByZW1vdmVBcmd1bWVudHNGcm9tRG9jdW1lbnQodmFyaWFibGVzVG9SZW1vdmUsIG1vZGlmaWVkRG9jKTtcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVkRG9jICYmXG4gICAgICAgIGZpbHRlckluUGxhY2UoZnJhZ21lbnRTcHJlYWRzVG9SZW1vdmUsIGZ1bmN0aW9uIChmcykgeyByZXR1cm4gIWZyYWdtZW50U3ByZWFkc0luVXNlW2ZzLm5hbWVdOyB9KVxuICAgICAgICAgICAgLmxlbmd0aCkge1xuICAgICAgICBtb2RpZmllZERvYyA9IHJlbW92ZUZyYWdtZW50U3ByZWFkRnJvbURvY3VtZW50KGZyYWdtZW50U3ByZWFkc1RvUmVtb3ZlLCBtb2RpZmllZERvYyk7XG4gICAgfVxuICAgIHJldHVybiBtb2RpZmllZERvYztcbn1cbmZ1bmN0aW9uIGFkZFR5cGVuYW1lVG9Eb2N1bWVudChkb2MpIHtcbiAgICByZXR1cm4gdmlzaXQoY2hlY2tEb2N1bWVudChkb2MpLCB7XG4gICAgICAgIFNlbGVjdGlvblNldDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlLCBfa2V5LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9ucyA9IG5vZGUuc2VsZWN0aW9ucztcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2tpcCA9IHNlbGVjdGlvbnMuc29tZShmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaXNGaWVsZChzZWxlY3Rpb24pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0aW9uLm5hbWUudmFsdWUgPT09ICdfX3R5cGVuYW1lJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5uYW1lLnZhbHVlLmxhc3RJbmRleE9mKCdfXycsIDApID09PSAwKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmllbGQoZmllbGQpICYmXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLmRpcmVjdGl2ZXMgJiZcbiAgICAgICAgICAgICAgICAgICAgZmllbGQuZGlyZWN0aXZlcy5zb21lKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUudmFsdWUgPT09ICdleHBvcnQnOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgbm9kZSwgeyBzZWxlY3Rpb25zOiBzZWxlY3Rpb25zLmNvbmNhdChbVFlQRU5BTUVfRklFTERdKSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSk7XG59XG52YXIgY29ubmVjdGlvblJlbW92ZUNvbmZpZyA9IHtcbiAgICB0ZXN0OiBmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgIHZhciB3aWxsUmVtb3ZlID0gZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09ICdjb25uZWN0aW9uJztcbiAgICAgICAgaWYgKHdpbGxSZW1vdmUpIHtcbiAgICAgICAgICAgIGlmICghZGlyZWN0aXZlLmFyZ3VtZW50cyB8fFxuICAgICAgICAgICAgICAgICFkaXJlY3RpdmUuYXJndW1lbnRzLnNvbWUoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gYXJnLm5hbWUudmFsdWUgPT09ICdrZXknOyB9KSkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiB8fCBpbnZhcmlhbnQud2FybignUmVtb3ZpbmcgYW4gQGNvbm5lY3Rpb24gZGlyZWN0aXZlIGV2ZW4gdGhvdWdoIGl0IGRvZXMgbm90IGhhdmUgYSBrZXkuICcgK1xuICAgICAgICAgICAgICAgICAgICAnWW91IG1heSB3YW50IHRvIHVzZSB0aGUga2V5IHBhcmFtZXRlciB0byBzcGVjaWZ5IGEgc3RvcmUga2V5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aWxsUmVtb3ZlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gcmVtb3ZlQ29ubmVjdGlvbkRpcmVjdGl2ZUZyb21Eb2N1bWVudChkb2MpIHtcbiAgICByZXR1cm4gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChbY29ubmVjdGlvblJlbW92ZUNvbmZpZ10sIGNoZWNrRG9jdW1lbnQoZG9jKSk7XG59XG5mdW5jdGlvbiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb25TZXQoZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0LCBuZXN0ZWRDaGVjaykge1xuICAgIGlmIChuZXN0ZWRDaGVjayA9PT0gdm9pZCAwKSB7IG5lc3RlZENoZWNrID0gdHJ1ZTsgfVxuICAgIHJldHVybiAoc2VsZWN0aW9uU2V0ICYmXG4gICAgICAgIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zICYmXG4gICAgICAgIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zLnNvbWUoZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGhhc0RpcmVjdGl2ZXNJblNlbGVjdGlvbihkaXJlY3RpdmVzLCBzZWxlY3Rpb24sIG5lc3RlZENoZWNrKTtcbiAgICAgICAgfSkpO1xufVxuZnVuY3Rpb24gaGFzRGlyZWN0aXZlc0luU2VsZWN0aW9uKGRpcmVjdGl2ZXMsIHNlbGVjdGlvbiwgbmVzdGVkQ2hlY2spIHtcbiAgICBpZiAobmVzdGVkQ2hlY2sgPT09IHZvaWQgMCkgeyBuZXN0ZWRDaGVjayA9IHRydWU7IH1cbiAgICBpZiAoIWlzRmllbGQoc2VsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFzZWxlY3Rpb24uZGlyZWN0aXZlcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoc2VsZWN0aW9uLmRpcmVjdGl2ZXMuc29tZShnZXREaXJlY3RpdmVNYXRjaGVyKGRpcmVjdGl2ZXMpKSB8fFxuICAgICAgICAobmVzdGVkQ2hlY2sgJiZcbiAgICAgICAgICAgIGhhc0RpcmVjdGl2ZXNJblNlbGVjdGlvblNldChkaXJlY3RpdmVzLCBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LCBuZXN0ZWRDaGVjaykpKTtcbn1cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZXNGcm9tRG9jdW1lbnQoZGlyZWN0aXZlcywgZG9jKSB7XG4gICAgY2hlY2tEb2N1bWVudChkb2MpO1xuICAgIHZhciBwYXJlbnRQYXRoO1xuICAgIHJldHVybiBudWxsSWZEb2NJc0VtcHR5KHZpc2l0KGRvYywge1xuICAgICAgICBTZWxlY3Rpb25TZXQ6IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSwgX2tleSwgX3BhcmVudCwgcGF0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UGF0aCA9IHBhdGguam9pbignLScpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50UGF0aCB8fFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGF0aCA9PT0gcGFyZW50UGF0aCB8fFxuICAgICAgICAgICAgICAgICAgICAhY3VycmVudFBhdGguc3RhcnRzV2l0aChwYXJlbnRQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5zZWxlY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uc1dpdGhEaXJlY3RpdmVzID0gbm9kZS5zZWxlY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoc2VsZWN0aW9uKSB7IHJldHVybiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb24oZGlyZWN0aXZlcywgc2VsZWN0aW9uKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRGlyZWN0aXZlc0luU2VsZWN0aW9uU2V0KGRpcmVjdGl2ZXMsIG5vZGUsIGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFBhdGggPSBjdXJyZW50UGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgbm9kZSwgeyBzZWxlY3Rpb25zOiBzZWxlY3Rpb25zV2l0aERpcmVjdGl2ZXMgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSkpO1xufVxuZnVuY3Rpb24gZ2V0QXJndW1lbnRNYXRjaGVyKGNvbmZpZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBhcmd1bWVudE1hdGNoZXIoYXJndW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5zb21lKGZ1bmN0aW9uIChhQ29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnQudmFsdWUgJiZcbiAgICAgICAgICAgICAgICBhcmd1bWVudC52YWx1ZS5raW5kID09PSAnVmFyaWFibGUnICYmXG4gICAgICAgICAgICAgICAgYXJndW1lbnQudmFsdWUubmFtZSAmJlxuICAgICAgICAgICAgICAgIChhQ29uZmlnLm5hbWUgPT09IGFyZ3VtZW50LnZhbHVlLm5hbWUudmFsdWUgfHxcbiAgICAgICAgICAgICAgICAgICAgKGFDb25maWcudGVzdCAmJiBhQ29uZmlnLnRlc3QoYXJndW1lbnQpKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5mdW5jdGlvbiByZW1vdmVBcmd1bWVudHNGcm9tRG9jdW1lbnQoY29uZmlnLCBkb2MpIHtcbiAgICB2YXIgYXJnTWF0Y2hlciA9IGdldEFyZ3VtZW50TWF0Y2hlcihjb25maWcpO1xuICAgIHJldHVybiBudWxsSWZEb2NJc0VtcHR5KHZpc2l0KGRvYywge1xuICAgICAgICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIG5vZGUsIHsgdmFyaWFibGVEZWZpbml0aW9uczogbm9kZS52YXJpYWJsZURlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbiAodmFyRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWNvbmZpZy5zb21lKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZy5uYW1lID09PSB2YXJEZWYudmFyaWFibGUubmFtZS52YWx1ZTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgRmllbGQ6IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBzaG91bGRSZW1vdmVGaWVsZCA9IGNvbmZpZy5zb21lKGZ1bmN0aW9uIChhcmdDb25maWcpIHsgcmV0dXJuIGFyZ0NvbmZpZy5yZW1vdmU7IH0pO1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRSZW1vdmVGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJnTWF0Y2hDb3VudF8xID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hcmd1bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnTWF0Y2hlcihhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTWF0Y2hDb3VudF8xICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnTWF0Y2hDb3VudF8xID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIEFyZ3VtZW50OiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJnTWF0Y2hlcihub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUZyYWdtZW50U3ByZWFkRnJvbURvY3VtZW50KGNvbmZpZywgZG9jKSB7XG4gICAgZnVuY3Rpb24gZW50ZXIobm9kZSkge1xuICAgICAgICBpZiAoY29uZmlnLnNvbWUoZnVuY3Rpb24gKGRlZikgeyByZXR1cm4gZGVmLm5hbWUgPT09IG5vZGUubmFtZS52YWx1ZTsgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsSWZEb2NJc0VtcHR5KHZpc2l0KGRvYywge1xuICAgICAgICBGcmFnbWVudFNwcmVhZDogeyBlbnRlcjogZW50ZXIgfSxcbiAgICAgICAgRnJhZ21lbnREZWZpbml0aW9uOiB7IGVudGVyOiBlbnRlciB9LFxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIGdldEFsbEZyYWdtZW50U3ByZWFkc0Zyb21TZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0KSB7XG4gICAgdmFyIGFsbEZyYWdtZW50cyA9IFtdO1xuICAgIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICBpZiAoKGlzRmllbGQoc2VsZWN0aW9uKSB8fCBpc0lubGluZUZyYWdtZW50KHNlbGVjdGlvbikpICYmXG4gICAgICAgICAgICBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBnZXRBbGxGcmFnbWVudFNwcmVhZHNGcm9tU2VsZWN0aW9uU2V0KHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpLmZvckVhY2goZnVuY3Rpb24gKGZyYWcpIHsgcmV0dXJuIGFsbEZyYWdtZW50cy5wdXNoKGZyYWcpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gJ0ZyYWdtZW50U3ByZWFkJykge1xuICAgICAgICAgICAgYWxsRnJhZ21lbnRzLnB1c2goc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhbGxGcmFnbWVudHM7XG59XG5mdW5jdGlvbiBidWlsZFF1ZXJ5RnJvbVNlbGVjdGlvblNldChkb2N1bWVudCkge1xuICAgIHZhciBkZWZpbml0aW9uID0gZ2V0TWFpbkRlZmluaXRpb24oZG9jdW1lbnQpO1xuICAgIHZhciBkZWZpbml0aW9uT3BlcmF0aW9uID0gZGVmaW5pdGlvbi5vcGVyYXRpb247XG4gICAgaWYgKGRlZmluaXRpb25PcGVyYXRpb24gPT09ICdxdWVyeScpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH1cbiAgICB2YXIgbW9kaWZpZWREb2MgPSB2aXNpdChkb2N1bWVudCwge1xuICAgICAgICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIG5vZGUsIHsgb3BlcmF0aW9uOiAncXVlcnknIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWREb2M7XG59XG5mdW5jdGlvbiByZW1vdmVDbGllbnRTZXRzRnJvbURvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgY2hlY2tEb2N1bWVudChkb2N1bWVudCk7XG4gICAgdmFyIG1vZGlmaWVkRG9jID0gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChkaXJlY3RpdmUpIHsgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSAnY2xpZW50JzsgfSxcbiAgICAgICAgICAgIHJlbW92ZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICBdLCBkb2N1bWVudCk7XG4gICAgaWYgKG1vZGlmaWVkRG9jKSB7XG4gICAgICAgIG1vZGlmaWVkRG9jID0gdmlzaXQobW9kaWZpZWREb2MsIHtcbiAgICAgICAgICAgIEZyYWdtZW50RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1R5cGVuYW1lT25seSA9IG5vZGUuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0ZpZWxkKHNlbGVjdGlvbikgJiYgc2VsZWN0aW9uLm5hbWUudmFsdWUgPT09ICdfX3R5cGVuYW1lJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVHlwZW5hbWVPbmx5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtb2RpZmllZERvYztcbn1cblxudmFyIGNhblVzZVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAhKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmXG4gICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNsb25lRGVlcEhlbHBlcih2YWx1ZSwgbmV3IE1hcCgpKTtcbn1cbmZ1bmN0aW9uIGNsb25lRGVlcEhlbHBlcih2YWwsIHNlZW4pIHtcbiAgICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgICAgICBjYXNlIFwiW29iamVjdCBBcnJheV1cIjoge1xuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKHZhbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4uZ2V0KHZhbCk7XG4gICAgICAgICAgICB2YXIgY29weV8xID0gdmFsLnNsaWNlKDApO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzEpO1xuICAgICAgICAgICAgY29weV8xLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICAgICAgY29weV8xW2ldID0gY2xvbmVEZWVwSGVscGVyKGNoaWxkLCBzZWVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvcHlfMTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6IHtcbiAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgICAgICAgICAgdmFyIGNvcHlfMiA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzIpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjb3B5XzJba2V5XSA9IGNsb25lRGVlcEhlbHBlcih2YWxba2V5XSwgc2Vlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5XzI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRFbnYoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG4gICAgfVxuICAgIHJldHVybiAnZGV2ZWxvcG1lbnQnO1xufVxuZnVuY3Rpb24gaXNFbnYoZW52KSB7XG4gICAgcmV0dXJuIGdldEVudigpID09PSBlbnY7XG59XG5mdW5jdGlvbiBpc1Byb2R1Y3Rpb24oKSB7XG4gICAgcmV0dXJuIGlzRW52KCdwcm9kdWN0aW9uJykgPT09IHRydWU7XG59XG5mdW5jdGlvbiBpc0RldmVsb3BtZW50KCkge1xuICAgIHJldHVybiBpc0VudignZGV2ZWxvcG1lbnQnKSA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGlzVGVzdCgpIHtcbiAgICByZXR1cm4gaXNFbnYoJ3Rlc3QnKSA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdHJ5RnVuY3Rpb25PckxvZ0Vycm9yKGYpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoY29uc29sZS5lcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdyYXBoUUxSZXN1bHRIYXNFcnJvcihyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0LmVycm9ycyAmJiByZXN1bHQuZXJyb3JzLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gZGVlcEZyZWV6ZShvKSB7XG4gICAgT2JqZWN0LmZyZWV6ZShvKTtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIGlmIChvW3Byb3BdICE9PSBudWxsICYmXG4gICAgICAgICAgICAodHlwZW9mIG9bcHJvcF0gPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvW3Byb3BdID09PSAnZnVuY3Rpb24nKSAmJlxuICAgICAgICAgICAgIU9iamVjdC5pc0Zyb3plbihvW3Byb3BdKSkge1xuICAgICAgICAgICAgZGVlcEZyZWV6ZShvW3Byb3BdKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvO1xufVxuZnVuY3Rpb24gbWF5YmVEZWVwRnJlZXplKG9iaikge1xuICAgIGlmIChpc0RldmVsb3BtZW50KCkgfHwgaXNUZXN0KCkpIHtcbiAgICAgICAgdmFyIHN5bWJvbElzUG9seWZpbGxlZCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnJykgPT09ICdzdHJpbmcnO1xuICAgICAgICBpZiAoIXN5bWJvbElzUG9seWZpbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZXBGcmVlemUob2JqKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gbWVyZ2VEZWVwKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEZWVwQXJyYXkoc291cmNlcyk7XG59XG5mdW5jdGlvbiBtZXJnZURlZXBBcnJheShzb3VyY2VzKSB7XG4gICAgdmFyIHRhcmdldCA9IHNvdXJjZXNbMF0gfHwge307XG4gICAgdmFyIGNvdW50ID0gc291cmNlcy5sZW5ndGg7XG4gICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgICB2YXIgcGFzdENvcGllcyA9IFtdO1xuICAgICAgICB0YXJnZXQgPSBzaGFsbG93Q29weUZvck1lcmdlKHRhcmdldCwgcGFzdENvcGllcyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gbWVyZ2VIZWxwZXIodGFyZ2V0LCBzb3VyY2VzW2ldLCBwYXN0Q29waWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jztcbn1cbmZ1bmN0aW9uIG1lcmdlSGVscGVyKHRhcmdldCwgc291cmNlLCBwYXN0Q29waWVzKSB7XG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkgJiYgaXNPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZSAmJiAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQgPSBzaGFsbG93Q29weUZvck1lcmdlKHRhcmdldCwgcGFzdENvcGllcyk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VLZXkpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VWYWx1ZSA9IHNvdXJjZVtzb3VyY2VLZXldO1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBzb3VyY2VLZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFZhbHVlID0gdGFyZ2V0W3NvdXJjZUtleV07XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZVZhbHVlICE9PSB0YXJnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlS2V5XSA9IG1lcmdlSGVscGVyKHNoYWxsb3dDb3B5Rm9yTWVyZ2UodGFyZ2V0VmFsdWUsIHBhc3RDb3BpZXMpLCBzb3VyY2VWYWx1ZSwgcGFzdENvcGllcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZUtleV0gPSBzb3VyY2VWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBzaGFsbG93Q29weUZvck1lcmdlKHZhbHVlLCBwYXN0Q29waWVzKSB7XG4gICAgaWYgKHZhbHVlICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgcGFzdENvcGllcy5pbmRleE9mKHZhbHVlKSA8IDApIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBfX2Fzc2lnbih7IF9fcHJvdG9fXzogT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSB9LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFzdENvcGllcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgaGF2ZVdhcm5lZCA9IE9iamVjdC5jcmVhdGUoe30pO1xuZnVuY3Rpb24gd2Fybk9uY2VJbkRldmVsb3BtZW50KG1zZywgdHlwZSkge1xuICAgIGlmICh0eXBlID09PSB2b2lkIDApIHsgdHlwZSA9ICd3YXJuJzsgfVxuICAgIGlmICghaXNQcm9kdWN0aW9uKCkgJiYgIWhhdmVXYXJuZWRbbXNnXSkge1xuICAgICAgICBpZiAoIWlzVGVzdCgpKSB7XG4gICAgICAgICAgICBoYXZlV2FybmVkW21zZ10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RyaXBTeW1ib2xzKGRhdGEpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XG59XG5cbmV4cG9ydCB7IGFkZFR5cGVuYW1lVG9Eb2N1bWVudCwgYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkLCBhc3NpZ24sIGJ1aWxkUXVlcnlGcm9tU2VsZWN0aW9uU2V0LCBjYW5Vc2VXZWFrTWFwLCBjaGVja0RvY3VtZW50LCBjbG9uZURlZXAsIGNyZWF0ZUZyYWdtZW50TWFwLCBnZXREZWZhdWx0VmFsdWVzLCBnZXREaXJlY3RpdmVJbmZvRnJvbUZpZWxkLCBnZXREaXJlY3RpdmVOYW1lcywgZ2V0RGlyZWN0aXZlc0Zyb21Eb2N1bWVudCwgZ2V0RW52LCBnZXRGcmFnbWVudERlZmluaXRpb24sIGdldEZyYWdtZW50RGVmaW5pdGlvbnMsIGdldEZyYWdtZW50UXVlcnlEb2N1bWVudCwgZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcywgZ2V0TWFpbkRlZmluaXRpb24sIGdldE11dGF0aW9uRGVmaW5pdGlvbiwgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbiwgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbk9yRGllLCBnZXRPcGVyYXRpb25OYW1lLCBnZXRRdWVyeURlZmluaXRpb24sIGdldFN0b3JlS2V5TmFtZSwgZ3JhcGhRTFJlc3VsdEhhc0Vycm9yLCBoYXNDbGllbnRFeHBvcnRzLCBoYXNEaXJlY3RpdmVzLCBpc0RldmVsb3BtZW50LCBpc0VudiwgaXNGaWVsZCwgaXNJZFZhbHVlLCBpc0lubGluZUZyYWdtZW50LCBpc0pzb25WYWx1ZSwgaXNOdW1iZXJWYWx1ZSwgaXNQcm9kdWN0aW9uLCBpc1NjYWxhclZhbHVlLCBpc1Rlc3QsIG1heWJlRGVlcEZyZWV6ZSwgbWVyZ2VEZWVwLCBtZXJnZURlZXBBcnJheSwgcmVtb3ZlQXJndW1lbnRzRnJvbURvY3VtZW50LCByZW1vdmVDbGllbnRTZXRzRnJvbURvY3VtZW50LCByZW1vdmVDb25uZWN0aW9uRGlyZWN0aXZlRnJvbURvY3VtZW50LCByZW1vdmVEaXJlY3RpdmVzRnJvbURvY3VtZW50LCByZW1vdmVGcmFnbWVudFNwcmVhZEZyb21Eb2N1bWVudCwgcmVzdWx0S2V5TmFtZUZyb21GaWVsZCwgc2hvdWxkSW5jbHVkZSwgc3RvcmVLZXlOYW1lRnJvbUZpZWxkLCBzdHJpcFN5bWJvbHMsIHRvSWRWYWx1ZSwgdHJ5RnVuY3Rpb25PckxvZ0Vycm9yLCB2YWx1ZUZyb21Ob2RlLCB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24sIHZhcmlhYmxlc0luT3BlcmF0aW9uLCB3YXJuT25jZUluRGV2ZWxvcG1lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsZS5lc20uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR3JhcGhRTEVycm9yID0gR3JhcGhRTEVycm9yO1xuXG52YXIgX3ByaW50RXJyb3IgPSByZXF1aXJlKFwiLi9wcmludEVycm9yXCIpO1xuXG52YXIgX2xvY2F0aW9uID0gcmVxdWlyZShcIi4uL2xhbmd1YWdlL2xvY2F0aW9uXCIpO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBHcmFwaFFMRXJyb3IoIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVkZWNsYXJlXG5tZXNzYWdlLCBub2Rlcywgc291cmNlLCBwb3NpdGlvbnMsIHBhdGgsIG9yaWdpbmFsRXJyb3IsIGV4dGVuc2lvbnMpIHtcbiAgLy8gQ29tcHV0ZSBsaXN0IG9mIGJsYW1lIG5vZGVzLlxuICB2YXIgX25vZGVzID0gQXJyYXkuaXNBcnJheShub2RlcykgPyBub2Rlcy5sZW5ndGggIT09IDAgPyBub2RlcyA6IHVuZGVmaW5lZCA6IG5vZGVzID8gW25vZGVzXSA6IHVuZGVmaW5lZDsgLy8gQ29tcHV0ZSBsb2NhdGlvbnMgaW4gdGhlIHNvdXJjZSBmb3IgdGhlIGdpdmVuIG5vZGVzL3Bvc2l0aW9ucy5cblxuXG4gIHZhciBfc291cmNlID0gc291cmNlO1xuXG4gIGlmICghX3NvdXJjZSAmJiBfbm9kZXMpIHtcbiAgICB2YXIgbm9kZSA9IF9ub2Rlc1swXTtcbiAgICBfc291cmNlID0gbm9kZSAmJiBub2RlLmxvYyAmJiBub2RlLmxvYy5zb3VyY2U7XG4gIH1cblxuICB2YXIgX3Bvc2l0aW9ucyA9IHBvc2l0aW9ucztcblxuICBpZiAoIV9wb3NpdGlvbnMgJiYgX25vZGVzKSB7XG4gICAgX3Bvc2l0aW9ucyA9IF9ub2Rlcy5yZWR1Y2UoZnVuY3Rpb24gKGxpc3QsIG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmxvYykge1xuICAgICAgICBsaXN0LnB1c2gobm9kZS5sb2Muc3RhcnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LCBbXSk7XG4gIH1cblxuICBpZiAoX3Bvc2l0aW9ucyAmJiBfcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIF9wb3NpdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgX2xvY2F0aW9ucztcblxuICBpZiAocG9zaXRpb25zICYmIHNvdXJjZSkge1xuICAgIF9sb2NhdGlvbnMgPSBwb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiAoMCwgX2xvY2F0aW9uLmdldExvY2F0aW9uKShzb3VyY2UsIHBvcyk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoX25vZGVzKSB7XG4gICAgX2xvY2F0aW9ucyA9IF9ub2Rlcy5yZWR1Y2UoZnVuY3Rpb24gKGxpc3QsIG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmxvYykge1xuICAgICAgICBsaXN0LnB1c2goKDAsIF9sb2NhdGlvbi5nZXRMb2NhdGlvbikobm9kZS5sb2Muc291cmNlLCBub2RlLmxvYy5zdGFydCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LCBbXSk7XG4gIH1cblxuICB2YXIgX2V4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXG4gIGlmIChfZXh0ZW5zaW9ucyA9PSBudWxsICYmIG9yaWdpbmFsRXJyb3IgIT0gbnVsbCkge1xuICAgIHZhciBvcmlnaW5hbEV4dGVuc2lvbnMgPSBvcmlnaW5hbEVycm9yLmV4dGVuc2lvbnM7XG5cbiAgICBpZiAob3JpZ2luYWxFeHRlbnNpb25zICE9IG51bGwgJiYgX3R5cGVvZihvcmlnaW5hbEV4dGVuc2lvbnMpID09PSAnb2JqZWN0Jykge1xuICAgICAgX2V4dGVuc2lvbnMgPSBvcmlnaW5hbEV4dGVuc2lvbnM7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgICAgLy8gQnkgYmVpbmcgZW51bWVyYWJsZSwgSlNPTi5zdHJpbmdpZnkgd2lsbCBpbmNsdWRlIGBtZXNzYWdlYCBpbiB0aGVcbiAgICAgIC8vIHJlc3VsdGluZyBvdXRwdXQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBzaW1wbGVzdCBwb3NzaWJsZSBHcmFwaFFMXG4gICAgICAvLyBzZXJ2aWNlIGFkaGVyZXMgdG8gdGhlIHNwZWMuXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9LFxuICAgIGxvY2F0aW9uczoge1xuICAgICAgLy8gQ29lcmNpbmcgZmFsc2V5IHZhbHVlcyB0byB1bmRlZmluZWQgZW5zdXJlcyB0aGV5IHdpbGwgbm90IGJlIGluY2x1ZGVkXG4gICAgICAvLyBpbiBKU09OLnN0cmluZ2lmeSgpIHdoZW4gbm90IHByb3ZpZGVkLlxuICAgICAgdmFsdWU6IF9sb2NhdGlvbnMgfHwgdW5kZWZpbmVkLFxuICAgICAgLy8gQnkgYmVpbmcgZW51bWVyYWJsZSwgSlNPTi5zdHJpbmdpZnkgd2lsbCBpbmNsdWRlIGBsb2NhdGlvbnNgIGluIHRoZVxuICAgICAgLy8gcmVzdWx0aW5nIG91dHB1dC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHNpbXBsZXN0IHBvc3NpYmxlIEdyYXBoUUxcbiAgICAgIC8vIHNlcnZpY2UgYWRoZXJlcyB0byB0aGUgc3BlYy5cbiAgICAgIGVudW1lcmFibGU6IEJvb2xlYW4oX2xvY2F0aW9ucylcbiAgICB9LFxuICAgIHBhdGg6IHtcbiAgICAgIC8vIENvZXJjaW5nIGZhbHNleSB2YWx1ZXMgdG8gdW5kZWZpbmVkIGVuc3VyZXMgdGhleSB3aWxsIG5vdCBiZSBpbmNsdWRlZFxuICAgICAgLy8gaW4gSlNPTi5zdHJpbmdpZnkoKSB3aGVuIG5vdCBwcm92aWRlZC5cbiAgICAgIHZhbHVlOiBwYXRoIHx8IHVuZGVmaW5lZCxcbiAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgcGF0aGAgaW4gdGhlXG4gICAgICAvLyByZXN1bHRpbmcgb3V0cHV0LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgc2ltcGxlc3QgcG9zc2libGUgR3JhcGhRTFxuICAgICAgLy8gc2VydmljZSBhZGhlcmVzIHRvIHRoZSBzcGVjLlxuICAgICAgZW51bWVyYWJsZTogQm9vbGVhbihwYXRoKVxuICAgIH0sXG4gICAgbm9kZXM6IHtcbiAgICAgIHZhbHVlOiBfbm9kZXMgfHwgdW5kZWZpbmVkXG4gICAgfSxcbiAgICBzb3VyY2U6IHtcbiAgICAgIHZhbHVlOiBfc291cmNlIHx8IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgcG9zaXRpb25zOiB7XG4gICAgICB2YWx1ZTogX3Bvc2l0aW9ucyB8fCB1bmRlZmluZWRcbiAgICB9LFxuICAgIG9yaWdpbmFsRXJyb3I6IHtcbiAgICAgIHZhbHVlOiBvcmlnaW5hbEVycm9yXG4gICAgfSxcbiAgICBleHRlbnNpb25zOiB7XG4gICAgICAvLyBDb2VyY2luZyBmYWxzZXkgdmFsdWVzIHRvIHVuZGVmaW5lZCBlbnN1cmVzIHRoZXkgd2lsbCBub3QgYmUgaW5jbHVkZWRcbiAgICAgIC8vIGluIEpTT04uc3RyaW5naWZ5KCkgd2hlbiBub3QgcHJvdmlkZWQuXG4gICAgICB2YWx1ZTogX2V4dGVuc2lvbnMgfHwgdW5kZWZpbmVkLFxuICAgICAgLy8gQnkgYmVpbmcgZW51bWVyYWJsZSwgSlNPTi5zdHJpbmdpZnkgd2lsbCBpbmNsdWRlIGBwYXRoYCBpbiB0aGVcbiAgICAgIC8vIHJlc3VsdGluZyBvdXRwdXQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBzaW1wbGVzdCBwb3NzaWJsZSBHcmFwaFFMXG4gICAgICAvLyBzZXJ2aWNlIGFkaGVyZXMgdG8gdGhlIHNwZWMuXG4gICAgICBlbnVtZXJhYmxlOiBCb29sZWFuKF9leHRlbnNpb25zKVxuICAgIH1cbiAgfSk7IC8vIEluY2x1ZGUgKG5vbi1lbnVtZXJhYmxlKSBzdGFjayB0cmFjZS5cblxuICBpZiAob3JpZ2luYWxFcnJvciAmJiBvcmlnaW5hbEVycm9yLnN0YWNrKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgIHZhbHVlOiBvcmlnaW5hbEVycm9yLnN0YWNrLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEdyYXBoUUxFcnJvcik7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgIHZhbHVlOiBFcnJvcigpLnN0YWNrLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxufVxuXG5HcmFwaFFMRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IHtcbiAgICB2YWx1ZTogR3JhcGhRTEVycm9yXG4gIH0sXG4gIG5hbWU6IHtcbiAgICB2YWx1ZTogJ0dyYXBoUUxFcnJvcidcbiAgfSxcbiAgdG9TdHJpbmc6IHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gKDAsIF9wcmludEVycm9yLnByaW50RXJyb3IpKHRoaXMpO1xuICAgIH1cbiAgfVxufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluc3BlY3Q7XG5cbnZhciBfbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBNQVhfQVJSQVlfTEVOR1RIID0gMTA7XG52YXIgTUFYX1JFQ1VSU0lWRV9ERVBUSCA9IDI7XG4vKipcbiAqIFVzZWQgdG8gcHJpbnQgdmFsdWVzIGluIGVycm9yIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGluc3BlY3QodmFsdWUpIHtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKHZhbHVlLCBbXSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlLCBzZWVuVmFsdWVzKSB7XG4gIHN3aXRjaCAoX3R5cGVvZih2YWx1ZSkpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiB2YWx1ZS5uYW1lID8gXCJbZnVuY3Rpb24gXCIuY29uY2F0KHZhbHVlLm5hbWUsIFwiXVwiKSA6ICdbZnVuY3Rpb25dJztcblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gZm9ybWF0T2JqZWN0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBwcmV2aW91c2x5U2VlblZhbHVlcykge1xuICBpZiAocHJldmlvdXNseVNlZW5WYWx1ZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgfVxuXG4gIHZhciBzZWVuVmFsdWVzID0gW10uY29uY2F0KHByZXZpb3VzbHlTZWVuVmFsdWVzLCBbdmFsdWVdKTtcblxuICBpZiAodmFsdWUpIHtcbiAgICB2YXIgY3VzdG9tSW5zcGVjdEZuID0gZ2V0Q3VzdG9tRm4odmFsdWUpO1xuXG4gICAgaWYgKGN1c3RvbUluc3BlY3RGbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lKD49MC45MC4wKVxuICAgICAgdmFyIGN1c3RvbVZhbHVlID0gY3VzdG9tSW5zcGVjdEZuLmNhbGwodmFsdWUpOyAvLyBjaGVjayBmb3IgaW5maW5pdGUgcmVjdXJzaW9uXG5cbiAgICAgIGlmIChjdXN0b21WYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjdXN0b21WYWx1ZSA9PT0gJ3N0cmluZycgPyBjdXN0b21WYWx1ZSA6IGZvcm1hdFZhbHVlKGN1c3RvbVZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0QXJyYXkodmFsdWUsIHNlZW5WYWx1ZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXRPYmplY3QodmFsdWUsIHNlZW5WYWx1ZXMpO1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdChvYmplY3QsIHNlZW5WYWx1ZXMpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAne30nO1xuICB9XG5cbiAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gTUFYX1JFQ1VSU0lWRV9ERVBUSCkge1xuICAgIHJldHVybiAnWycgKyBnZXRPYmplY3RUYWcob2JqZWN0KSArICddJztcbiAgfVxuXG4gIHZhciBwcm9wZXJ0aWVzID0ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IGZvcm1hdFZhbHVlKG9iamVjdFtrZXldLCBzZWVuVmFsdWVzKTtcbiAgICByZXR1cm4ga2V5ICsgJzogJyArIHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuICd7ICcgKyBwcm9wZXJ0aWVzLmpvaW4oJywgJykgKyAnIH0nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShhcnJheSwgc2VlblZhbHVlcykge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdbXSc7XG4gIH1cblxuICBpZiAoc2VlblZhbHVlcy5sZW5ndGggPiBNQVhfUkVDVVJTSVZFX0RFUFRIKSB7XG4gICAgcmV0dXJuICdbQXJyYXldJztcbiAgfVxuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihNQVhfQVJSQVlfTEVOR1RILCBhcnJheS5sZW5ndGgpO1xuICB2YXIgcmVtYWluaW5nID0gYXJyYXkubGVuZ3RoIC0gbGVuO1xuICB2YXIgaXRlbXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaXRlbXMucHVzaChmb3JtYXRWYWx1ZShhcnJheVtpXSwgc2VlblZhbHVlcykpO1xuICB9XG5cbiAgaWYgKHJlbWFpbmluZyA9PT0gMSkge1xuICAgIGl0ZW1zLnB1c2goJy4uLiAxIG1vcmUgaXRlbScpO1xuICB9IGVsc2UgaWYgKHJlbWFpbmluZyA+IDEpIHtcbiAgICBpdGVtcy5wdXNoKFwiLi4uIFwiLmNvbmNhdChyZW1haW5pbmcsIFwiIG1vcmUgaXRlbXNcIikpO1xuICB9XG5cbiAgcmV0dXJuICdbJyArIGl0ZW1zLmpvaW4oJywgJykgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIGdldEN1c3RvbUZuKG9iamVjdCkge1xuICB2YXIgY3VzdG9tSW5zcGVjdEZuID0gb2JqZWN0W1N0cmluZyhfbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbC5kZWZhdWx0KV07XG5cbiAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0Rm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY3VzdG9tSW5zcGVjdEZuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmplY3QuaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvYmplY3QuaW5zcGVjdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPYmplY3RUYWcob2JqZWN0KSB7XG4gIHZhciB0YWcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KS5yZXBsYWNlKC9eXFxbb2JqZWN0IC8sICcnKS5yZXBsYWNlKC9dJC8sICcnKTtcblxuICBpZiAodGFnID09PSAnT2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG5hbWUgPSBvYmplY3QuY29uc3RydWN0b3IubmFtZTtcblxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YWc7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xudmFyIG5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nID8gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKSA6IHVuZGVmaW5lZDtcbnZhciBfZGVmYXVsdCA9IG5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2w7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmaW5lVG9KU09OO1xuXG52YXIgX25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2xcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbi8qKlxuICogVGhlIGBkZWZpbmVUb0pTT04oKWAgZnVuY3Rpb24gZGVmaW5lcyB0b0pTT04oKSBhbmQgaW5zcGVjdCgpIHByb3RvdHlwZVxuICogbWV0aG9kcywgaWYgbm8gZnVuY3Rpb24gcHJvdmlkZWQgdGhleSBiZWNvbWUgYWxpYXNlcyBmb3IgdG9TdHJpbmcoKS5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lVG9KU09OKCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmxvd3R5cGUvbm8td2Vhay10eXBlc1xuY2xhc3NPYmplY3QpIHtcbiAgdmFyIGZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBjbGFzc09iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gIGNsYXNzT2JqZWN0LnByb3RvdHlwZS50b0pTT04gPSBmbjtcbiAgY2xhc3NPYmplY3QucHJvdG90eXBlLmluc3BlY3QgPSBmbjtcblxuICBpZiAoX25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wuZGVmYXVsdCkge1xuICAgIGNsYXNzT2JqZWN0LnByb3RvdHlwZVtfbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbC5kZWZhdWx0XSA9IGZuO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGludmFyaWFudDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICB2YXIgYm9vbGVhbkNvbmRpdGlvbiA9IEJvb2xlYW4oY29uZGl0aW9uKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuICBpZiAoIWJvb2xlYW5Db25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR3JhcGhRTEVycm9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN5bnRheEVycm9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9zeW50YXhFcnJvci5zeW50YXhFcnJvcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsb2NhdGVkRXJyb3JcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2xvY2F0ZWRFcnJvci5sb2NhdGVkRXJyb3I7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJpbnRFcnJvclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcHJpbnRFcnJvci5wcmludEVycm9yO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZvcm1hdEVycm9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9mb3JtYXRFcnJvci5mb3JtYXRFcnJvcjtcbiAgfVxufSk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZShcIi4vR3JhcGhRTEVycm9yXCIpO1xuXG52YXIgX3N5bnRheEVycm9yID0gcmVxdWlyZShcIi4vc3ludGF4RXJyb3JcIik7XG5cbnZhciBfbG9jYXRlZEVycm9yID0gcmVxdWlyZShcIi4vbG9jYXRlZEVycm9yXCIpO1xuXG52YXIgX3ByaW50RXJyb3IgPSByZXF1aXJlKFwiLi9wcmludEVycm9yXCIpO1xuXG52YXIgX2Zvcm1hdEVycm9yID0gcmVxdWlyZShcIi4vZm9ybWF0RXJyb3JcIik7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucHJpbnRFcnJvciA9IHByaW50RXJyb3I7XG5cbnZhciBfbG9jYXRpb24gPSByZXF1aXJlKFwiLi4vbGFuZ3VhZ2UvbG9jYXRpb25cIik7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuLyoqXG4gKiBQcmludHMgYSBHcmFwaFFMRXJyb3IgdG8gYSBzdHJpbmcsIHJlcHJlc2VudGluZyB1c2VmdWwgbG9jYXRpb24gaW5mb3JtYXRpb25cbiAqIGFib3V0IHRoZSBlcnJvcidzIHBvc2l0aW9uIGluIHRoZSBzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIHByaW50RXJyb3IoZXJyb3IpIHtcbiAgdmFyIHByaW50ZWRMb2NhdGlvbnMgPSBbXTtcblxuICBpZiAoZXJyb3Iubm9kZXMpIHtcbiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGVycm9yLm5vZGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICB2YXIgbm9kZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmIChub2RlLmxvYykge1xuICAgICAgICAgIHByaW50ZWRMb2NhdGlvbnMucHVzaChoaWdobGlnaHRTb3VyY2VBdExvY2F0aW9uKG5vZGUubG9jLnNvdXJjZSwgKDAsIF9sb2NhdGlvbi5nZXRMb2NhdGlvbikobm9kZS5sb2Muc291cmNlLCBub2RlLmxvYy5zdGFydCkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGVycm9yLnNvdXJjZSAmJiBlcnJvci5sb2NhdGlvbnMpIHtcbiAgICB2YXIgc291cmNlID0gZXJyb3Iuc291cmNlO1xuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IGVycm9yLmxvY2F0aW9uc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSBfc3RlcDIudmFsdWU7XG4gICAgICAgIHByaW50ZWRMb2NhdGlvbnMucHVzaChoaWdobGlnaHRTb3VyY2VBdExvY2F0aW9uKHNvdXJjZSwgbG9jYXRpb24pKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJpbnRlZExvY2F0aW9ucy5sZW5ndGggPT09IDAgPyBlcnJvci5tZXNzYWdlIDogW2Vycm9yLm1lc3NhZ2VdLmNvbmNhdChwcmludGVkTG9jYXRpb25zKS5qb2luKCdcXG5cXG4nKSArICdcXG4nO1xufVxuLyoqXG4gKiBSZW5kZXIgYSBoZWxwZnVsIGRlc2NyaXB0aW9uIG9mIHRoZSBsb2NhdGlvbiBvZiB0aGUgZXJyb3IgaW4gdGhlIEdyYXBoUUxcbiAqIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGhpZ2hsaWdodFNvdXJjZUF0TG9jYXRpb24oc291cmNlLCBsb2NhdGlvbikge1xuICB2YXIgZmlyc3RMaW5lQ29sdW1uT2Zmc2V0ID0gc291cmNlLmxvY2F0aW9uT2Zmc2V0LmNvbHVtbiAtIDE7XG4gIHZhciBib2R5ID0gd2hpdGVzcGFjZShmaXJzdExpbmVDb2x1bW5PZmZzZXQpICsgc291cmNlLmJvZHk7XG4gIHZhciBsaW5lSW5kZXggPSBsb2NhdGlvbi5saW5lIC0gMTtcbiAgdmFyIGxpbmVPZmZzZXQgPSBzb3VyY2UubG9jYXRpb25PZmZzZXQubGluZSAtIDE7XG4gIHZhciBsaW5lTnVtID0gbG9jYXRpb24ubGluZSArIGxpbmVPZmZzZXQ7XG4gIHZhciBjb2x1bW5PZmZzZXQgPSBsb2NhdGlvbi5saW5lID09PSAxID8gZmlyc3RMaW5lQ29sdW1uT2Zmc2V0IDogMDtcbiAgdmFyIGNvbHVtbk51bSA9IGxvY2F0aW9uLmNvbHVtbiArIGNvbHVtbk9mZnNldDtcbiAgdmFyIGxpbmVzID0gYm9keS5zcGxpdCgvXFxyXFxufFtcXG5cXHJdL2cpO1xuICByZXR1cm4gXCJcIi5jb25jYXQoc291cmNlLm5hbWUsIFwiIChcIikuY29uY2F0KGxpbmVOdW0sIFwiOlwiKS5jb25jYXQoY29sdW1uTnVtLCBcIilcXG5cIikgKyBwcmludFByZWZpeGVkTGluZXMoWy8vIExpbmVzIHNwZWNpZmllZCBsaWtlIHRoaXM6IFtcInByZWZpeFwiLCBcInN0cmluZ1wiXSxcbiAgW1wiXCIuY29uY2F0KGxpbmVOdW0gLSAxLCBcIjogXCIpLCBsaW5lc1tsaW5lSW5kZXggLSAxXV0sIFtcIlwiLmNvbmNhdChsaW5lTnVtLCBcIjogXCIpLCBsaW5lc1tsaW5lSW5kZXhdXSwgWycnLCB3aGl0ZXNwYWNlKGNvbHVtbk51bSAtIDEpICsgJ14nXSwgW1wiXCIuY29uY2F0KGxpbmVOdW0gKyAxLCBcIjogXCIpLCBsaW5lc1tsaW5lSW5kZXggKyAxXV1dKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRQcmVmaXhlZExpbmVzKGxpbmVzKSB7XG4gIHZhciBleGlzdGluZ0xpbmVzID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIF8gPSBfcmVmWzBdLFxuICAgICAgICBsaW5lID0gX3JlZlsxXTtcbiAgICByZXR1cm4gbGluZSAhPT0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdmFyIHBhZExlbiA9IDA7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBleGlzdGluZ0xpbmVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICB2YXIgX3JlZjQgPSBfc3RlcDMudmFsdWU7XG4gICAgICB2YXIgcHJlZml4ID0gX3JlZjRbMF07XG4gICAgICBwYWRMZW4gPSBNYXRoLm1heChwYWRMZW4sIHByZWZpeC5sZW5ndGgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhpc3RpbmdMaW5lcy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgdmFyIHByZWZpeCA9IF9yZWYzWzBdLFxuICAgICAgICBsaW5lID0gX3JlZjNbMV07XG4gICAgcmV0dXJuIGxwYWQocGFkTGVuLCBwcmVmaXgpICsgbGluZTtcbiAgfSkuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIHdoaXRlc3BhY2UobGVuKSB7XG4gIHJldHVybiBBcnJheShsZW4gKyAxKS5qb2luKCcgJyk7XG59XG5cbmZ1bmN0aW9uIGxwYWQobGVuLCBzdHIpIHtcbiAgcmV0dXJuIHdoaXRlc3BhY2UobGVuIC0gc3RyLmxlbmd0aCkgKyBzdHI7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2NhdGlvbiBpbiBhIFNvdXJjZS5cbiAqL1xuXG4vKipcbiAqIFRha2VzIGEgU291cmNlIGFuZCBhIFVURi04IGNoYXJhY3RlciBvZmZzZXQsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBsaW5lIGFuZCBjb2x1bW4gYXMgYSBTb3VyY2VMb2NhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oc291cmNlLCBwb3NpdGlvbikge1xuICB2YXIgbGluZVJlZ2V4cCA9IC9cXHJcXG58W1xcblxccl0vZztcbiAgdmFyIGxpbmUgPSAxO1xuICB2YXIgY29sdW1uID0gcG9zaXRpb24gKyAxO1xuICB2YXIgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxpbmVSZWdleHAuZXhlYyhzb3VyY2UuYm9keSkpICYmIG1hdGNoLmluZGV4IDwgcG9zaXRpb24pIHtcbiAgICBsaW5lICs9IDE7XG4gICAgY29sdW1uID0gcG9zaXRpb24gKyAxIC0gKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGluZTogbGluZSxcbiAgICBjb2x1bW46IGNvbHVtblxuICB9O1xufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciBfYSA9IE9iamVjdC5wcm90b3R5cGUsIHRvU3RyaW5nID0gX2EudG9TdHJpbmcsIGhhc093blByb3BlcnR5ID0gX2EuaGFzT3duUHJvcGVydHk7XHJcbnZhciBwcmV2aW91c0NvbXBhcmlzb25zID0gbmV3IE1hcCgpO1xyXG4vKipcclxuICogUGVyZm9ybXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrIG9uIHR3byBKYXZhU2NyaXB0IHZhbHVlcywgdG9sZXJhdGluZyBjeWNsZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBjaGVjayhhLCBiKTtcclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHByZXZpb3VzQ29tcGFyaXNvbnMuY2xlYXIoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjaGVjayhhLCBiKSB7XHJcbiAgICAvLyBJZiB0aGUgdHdvIHZhbHVlcyBhcmUgc3RyaWN0bHkgZXF1YWwsIG91ciBqb2IgaXMgZWFzeS5cclxuICAgIGlmIChhID09PSBiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIHJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVudGltZSB0eXBlIG9mXHJcbiAgICAvLyB0aGUgZ2l2ZW4gdmFsdWUgdGhhdCBpcyBjb25zaWRlcmFibHkgbW9yZSBwcmVjaXNlIHRoYW4gdHlwZW9mLlxyXG4gICAgdmFyIGFUYWcgPSB0b1N0cmluZy5jYWxsKGEpO1xyXG4gICAgdmFyIGJUYWcgPSB0b1N0cmluZy5jYWxsKGIpO1xyXG4gICAgLy8gSWYgdGhlIHJ1bnRpbWUgdHlwZXMgb2YgYSBhbmQgYiBhcmUgZGlmZmVyZW50LCB0aGV5IGNvdWxkIG1heWJlIGJlIGVxdWFsXHJcbiAgICAvLyB1bmRlciBzb21lIGludGVycHJldGF0aW9uIG9mIGVxdWFsaXR5LCBidXQgZm9yIHNpbXBsaWNpdHkgYW5kIHBlcmZvcm1hbmNlXHJcbiAgICAvLyB3ZSBqdXN0IHJldHVybiBmYWxzZSBpbnN0ZWFkLlxyXG4gICAgaWYgKGFUYWcgIT09IGJUYWcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKGFUYWcpIHtcclxuICAgICAgICBjYXNlICdbb2JqZWN0IEFycmF5XSc6XHJcbiAgICAgICAgICAgIC8vIEFycmF5cyBhcmUgYSBsb3QgbGlrZSBvdGhlciBvYmplY3RzLCBidXQgd2UgY2FuIGNoZWFwbHkgY29tcGFyZSB0aGVpclxyXG4gICAgICAgICAgICAvLyBsZW5ndGhzIGFzIGEgc2hvcnQtY3V0IGJlZm9yZSBjb21wYXJpbmcgdGhlaXIgZWxlbWVudHMuXHJcbiAgICAgICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgLy8gRmFsbCB0aHJvdWdoIHRvIG9iamVjdCBjYXNlLi4uXHJcbiAgICAgICAgY2FzZSAnW29iamVjdCBPYmplY3RdJzoge1xyXG4gICAgICAgICAgICBpZiAocHJldmlvdXNseUNvbXBhcmVkKGEsIGIpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgICAgICAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcclxuICAgICAgICAgICAgLy8gSWYgYGFgIGFuZCBgYmAgaGF2ZSBhIGRpZmZlcmVudCBudW1iZXIgb2YgZW51bWVyYWJsZSBrZXlzLCB0aGV5XHJcbiAgICAgICAgICAgIC8vIG11c3QgYmUgZGlmZmVyZW50LlxyXG4gICAgICAgICAgICB2YXIga2V5Q291bnQgPSBhS2V5cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChrZXlDb3VudCAhPT0gYktleXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBOb3cgbWFrZSBzdXJlIHRoZXkgaGF2ZSB0aGUgc2FtZSBrZXlzLlxyXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGtleUNvdW50OyArK2spIHtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChiLCBhS2V5c1trXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRmluYWxseSwgY2hlY2sgZGVlcCBlcXVhbGl0eSBvZiBhbGwgY2hpbGQgcHJvcGVydGllcy5cclxuICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlDb3VudDsgKytrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gYUtleXNba107XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNoZWNrKGFba2V5XSwgYltrZXldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnW29iamVjdCBFcnJvcl0nOlxyXG4gICAgICAgICAgICByZXR1cm4gYS5uYW1lID09PSBiLm5hbWUgJiYgYS5tZXNzYWdlID09PSBiLm1lc3NhZ2U7XHJcbiAgICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcclxuICAgICAgICAgICAgLy8gSGFuZGxlIE5hTiwgd2hpY2ggaXMgIT09IGl0c2VsZi5cclxuICAgICAgICAgICAgaWYgKGEgIT09IGEpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYiAhPT0gYjtcclxuICAgICAgICAvLyBGYWxsIHRocm91Z2ggdG8gc2hhcmVkICthID09PSArYiBjYXNlLi4uXHJcbiAgICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XHJcbiAgICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XHJcbiAgICAgICAgICAgIHJldHVybiArYSA9PT0gK2I7XHJcbiAgICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcclxuICAgICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxyXG4gICAgICAgICAgICByZXR1cm4gYSA9PSBcIlwiICsgYjtcclxuICAgICAgICBjYXNlICdbb2JqZWN0IE1hcF0nOlxyXG4gICAgICAgIGNhc2UgJ1tvYmplY3QgU2V0XSc6IHtcclxuICAgICAgICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAocHJldmlvdXNseUNvbXBhcmVkKGEsIGIpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIHZhciBhSXRlcmF0b3IgPSBhLmVudHJpZXMoKTtcclxuICAgICAgICAgICAgdmFyIGlzTWFwID0gYVRhZyA9PT0gJ1tvYmplY3QgTWFwXSc7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5mbyA9IGFJdGVyYXRvci5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5mby5kb25lKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgYSBpbnN0YW5jZW9mIFNldCwgYVZhbHVlID09PSBhS2V5LlxyXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gaW5mby52YWx1ZSwgYUtleSA9IF9hWzBdLCBhVmFsdWUgPSBfYVsxXTtcclxuICAgICAgICAgICAgICAgIC8vIFNvIHRoaXMgd29ya3MgdGhlIHNhbWUgd2F5IGZvciBib3RoIFNldCBhbmQgTWFwLlxyXG4gICAgICAgICAgICAgICAgaWYgKCFiLmhhcyhhS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIGNhcmUgYWJvdXQgZGVlcCBlcXVhbGl0eSBvZiB2YWx1ZXMgb25seSB3aGVuIGRlYWxpbmdcclxuICAgICAgICAgICAgICAgIC8vIHdpdGggTWFwIHN0cnVjdHVyZXMuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNNYXAgJiYgIWNoZWNrKGFWYWx1ZSwgYi5nZXQoYUtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIE90aGVyd2lzZSB0aGUgdmFsdWVzIGFyZSBub3QgZXF1YWwuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gcHJldmlvdXNseUNvbXBhcmVkKGEsIGIpIHtcclxuICAgIC8vIFRob3VnaCBjeWNsaWMgcmVmZXJlbmNlcyBjYW4gbWFrZSBhbiBvYmplY3QgZ3JhcGggYXBwZWFyIGluZmluaXRlIGZyb20gdGhlXHJcbiAgICAvLyBwZXJzcGVjdGl2ZSBvZiBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCwgdGhlIGdyYXBoIHN0aWxsIGNvbnRhaW5zIGEgZmluaXRlXHJcbiAgICAvLyBudW1iZXIgb2YgZGlzdGluY3Qgb2JqZWN0IHJlZmVyZW5jZXMuIFdlIHVzZSB0aGUgcHJldmlvdXNDb21wYXJpc29ucyBjYWNoZVxyXG4gICAgLy8gdG8gYXZvaWQgY29tcGFyaW5nIHRoZSBzYW1lIHBhaXIgb2Ygb2JqZWN0IHJlZmVyZW5jZXMgbW9yZSB0aGFuIG9uY2UsIHdoaWNoXHJcbiAgICAvLyBndWFyYW50ZWVzIHRlcm1pbmF0aW9uIChldmVuIGlmIHdlIGVuZCB1cCBjb21wYXJpbmcgZXZlcnkgb2JqZWN0IGluIG9uZVxyXG4gICAgLy8gZ3JhcGggdG8gZXZlcnkgb2JqZWN0IGluIHRoZSBvdGhlciBncmFwaCwgd2hpY2ggaXMgZXh0cmVtZWx5IHVubGlrZWx5KSxcclxuICAgIC8vIHdoaWxlIHN0aWxsIGFsbG93aW5nIHdlaXJkIGlzb21vcnBoaWMgc3RydWN0dXJlcyAobGlrZSByaW5ncyB3aXRoIGRpZmZlcmVudFxyXG4gICAgLy8gbGVuZ3RocykgYSBjaGFuY2UgdG8gcGFzcyB0aGUgZXF1YWxpdHkgdGVzdC5cclxuICAgIHZhciBiU2V0ID0gcHJldmlvdXNDb21wYXJpc29ucy5nZXQoYSk7XHJcbiAgICBpZiAoYlNldCkge1xyXG4gICAgICAgIC8vIFJldHVybiB0cnVlIGhlcmUgYmVjYXVzZSB3ZSBjYW4gYmUgc3VyZSBmYWxzZSB3aWxsIGJlIHJldHVybmVkIHNvbWV3aGVyZVxyXG4gICAgICAgIC8vIGVsc2UgaWYgdGhlIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50LlxyXG4gICAgICAgIGlmIChiU2V0LmhhcyhiKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBwcmV2aW91c0NvbXBhcmlzb25zLnNldChhLCBiU2V0ID0gbmV3IFNldCk7XHJcbiAgICB9XHJcbiAgICBiU2V0LmFkZChiKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbDtcbmV4cG9ydCB7IGVxdWFsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcXVhbGl0eS5lc20uanMubWFwXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL09ic2VydmFibGUuanMnKS5PYnNlcnZhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkYXRhLCBvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSBvcHRzID0geyBjbXA6IG9wdHMgfTtcbiAgICB2YXIgY3ljbGVzID0gKHR5cGVvZiBvcHRzLmN5Y2xlcyA9PT0gJ2Jvb2xlYW4nKSA/IG9wdHMuY3ljbGVzIDogZmFsc2U7XG5cbiAgICB2YXIgY21wID0gb3B0cy5jbXAgJiYgKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFvYmogPSB7IGtleTogYSwgdmFsdWU6IG5vZGVbYV0gfTtcbiAgICAgICAgICAgICAgICB2YXIgYm9iaiA9IHsga2V5OiBiLCB2YWx1ZTogbm9kZVtiXSB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBmKGFvYmosIGJvYmopO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9KShvcHRzLmNtcCk7XG5cbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIHJldHVybiAoZnVuY3Rpb24gc3RyaW5naWZ5IChub2RlKSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUudG9KU09OICYmIHR5cGVvZiBub2RlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUudG9KU09OKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSA9PSAnbnVtYmVyJykgcmV0dXJuIGlzRmluaXRlKG5vZGUpID8gJycgKyBub2RlIDogJ251bGwnO1xuICAgICAgICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnKSByZXR1cm4gSlNPTi5zdHJpbmdpZnkobm9kZSk7XG5cbiAgICAgICAgdmFyIGksIG91dDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICAgICAgICAgIG91dCA9ICdbJztcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkpIG91dCArPSAnLCc7XG4gICAgICAgICAgICAgICAgb3V0ICs9IHN0cmluZ2lmeShub2RlW2ldKSB8fCAnbnVsbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0ICsgJ10nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGUgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG5cbiAgICAgICAgaWYgKHNlZW4uaW5kZXhPZihub2RlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChjeWNsZXMpIHJldHVybiBKU09OLnN0cmluZ2lmeSgnX19jeWNsZV9fJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb252ZXJ0aW5nIGNpcmN1bGFyIHN0cnVjdHVyZSB0byBKU09OJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5wdXNoKG5vZGUpIC0gMTtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhub2RlKS5zb3J0KGNtcCAmJiBjbXAobm9kZSkpO1xuICAgICAgICBvdXQgPSAnJztcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc3RyaW5naWZ5KG5vZGVba2V5XSk7XG5cbiAgICAgICAgICAgIGlmICghdmFsdWUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKG91dCkgb3V0ICs9ICcsJztcbiAgICAgICAgICAgIG91dCArPSBKU09OLnN0cmluZ2lmeShrZXkpICsgJzonICsgdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgc2Vlbi5zcGxpY2Uoc2VlbkluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuICd7JyArIG91dCArICd9JztcbiAgICB9KShkYXRhKTtcbn07XG4iLCJpbXBvcnQgQXBvbGxvQ2xpZW50UHJveHkgZnJvbSBcIi4vQXBvbGxvQ2xpZW50UHJveHlcIjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHsgX19BUE9MTE9fQ0xJRU5UX186IEFwb2xsb0NsaWVudFByb3h5IH1cbn1cblxuY29uc3QgYXBvbGxvQ2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudFByb3h5KCk7XG53aW5kb3cuX19BUE9MTE9fQ0xJRU5UX18gPSBhcG9sbG9DbGllbnQ7XG4iLCIvLyBpbXBvcnQgeyBDYWNoZSB9IGZyb20gJ2Fwb2xsby1jYWNoZSc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvcGFyc2VyJztcbmltcG9ydCB7IEFwb2xsb0xpbmsgfSBmcm9tICdhcG9sbG8tbGluayc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwb2xsb0NsaWVudFByb3h5IHtcbiAgcHVibGljIHZlcnNpb246IHN0cmluZztcbiAgcHVibGljIGxpbms6IGFueTtcblxuICBwcml2YXRlIGRldlRvb2xzSG9va0NiOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBldmVudFNvdXJjZT86IEV2ZW50U291cmNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudmVyc2lvbiA9ICcyLjAuMCc7XG4gICAgdGhpcy5ldmVudFNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5saW5rID0gQXBvbGxvTGluay5lbXB0eSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBjYWNoZSgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4ge1xuICAgICAgZXh0cmFjdChvcHRpbWlzdGljOiBib29sZWFuID0gZmFsc2UpOiBvYmplY3Qge1xuICAgICAgICBzZWxmLnN0YXJ0TGlzdGVuaW5nKCk7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWRRdWVyeShvcHRpb25zOiBhbnksIG9wdGltaXN0aWM6IGJvb2xlYW4gPSBmYWxzZSk6IG51bGwge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHN0YXJ0TGlzdGVuaW5nKCkge1xuICAgIHRoaXMuZXZlbnRTb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9ldmVudHMnKTtcbiAgICB0aGlzLmV2ZW50U291cmNlLm9ubWVzc2FnZSA9IG1lc3NhZ2UgPT4ge1xuICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLnRyYW5zZm9ybUV2ZW50KEpTT04ucGFyc2UobWVzc2FnZS5kYXRhKSk7XG4gICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICBpZiAodGhpcy5kZXZUb29sc0hvb2tDYikge1xuICAgICAgICB0aGlzLmRldlRvb2xzSG9va0NiKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHN0b3BMaXN0ZW5pbmcoKSB7XG4gICAgaWYgKHRoaXMuZXZlbnRTb3VyY2UpIHtcbiAgICAgIHRoaXMuZXZlbnRTb3VyY2UuY2xvc2UoKTtcbiAgICAgIHRoaXMuZXZlbnRTb3VyY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBfX2FjdGlvbkhvb2tGb3JEZXZUb29scyhjYjogKCkgPT4gYW55KSB7XG4gICAgdGhpcy5kZXZUb29sc0hvb2tDYiA9IGNiO1xuICB9XG5cbiAgcHJpdmF0ZSB0cmFuc2Zvcm1FdmVudChldmVudDogYW55KTogYW55IHtcbiAgICBPYmplY3Qua2V5cyhldmVudC5zdGF0ZS5xdWVyaWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBldmVudC5zdGF0ZS5xdWVyaWVzW2tleV0uZG9jdW1lbnQgPSBwYXJzZShldmVudC5zdGF0ZS5xdWVyaWVzW2tleV0uZG9jdW1lbnQpO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKGV2ZW50LnN0YXRlLm11dGF0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgZXZlbnQuc3RhdGUubXV0YXRpb25zW2tleV0ubXV0YXRpb24gPSBwYXJzZShldmVudC5zdGF0ZS5tdXRhdGlvbnNba2V5XS5tdXRhdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMucGFyc2VWYWx1ZSA9IHBhcnNlVmFsdWU7XG5leHBvcnRzLnBhcnNlVHlwZSA9IHBhcnNlVHlwZTtcbmV4cG9ydHMucGFyc2VDb25zdFZhbHVlID0gcGFyc2VDb25zdFZhbHVlO1xuZXhwb3J0cy5wYXJzZVR5cGVSZWZlcmVuY2UgPSBwYXJzZVR5cGVSZWZlcmVuY2U7XG5leHBvcnRzLnBhcnNlTmFtZWRUeXBlID0gcGFyc2VOYW1lZFR5cGU7XG5cbnZhciBfaW5zcGVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2pzdXRpbHMvaW5zcGVjdFwiKSk7XG5cbnZhciBfZGVmaW5lVG9KU09OID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vanN1dGlscy9kZWZpbmVUb0pTT05cIikpO1xuXG52YXIgX3NvdXJjZSA9IHJlcXVpcmUoXCIuL3NvdXJjZVwiKTtcblxudmFyIF9lcnJvciA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcblxudmFyIF9sZXhlciA9IHJlcXVpcmUoXCIuL2xleGVyXCIpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZShcIi4va2luZHNcIik7XG5cbnZhciBfZGlyZWN0aXZlTG9jYXRpb24gPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVMb2NhdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4vKipcbiAqIEdpdmVuIGEgR3JhcGhRTCBzb3VyY2UsIHBhcnNlcyBpdCBpbnRvIGEgRG9jdW1lbnQuXG4gKiBUaHJvd3MgR3JhcGhRTEVycm9yIGlmIGEgc3ludGF4IGVycm9yIGlzIGVuY291bnRlcmVkLlxuICovXG5mdW5jdGlvbiBwYXJzZShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZU9iaiA9IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gbmV3IF9zb3VyY2UuU291cmNlKHNvdXJjZSkgOiBzb3VyY2U7XG5cbiAgaWYgKCEoc291cmNlT2JqIGluc3RhbmNlb2YgX3NvdXJjZS5Tb3VyY2UpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgcHJvdmlkZSBTb3VyY2UuIFJlY2VpdmVkOiBcIi5jb25jYXQoKDAsIF9pbnNwZWN0LmRlZmF1bHQpKHNvdXJjZU9iaikpKTtcbiAgfVxuXG4gIHZhciBsZXhlciA9ICgwLCBfbGV4ZXIuY3JlYXRlTGV4ZXIpKHNvdXJjZU9iaiwgb3B0aW9ucyB8fCB7fSk7XG4gIHJldHVybiBwYXJzZURvY3VtZW50KGxleGVyKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgY29udGFpbmluZyBhIEdyYXBoUUwgdmFsdWUgKGV4LiBgWzQyXWApLCBwYXJzZSB0aGUgQVNUIGZvclxuICogdGhhdCB2YWx1ZS5cbiAqIFRocm93cyBHcmFwaFFMRXJyb3IgaWYgYSBzeW50YXggZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgd2l0aGluIHRvb2xzIHRoYXQgb3BlcmF0ZSB1cG9uIEdyYXBoUUwgVmFsdWVzIGRpcmVjdGx5IGFuZFxuICogaW4gaXNvbGF0aW9uIG9mIGNvbXBsZXRlIEdyYXBoUUwgZG9jdW1lbnRzLlxuICpcbiAqIENvbnNpZGVyIHByb3ZpZGluZyB0aGUgcmVzdWx0cyB0byB0aGUgdXRpbGl0eSBmdW5jdGlvbjogdmFsdWVGcm9tQVNUKCkuXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVZhbHVlKHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgc291cmNlT2JqID0gdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgPyBuZXcgX3NvdXJjZS5Tb3VyY2Uoc291cmNlKSA6IHNvdXJjZTtcbiAgdmFyIGxleGVyID0gKDAsIF9sZXhlci5jcmVhdGVMZXhlcikoc291cmNlT2JqLCBvcHRpb25zIHx8IHt9KTtcbiAgZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuU09GKTtcbiAgdmFyIHZhbHVlID0gcGFyc2VWYWx1ZUxpdGVyYWwobGV4ZXIsIGZhbHNlKTtcbiAgZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuRU9GKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBjb250YWluaW5nIGEgR3JhcGhRTCBUeXBlIChleC4gYFtJbnQhXWApLCBwYXJzZSB0aGUgQVNUIGZvclxuICogdGhhdCB0eXBlLlxuICogVGhyb3dzIEdyYXBoUUxFcnJvciBpZiBhIHN5bnRheCBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCB3aXRoaW4gdG9vbHMgdGhhdCBvcGVyYXRlIHVwb24gR3JhcGhRTCBUeXBlcyBkaXJlY3RseSBhbmRcbiAqIGluIGlzb2xhdGlvbiBvZiBjb21wbGV0ZSBHcmFwaFFMIGRvY3VtZW50cy5cbiAqXG4gKiBDb25zaWRlciBwcm92aWRpbmcgdGhlIHJlc3VsdHMgdG8gdGhlIHV0aWxpdHkgZnVuY3Rpb246IHR5cGVGcm9tQVNUKCkuXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVR5cGUoc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2VPYmogPSB0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJyA/IG5ldyBfc291cmNlLlNvdXJjZShzb3VyY2UpIDogc291cmNlO1xuICB2YXIgbGV4ZXIgPSAoMCwgX2xleGVyLmNyZWF0ZUxleGVyKShzb3VyY2VPYmosIG9wdGlvbnMgfHwge30pO1xuICBleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5TT0YpO1xuICB2YXIgdHlwZSA9IHBhcnNlVHlwZVJlZmVyZW5jZShsZXhlcik7XG4gIGV4cGVjdFRva2VuKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkVPRik7XG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIG5hbWUgbGV4IHRva2VuIGludG8gYSBuYW1lIHBhcnNlIG5vZGUuXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZU5hbWUobGV4ZXIpIHtcbiAgdmFyIHRva2VuID0gZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuTkFNRSk7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuTkFNRSxcbiAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHRva2VuKVxuICB9O1xufSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBEb2N1bWVudCBzZWN0aW9uLlxuXG4vKipcbiAqIERvY3VtZW50IDogRGVmaW5pdGlvbitcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQobGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuRE9DVU1FTlQsXG4gICAgZGVmaW5pdGlvbnM6IG1hbnkobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuU09GLCBwYXJzZURlZmluaXRpb24sIF9sZXhlci5Ub2tlbktpbmQuRU9GKSxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIERlZmluaXRpb24gOlxuICogICAtIEV4ZWN1dGFibGVEZWZpbml0aW9uXG4gKiAgIC0gVHlwZVN5c3RlbURlZmluaXRpb25cbiAqICAgLSBUeXBlU3lzdGVtRXh0ZW5zaW9uXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZURlZmluaXRpb24obGV4ZXIpIHtcbiAgaWYgKHBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuTkFNRSkpIHtcbiAgICBzd2l0Y2ggKGxleGVyLnRva2VuLnZhbHVlKSB7XG4gICAgICBjYXNlICdxdWVyeSc6XG4gICAgICBjYXNlICdtdXRhdGlvbic6XG4gICAgICBjYXNlICdzdWJzY3JpcHRpb24nOlxuICAgICAgY2FzZSAnZnJhZ21lbnQnOlxuICAgICAgICByZXR1cm4gcGFyc2VFeGVjdXRhYmxlRGVmaW5pdGlvbihsZXhlcik7XG5cbiAgICAgIGNhc2UgJ3NjaGVtYSc6XG4gICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgY2FzZSAndHlwZSc6XG4gICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgY2FzZSAndW5pb24nOlxuICAgICAgY2FzZSAnZW51bSc6XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICByZXR1cm4gcGFyc2VUeXBlU3lzdGVtRGVmaW5pdGlvbihsZXhlcik7XG5cbiAgICAgIGNhc2UgJ2V4dGVuZCc6XG4gICAgICAgIHJldHVybiBwYXJzZVR5cGVTeXN0ZW1FeHRlbnNpb24obGV4ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wpKSB7XG4gICAgcmV0dXJuIHBhcnNlRXhlY3V0YWJsZURlZmluaXRpb24obGV4ZXIpO1xuICB9IGVsc2UgaWYgKHBlZWtEZXNjcmlwdGlvbihsZXhlcikpIHtcbiAgICByZXR1cm4gcGFyc2VUeXBlU3lzdGVtRGVmaW5pdGlvbihsZXhlcik7XG4gIH1cblxuICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyKTtcbn1cbi8qKlxuICogRXhlY3V0YWJsZURlZmluaXRpb24gOlxuICogICAtIE9wZXJhdGlvbkRlZmluaXRpb25cbiAqICAgLSBGcmFnbWVudERlZmluaXRpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlRXhlY3V0YWJsZURlZmluaXRpb24obGV4ZXIpIHtcbiAgaWYgKHBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuTkFNRSkpIHtcbiAgICBzd2l0Y2ggKGxleGVyLnRva2VuLnZhbHVlKSB7XG4gICAgICBjYXNlICdxdWVyeSc6XG4gICAgICBjYXNlICdtdXRhdGlvbic6XG4gICAgICBjYXNlICdzdWJzY3JpcHRpb24nOlxuICAgICAgICByZXR1cm4gcGFyc2VPcGVyYXRpb25EZWZpbml0aW9uKGxleGVyKTtcblxuICAgICAgY2FzZSAnZnJhZ21lbnQnOlxuICAgICAgICByZXR1cm4gcGFyc2VGcmFnbWVudERlZmluaXRpb24obGV4ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wpKSB7XG4gICAgcmV0dXJuIHBhcnNlT3BlcmF0aW9uRGVmaW5pdGlvbihsZXhlcik7XG4gIH1cblxuICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyKTtcbn0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgT3BlcmF0aW9ucyBzZWN0aW9uLlxuXG4vKipcbiAqIE9wZXJhdGlvbkRlZmluaXRpb24gOlxuICogIC0gU2VsZWN0aW9uU2V0XG4gKiAgLSBPcGVyYXRpb25UeXBlIE5hbWU/IFZhcmlhYmxlRGVmaW5pdGlvbnM/IERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldFxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VPcGVyYXRpb25EZWZpbml0aW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuXG4gIGlmIChwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OLFxuICAgICAgb3BlcmF0aW9uOiAncXVlcnknLFxuICAgICAgbmFtZTogdW5kZWZpbmVkLFxuICAgICAgdmFyaWFibGVEZWZpbml0aW9uczogW10sXG4gICAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICAgIHNlbGVjdGlvblNldDogcGFyc2VTZWxlY3Rpb25TZXQobGV4ZXIpLFxuICAgICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICAgIH07XG4gIH1cblxuICB2YXIgb3BlcmF0aW9uID0gcGFyc2VPcGVyYXRpb25UeXBlKGxleGVyKTtcbiAgdmFyIG5hbWU7XG5cbiAgaWYgKHBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuTkFNRSkpIHtcbiAgICBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgbmFtZTogbmFtZSxcbiAgICB2YXJpYWJsZURlZmluaXRpb25zOiBwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMobGV4ZXIpLFxuICAgIGRpcmVjdGl2ZXM6IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgZmFsc2UpLFxuICAgIHNlbGVjdGlvblNldDogcGFyc2VTZWxlY3Rpb25TZXQobGV4ZXIpLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn1cbi8qKlxuICogT3BlcmF0aW9uVHlwZSA6IG9uZSBvZiBxdWVyeSBtdXRhdGlvbiBzdWJzY3JpcHRpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlT3BlcmF0aW9uVHlwZShsZXhlcikge1xuICB2YXIgb3BlcmF0aW9uVG9rZW4gPSBleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5OQU1FKTtcblxuICBzd2l0Y2ggKG9wZXJhdGlvblRva2VuLnZhbHVlKSB7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgcmV0dXJuICdxdWVyeSc7XG5cbiAgICBjYXNlICdtdXRhdGlvbic6XG4gICAgICByZXR1cm4gJ211dGF0aW9uJztcblxuICAgIGNhc2UgJ3N1YnNjcmlwdGlvbic6XG4gICAgICByZXR1cm4gJ3N1YnNjcmlwdGlvbic7XG4gIH1cblxuICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyLCBvcGVyYXRpb25Ub2tlbik7XG59XG4vKipcbiAqIFZhcmlhYmxlRGVmaW5pdGlvbnMgOiAoIFZhcmlhYmxlRGVmaW5pdGlvbisgKVxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VWYXJpYWJsZURlZmluaXRpb25zKGxleGVyKSB7XG4gIHJldHVybiBwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLlBBUkVOX0wpID8gbWFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5QQVJFTl9MLCBwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbiwgX2xleGVyLlRva2VuS2luZC5QQVJFTl9SKSA6IFtdO1xufVxuLyoqXG4gKiBWYXJpYWJsZURlZmluaXRpb24gOiBWYXJpYWJsZSA6IFR5cGUgRGVmYXVsdFZhbHVlPyBEaXJlY3RpdmVzW0NvbnN0XT9cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlVmFyaWFibGVEZWZpbml0aW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLlZBUklBQkxFX0RFRklOSVRJT04sXG4gICAgdmFyaWFibGU6IHBhcnNlVmFyaWFibGUobGV4ZXIpLFxuICAgIHR5cGU6IChleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5DT0xPTiksIHBhcnNlVHlwZVJlZmVyZW5jZShsZXhlcikpLFxuICAgIGRlZmF1bHRWYWx1ZTogZXhwZWN0T3B0aW9uYWxUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5FUVVBTFMpID8gcGFyc2VWYWx1ZUxpdGVyYWwobGV4ZXIsIHRydWUpIDogdW5kZWZpbmVkLFxuICAgIGRpcmVjdGl2ZXM6IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgdHJ1ZSksXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBWYXJpYWJsZSA6ICQgTmFtZVxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VWYXJpYWJsZShsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuRE9MTEFSKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBfa2luZHMuS2luZC5WQVJJQUJMRSxcbiAgICBuYW1lOiBwYXJzZU5hbWUobGV4ZXIpLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn1cbi8qKlxuICogU2VsZWN0aW9uU2V0IDogeyBTZWxlY3Rpb24rIH1cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlU2VsZWN0aW9uU2V0KGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLlNFTEVDVElPTl9TRVQsXG4gICAgc2VsZWN0aW9uczogbWFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5CUkFDRV9MLCBwYXJzZVNlbGVjdGlvbiwgX2xleGVyLlRva2VuS2luZC5CUkFDRV9SKSxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIFNlbGVjdGlvbiA6XG4gKiAgIC0gRmllbGRcbiAqICAgLSBGcmFnbWVudFNwcmVhZFxuICogICAtIElubGluZUZyYWdtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVNlbGVjdGlvbihsZXhlcikge1xuICByZXR1cm4gcGVlayhsZXhlciwgX2xleGVyLlRva2VuS2luZC5TUFJFQUQpID8gcGFyc2VGcmFnbWVudChsZXhlcikgOiBwYXJzZUZpZWxkKGxleGVyKTtcbn1cbi8qKlxuICogRmllbGQgOiBBbGlhcz8gTmFtZSBBcmd1bWVudHM/IERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldD9cbiAqXG4gKiBBbGlhcyA6IE5hbWUgOlxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VGaWVsZChsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIG5hbWVPckFsaWFzID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgdmFyIGFsaWFzO1xuICB2YXIgbmFtZTtcblxuICBpZiAoZXhwZWN0T3B0aW9uYWxUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5DT0xPTikpIHtcbiAgICBhbGlhcyA9IG5hbWVPckFsaWFzO1xuICAgIG5hbWUgPSBwYXJzZU5hbWUobGV4ZXIpO1xuICB9IGVsc2Uge1xuICAgIG5hbWUgPSBuYW1lT3JBbGlhcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuRklFTEQsXG4gICAgYWxpYXM6IGFsaWFzLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgYXJndW1lbnRzOiBwYXJzZUFyZ3VtZW50cyhsZXhlciwgZmFsc2UpLFxuICAgIGRpcmVjdGl2ZXM6IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgZmFsc2UpLFxuICAgIHNlbGVjdGlvblNldDogcGVlayhsZXhlciwgX2xleGVyLlRva2VuS2luZC5CUkFDRV9MKSA/IHBhcnNlU2VsZWN0aW9uU2V0KGxleGVyKSA6IHVuZGVmaW5lZCxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIEFyZ3VtZW50c1tDb25zdF0gOiAoIEFyZ3VtZW50Wz9Db25zdF0rIClcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzKGxleGVyLCBpc0NvbnN0KSB7XG4gIHZhciBpdGVtID0gaXNDb25zdCA/IHBhcnNlQ29uc3RBcmd1bWVudCA6IHBhcnNlQXJndW1lbnQ7XG4gIHJldHVybiBwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLlBBUkVOX0wpID8gbWFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5QQVJFTl9MLCBpdGVtLCBfbGV4ZXIuVG9rZW5LaW5kLlBBUkVOX1IpIDogW107XG59XG4vKipcbiAqIEFyZ3VtZW50W0NvbnN0XSA6IE5hbWUgOiBWYWx1ZVs/Q29uc3RdXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUFyZ3VtZW50KGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICB2YXIgbmFtZSA9IHBhcnNlTmFtZShsZXhlcik7XG4gIGV4cGVjdFRva2VuKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkNPTE9OKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBfa2luZHMuS2luZC5BUkdVTUVOVCxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHZhbHVlOiBwYXJzZVZhbHVlTGl0ZXJhbChsZXhlciwgZmFsc2UpLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb25zdEFyZ3VtZW50KGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLkFSR1VNRU5ULFxuICAgIG5hbWU6IHBhcnNlTmFtZShsZXhlciksXG4gICAgdmFsdWU6IChleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5DT0xPTiksIHBhcnNlQ29uc3RWYWx1ZShsZXhlcikpLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgRnJhZ21lbnRzIHNlY3Rpb24uXG5cbi8qKlxuICogQ29ycmVzcG9uZHMgdG8gYm90aCBGcmFnbWVudFNwcmVhZCBhbmQgSW5saW5lRnJhZ21lbnQgaW4gdGhlIHNwZWMuXG4gKlxuICogRnJhZ21lbnRTcHJlYWQgOiAuLi4gRnJhZ21lbnROYW1lIERpcmVjdGl2ZXM/XG4gKlxuICogSW5saW5lRnJhZ21lbnQgOiAuLi4gVHlwZUNvbmRpdGlvbj8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUZyYWdtZW50KGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICBleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5TUFJFQUQpO1xuICB2YXIgaGFzVHlwZUNvbmRpdGlvbiA9IGV4cGVjdE9wdGlvbmFsS2V5d29yZChsZXhlciwgJ29uJyk7XG5cbiAgaWYgKCFoYXNUeXBlQ29uZGl0aW9uICYmIHBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuTkFNRSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuRlJBR01FTlRfU1BSRUFELFxuICAgICAgbmFtZTogcGFyc2VGcmFnbWVudE5hbWUobGV4ZXIpLFxuICAgICAgZGlyZWN0aXZlczogcGFyc2VEaXJlY3RpdmVzKGxleGVyLCBmYWxzZSksXG4gICAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuSU5MSU5FX0ZSQUdNRU5ULFxuICAgIHR5cGVDb25kaXRpb246IGhhc1R5cGVDb25kaXRpb24gPyBwYXJzZU5hbWVkVHlwZShsZXhlcikgOiB1bmRlZmluZWQsXG4gICAgZGlyZWN0aXZlczogcGFyc2VEaXJlY3RpdmVzKGxleGVyLCBmYWxzZSksXG4gICAgc2VsZWN0aW9uU2V0OiBwYXJzZVNlbGVjdGlvblNldChsZXhlciksXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBGcmFnbWVudERlZmluaXRpb24gOlxuICogICAtIGZyYWdtZW50IEZyYWdtZW50TmFtZSBvbiBUeXBlQ29uZGl0aW9uIERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldFxuICpcbiAqIFR5cGVDb25kaXRpb24gOiBOYW1lZFR5cGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlRnJhZ21lbnREZWZpbml0aW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICBleHBlY3RLZXl3b3JkKGxleGVyLCAnZnJhZ21lbnQnKTsgLy8gRXhwZXJpbWVudGFsIHN1cHBvcnQgZm9yIGRlZmluaW5nIHZhcmlhYmxlcyB3aXRoaW4gZnJhZ21lbnRzIGNoYW5nZXNcbiAgLy8gdGhlIGdyYW1tYXIgb2YgRnJhZ21lbnREZWZpbml0aW9uOlxuICAvLyAgIC0gZnJhZ21lbnQgRnJhZ21lbnROYW1lIFZhcmlhYmxlRGVmaW5pdGlvbnM/IG9uIFR5cGVDb25kaXRpb24gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG5cbiAgaWYgKGxleGVyLm9wdGlvbnMuZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuRlJBR01FTlRfREVGSU5JVElPTixcbiAgICAgIG5hbWU6IHBhcnNlRnJhZ21lbnROYW1lKGxleGVyKSxcbiAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IHBhcnNlVmFyaWFibGVEZWZpbml0aW9ucyhsZXhlciksXG4gICAgICB0eXBlQ29uZGl0aW9uOiAoZXhwZWN0S2V5d29yZChsZXhlciwgJ29uJyksIHBhcnNlTmFtZWRUeXBlKGxleGVyKSksXG4gICAgICBkaXJlY3RpdmVzOiBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIGZhbHNlKSxcbiAgICAgIHNlbGVjdGlvblNldDogcGFyc2VTZWxlY3Rpb25TZXQobGV4ZXIpLFxuICAgICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT04sXG4gICAgbmFtZTogcGFyc2VGcmFnbWVudE5hbWUobGV4ZXIpLFxuICAgIHR5cGVDb25kaXRpb246IChleHBlY3RLZXl3b3JkKGxleGVyLCAnb24nKSwgcGFyc2VOYW1lZFR5cGUobGV4ZXIpKSxcbiAgICBkaXJlY3RpdmVzOiBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIGZhbHNlKSxcbiAgICBzZWxlY3Rpb25TZXQ6IHBhcnNlU2VsZWN0aW9uU2V0KGxleGVyKSxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIEZyYWdtZW50TmFtZSA6IE5hbWUgYnV0IG5vdCBgb25gXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUZyYWdtZW50TmFtZShsZXhlcikge1xuICBpZiAobGV4ZXIudG9rZW4udmFsdWUgPT09ICdvbicpIHtcbiAgICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZU5hbWUobGV4ZXIpO1xufSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBWYWx1ZXMgc2VjdGlvbi5cblxuLyoqXG4gKiBWYWx1ZVtDb25zdF0gOlxuICogICAtIFt+Q29uc3RdIFZhcmlhYmxlXG4gKiAgIC0gSW50VmFsdWVcbiAqICAgLSBGbG9hdFZhbHVlXG4gKiAgIC0gU3RyaW5nVmFsdWVcbiAqICAgLSBCb29sZWFuVmFsdWVcbiAqICAgLSBOdWxsVmFsdWVcbiAqICAgLSBFbnVtVmFsdWVcbiAqICAgLSBMaXN0VmFsdWVbP0NvbnN0XVxuICogICAtIE9iamVjdFZhbHVlWz9Db25zdF1cbiAqXG4gKiBCb29sZWFuVmFsdWUgOiBvbmUgb2YgYHRydWVgIGBmYWxzZWBcbiAqXG4gKiBOdWxsVmFsdWUgOiBgbnVsbGBcbiAqXG4gKiBFbnVtVmFsdWUgOiBOYW1lIGJ1dCBub3QgYHRydWVgLCBgZmFsc2VgIG9yIGBudWxsYFxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VWYWx1ZUxpdGVyYWwobGV4ZXIsIGlzQ29uc3QpIHtcbiAgdmFyIHRva2VuID0gbGV4ZXIudG9rZW47XG5cbiAgc3dpdGNoICh0b2tlbi5raW5kKSB7XG4gICAgY2FzZSBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNLRVRfTDpcbiAgICAgIHJldHVybiBwYXJzZUxpc3QobGV4ZXIsIGlzQ29uc3QpO1xuXG4gICAgY2FzZSBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0w6XG4gICAgICByZXR1cm4gcGFyc2VPYmplY3QobGV4ZXIsIGlzQ29uc3QpO1xuXG4gICAgY2FzZSBfbGV4ZXIuVG9rZW5LaW5kLklOVDpcbiAgICAgIGxleGVyLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLklOVCxcbiAgICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgICBsb2M6IGxvYyhsZXhlciwgdG9rZW4pXG4gICAgICB9O1xuXG4gICAgY2FzZSBfbGV4ZXIuVG9rZW5LaW5kLkZMT0FUOlxuICAgICAgbGV4ZXIuYWR2YW5jZSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogX2tpbmRzLktpbmQuRkxPQVQsXG4gICAgICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICAgICAgbG9jOiBsb2MobGV4ZXIsIHRva2VuKVxuICAgICAgfTtcblxuICAgIGNhc2UgX2xleGVyLlRva2VuS2luZC5TVFJJTkc6XG4gICAgY2FzZSBfbGV4ZXIuVG9rZW5LaW5kLkJMT0NLX1NUUklORzpcbiAgICAgIHJldHVybiBwYXJzZVN0cmluZ0xpdGVyYWwobGV4ZXIpO1xuXG4gICAgY2FzZSBfbGV4ZXIuVG9rZW5LaW5kLk5BTUU6XG4gICAgICBpZiAodG9rZW4udmFsdWUgPT09ICd0cnVlJyB8fCB0b2tlbi52YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICBsZXhlci5hZHZhbmNlKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogX2tpbmRzLktpbmQuQk9PTEVBTixcbiAgICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUgPT09ICd0cnVlJyxcbiAgICAgICAgICBsb2M6IGxvYyhsZXhlciwgdG9rZW4pXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnbnVsbCcpIHtcbiAgICAgICAgbGV4ZXIuYWR2YW5jZSgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk5VTEwsXG4gICAgICAgICAgbG9jOiBsb2MobGV4ZXIsIHRva2VuKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBsZXhlci5hZHZhbmNlKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBfa2luZHMuS2luZC5FTlVNLFxuICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICAgIGxvYzogbG9jKGxleGVyLCB0b2tlbilcbiAgICAgIH07XG5cbiAgICBjYXNlIF9sZXhlci5Ub2tlbktpbmQuRE9MTEFSOlxuICAgICAgaWYgKCFpc0NvbnN0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZVZhcmlhYmxlKGxleGVyKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH1cblxuICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTdHJpbmdMaXRlcmFsKGxleGVyKSB7XG4gIHZhciB0b2tlbiA9IGxleGVyLnRva2VuO1xuICBsZXhlci5hZHZhbmNlKCk7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuU1RSSU5HLFxuICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICBibG9jazogdG9rZW4ua2luZCA9PT0gX2xleGVyLlRva2VuS2luZC5CTE9DS19TVFJJTkcsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHRva2VuKVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZUNvbnN0VmFsdWUobGV4ZXIpIHtcbiAgcmV0dXJuIHBhcnNlVmFsdWVMaXRlcmFsKGxleGVyLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VWYWx1ZVZhbHVlKGxleGVyKSB7XG4gIHJldHVybiBwYXJzZVZhbHVlTGl0ZXJhbChsZXhlciwgZmFsc2UpO1xufVxuLyoqXG4gKiBMaXN0VmFsdWVbQ29uc3RdIDpcbiAqICAgLSBbIF1cbiAqICAgLSBbIFZhbHVlWz9Db25zdF0rIF1cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlTGlzdChsZXhlciwgaXNDb25zdCkge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIGl0ZW0gPSBpc0NvbnN0ID8gcGFyc2VDb25zdFZhbHVlIDogcGFyc2VWYWx1ZVZhbHVlO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLkxJU1QsXG4gICAgdmFsdWVzOiBhbnkobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuQlJBQ0tFVF9MLCBpdGVtLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNLRVRfUiksXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBPYmplY3RWYWx1ZVtDb25zdF0gOlxuICogICAtIHsgfVxuICogICAtIHsgT2JqZWN0RmllbGRbP0NvbnN0XSsgfVxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VPYmplY3QobGV4ZXIsIGlzQ29uc3QpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG5cbiAgdmFyIGl0ZW0gPSBmdW5jdGlvbiBpdGVtKCkge1xuICAgIHJldHVybiBwYXJzZU9iamVjdEZpZWxkKGxleGVyLCBpc0NvbnN0KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVCxcbiAgICBmaWVsZHM6IGFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5CUkFDRV9MLCBpdGVtLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX1IpLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn1cbi8qKlxuICogT2JqZWN0RmllbGRbQ29uc3RdIDogTmFtZSA6IFZhbHVlWz9Db25zdF1cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlT2JqZWN0RmllbGQobGV4ZXIsIGlzQ29uc3QpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIHZhciBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuQ09MT04pO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVF9GSUVMRCxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHZhbHVlOiBwYXJzZVZhbHVlTGl0ZXJhbChsZXhlciwgaXNDb25zdCksXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBEaXJlY3RpdmVzIHNlY3Rpb24uXG5cbi8qKlxuICogRGlyZWN0aXZlc1tDb25zdF0gOiBEaXJlY3RpdmVbP0NvbnN0XStcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgaXNDb25zdCkge1xuICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xuXG4gIHdoaWxlIChwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkFUKSkge1xuICAgIGRpcmVjdGl2ZXMucHVzaChwYXJzZURpcmVjdGl2ZShsZXhlciwgaXNDb25zdCkpO1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGl2ZXM7XG59XG4vKipcbiAqIERpcmVjdGl2ZVtDb25zdF0gOiBAIE5hbWUgQXJndW1lbnRzWz9Db25zdF0/XG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZURpcmVjdGl2ZShsZXhlciwgaXNDb25zdCkge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuQVQpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLkRJUkVDVElWRSxcbiAgICBuYW1lOiBwYXJzZU5hbWUobGV4ZXIpLFxuICAgIGFyZ3VtZW50czogcGFyc2VBcmd1bWVudHMobGV4ZXIsIGlzQ29uc3QpLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgVHlwZXMgc2VjdGlvbi5cblxuLyoqXG4gKiBUeXBlIDpcbiAqICAgLSBOYW1lZFR5cGVcbiAqICAgLSBMaXN0VHlwZVxuICogICAtIE5vbk51bGxUeXBlXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVR5cGVSZWZlcmVuY2UobGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIHZhciB0eXBlO1xuXG4gIGlmIChleHBlY3RPcHRpb25hbFRva2VuKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNLRVRfTCkpIHtcbiAgICB0eXBlID0gcGFyc2VUeXBlUmVmZXJlbmNlKGxleGVyKTtcbiAgICBleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5CUkFDS0VUX1IpO1xuICAgIHR5cGUgPSB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5MSVNUX1RZUEUsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdHlwZSA9IHBhcnNlTmFtZWRUeXBlKGxleGVyKTtcbiAgfVxuXG4gIGlmIChleHBlY3RPcHRpb25hbFRva2VuKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJBTkcpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk5PTl9OVUxMX1RZUEUsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogTmFtZWRUeXBlIDogTmFtZVxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VOYW1lZFR5cGUobGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuTkFNRURfVFlQRSxcbiAgICBuYW1lOiBwYXJzZU5hbWUobGV4ZXIpLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgVHlwZSBEZWZpbml0aW9uIHNlY3Rpb24uXG5cbi8qKlxuICogVHlwZVN5c3RlbURlZmluaXRpb24gOlxuICogICAtIFNjaGVtYURlZmluaXRpb25cbiAqICAgLSBUeXBlRGVmaW5pdGlvblxuICogICAtIERpcmVjdGl2ZURlZmluaXRpb25cbiAqXG4gKiBUeXBlRGVmaW5pdGlvbiA6XG4gKiAgIC0gU2NhbGFyVHlwZURlZmluaXRpb25cbiAqICAgLSBPYmplY3RUeXBlRGVmaW5pdGlvblxuICogICAtIEludGVyZmFjZVR5cGVEZWZpbml0aW9uXG4gKiAgIC0gVW5pb25UeXBlRGVmaW5pdGlvblxuICogICAtIEVudW1UeXBlRGVmaW5pdGlvblxuICogICAtIElucHV0T2JqZWN0VHlwZURlZmluaXRpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlVHlwZVN5c3RlbURlZmluaXRpb24obGV4ZXIpIHtcbiAgLy8gTWFueSBkZWZpbml0aW9ucyBiZWdpbiB3aXRoIGEgZGVzY3JpcHRpb24gYW5kIHJlcXVpcmUgYSBsb29rYWhlYWQuXG4gIHZhciBrZXl3b3JkVG9rZW4gPSBwZWVrRGVzY3JpcHRpb24obGV4ZXIpID8gbGV4ZXIubG9va2FoZWFkKCkgOiBsZXhlci50b2tlbjtcblxuICBpZiAoa2V5d29yZFRva2VuLmtpbmQgPT09IF9sZXhlci5Ub2tlbktpbmQuTkFNRSkge1xuICAgIHN3aXRjaCAoa2V5d29yZFRva2VuLnZhbHVlKSB7XG4gICAgICBjYXNlICdzY2hlbWEnOlxuICAgICAgICByZXR1cm4gcGFyc2VTY2hlbWFEZWZpbml0aW9uKGxleGVyKTtcblxuICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgcmV0dXJuIHBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgcmV0dXJuIHBhcnNlT2JqZWN0VHlwZURlZmluaXRpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgICByZXR1cm4gcGFyc2VJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbihsZXhlcik7XG5cbiAgICAgIGNhc2UgJ3VuaW9uJzpcbiAgICAgICAgcmV0dXJuIHBhcnNlVW5pb25UeXBlRGVmaW5pdGlvbihsZXhlcik7XG5cbiAgICAgIGNhc2UgJ2VudW0nOlxuICAgICAgICByZXR1cm4gcGFyc2VFbnVtVHlwZURlZmluaXRpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIHJldHVybiBwYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICByZXR1cm4gcGFyc2VEaXJlY3RpdmVEZWZpbml0aW9uKGxleGVyKTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyLCBrZXl3b3JkVG9rZW4pO1xufVxuXG5mdW5jdGlvbiBwZWVrRGVzY3JpcHRpb24obGV4ZXIpIHtcbiAgcmV0dXJuIHBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuU1RSSU5HKSB8fCBwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJMT0NLX1NUUklORyk7XG59XG4vKipcbiAqIERlc2NyaXB0aW9uIDogU3RyaW5nVmFsdWVcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlRGVzY3JpcHRpb24obGV4ZXIpIHtcbiAgaWYgKHBlZWtEZXNjcmlwdGlvbihsZXhlcikpIHtcbiAgICByZXR1cm4gcGFyc2VTdHJpbmdMaXRlcmFsKGxleGVyKTtcbiAgfVxufVxuLyoqXG4gKiBTY2hlbWFEZWZpbml0aW9uIDogc2NoZW1hIERpcmVjdGl2ZXNbQ29uc3RdPyB7IE9wZXJhdGlvblR5cGVEZWZpbml0aW9uKyB9XG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVNjaGVtYURlZmluaXRpb24obGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdzY2hlbWEnKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICB2YXIgb3BlcmF0aW9uVHlwZXMgPSBtYW55KGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wsIHBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24sIF9sZXhlci5Ub2tlbktpbmQuQlJBQ0VfUik7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuU0NIRU1BX0RFRklOSVRJT04sXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICBvcGVyYXRpb25UeXBlczogb3BlcmF0aW9uVHlwZXMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiA6IE9wZXJhdGlvblR5cGUgOiBOYW1lZFR5cGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24obGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIHZhciBvcGVyYXRpb24gPSBwYXJzZU9wZXJhdGlvblR5cGUobGV4ZXIpO1xuICBleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5DT0xPTik7XG4gIHZhciB0eXBlID0gcGFyc2VOYW1lZFR5cGUobGV4ZXIpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9QRVJBVElPTl9UWVBFX0RFRklOSVRJT04sXG4gICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgdHlwZTogdHlwZSxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIFNjYWxhclR5cGVEZWZpbml0aW9uIDogRGVzY3JpcHRpb24/IHNjYWxhciBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdP1xuICovXG5cblxuZnVuY3Rpb24gcGFyc2VTY2FsYXJUeXBlRGVmaW5pdGlvbihsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIGRlc2NyaXB0aW9uID0gcGFyc2VEZXNjcmlwdGlvbihsZXhlcik7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdzY2FsYXInKTtcbiAgdmFyIG5hbWUgPSBwYXJzZU5hbWUobGV4ZXIpO1xuICB2YXIgZGlyZWN0aXZlcyA9IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgdHJ1ZSk7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTixcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgbmFtZTogbmFtZSxcbiAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn1cbi8qKlxuICogT2JqZWN0VHlwZURlZmluaXRpb24gOlxuICogICBEZXNjcmlwdGlvbj9cbiAqICAgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvbj9cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlT2JqZWN0VHlwZURlZmluaXRpb24obGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIHZhciBkZXNjcmlwdGlvbiA9IHBhcnNlRGVzY3JpcHRpb24obGV4ZXIpO1xuICBleHBlY3RLZXl3b3JkKGxleGVyLCAndHlwZScpO1xuICB2YXIgbmFtZSA9IHBhcnNlTmFtZShsZXhlcik7XG4gIHZhciBpbnRlcmZhY2VzID0gcGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcyhsZXhlcik7XG4gIHZhciBkaXJlY3RpdmVzID0gcGFyc2VEaXJlY3RpdmVzKGxleGVyLCB0cnVlKTtcbiAgdmFyIGZpZWxkcyA9IHBhcnNlRmllbGRzRGVmaW5pdGlvbihsZXhlcik7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTixcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgbmFtZTogbmFtZSxcbiAgICBpbnRlcmZhY2VzOiBpbnRlcmZhY2VzLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgZmllbGRzOiBmaWVsZHMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzSW50ZXJmYWNlcyA6XG4gKiAgIC0gaW1wbGVtZW50cyBgJmA/IE5hbWVkVHlwZVxuICogICAtIEltcGxlbWVudHNJbnRlcmZhY2VzICYgTmFtZWRUeXBlXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKGxleGVyKSB7XG4gIHZhciB0eXBlcyA9IFtdO1xuXG4gIGlmIChleHBlY3RPcHRpb25hbEtleXdvcmQobGV4ZXIsICdpbXBsZW1lbnRzJykpIHtcbiAgICAvLyBPcHRpb25hbCBsZWFkaW5nIGFtcGVyc2FuZFxuICAgIGV4cGVjdE9wdGlvbmFsVG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuQU1QKTtcblxuICAgIGRvIHtcbiAgICAgIHR5cGVzLnB1c2gocGFyc2VOYW1lZFR5cGUobGV4ZXIpKTtcbiAgICB9IHdoaWxlIChleHBlY3RPcHRpb25hbFRva2VuKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkFNUCkgfHwgLy8gTGVnYWN5IHN1cHBvcnQgZm9yIHRoZSBTREw/XG4gICAgbGV4ZXIub3B0aW9ucy5hbGxvd0xlZ2FjeVNETEltcGxlbWVudHNJbnRlcmZhY2VzICYmIHBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuTkFNRSkpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVzO1xufVxuLyoqXG4gKiBGaWVsZHNEZWZpbml0aW9uIDogeyBGaWVsZERlZmluaXRpb24rIH1cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlRmllbGRzRGVmaW5pdGlvbihsZXhlcikge1xuICAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgdGhlIFNETD9cbiAgaWYgKGxleGVyLm9wdGlvbnMuYWxsb3dMZWdhY3lTRExFbXB0eUZpZWxkcyAmJiBwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wpICYmIGxleGVyLmxvb2thaGVhZCgpLmtpbmQgPT09IF9sZXhlci5Ub2tlbktpbmQuQlJBQ0VfUikge1xuICAgIGxleGVyLmFkdmFuY2UoKTtcbiAgICBsZXhlci5hZHZhbmNlKCk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIHBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuQlJBQ0VfTCkgPyBtYW55KGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wsIHBhcnNlRmllbGREZWZpbml0aW9uLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX1IpIDogW107XG59XG4vKipcbiAqIEZpZWxkRGVmaW5pdGlvbiA6XG4gKiAgIC0gRGVzY3JpcHRpb24/IE5hbWUgQXJndW1lbnRzRGVmaW5pdGlvbj8gOiBUeXBlIERpcmVjdGl2ZXNbQ29uc3RdP1xuICovXG5cblxuZnVuY3Rpb24gcGFyc2VGaWVsZERlZmluaXRpb24obGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIHZhciBkZXNjcmlwdGlvbiA9IHBhcnNlRGVzY3JpcHRpb24obGV4ZXIpO1xuICB2YXIgbmFtZSA9IHBhcnNlTmFtZShsZXhlcik7XG4gIHZhciBhcmdzID0gcGFyc2VBcmd1bWVudERlZnMobGV4ZXIpO1xuICBleHBlY3RUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5DT0xPTik7XG4gIHZhciB0eXBlID0gcGFyc2VUeXBlUmVmZXJlbmNlKGxleGVyKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLkZJRUxEX0RFRklOSVRJT04sXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgYXJndW1lbnRzOiBhcmdzLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIEFyZ3VtZW50c0RlZmluaXRpb24gOiAoIElucHV0VmFsdWVEZWZpbml0aW9uKyApXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUFyZ3VtZW50RGVmcyhsZXhlcikge1xuICBpZiAoIXBlZWsobGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuUEFSRU5fTCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gbWFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5QQVJFTl9MLCBwYXJzZUlucHV0VmFsdWVEZWYsIF9sZXhlci5Ub2tlbktpbmQuUEFSRU5fUik7XG59XG4vKipcbiAqIElucHV0VmFsdWVEZWZpbml0aW9uIDpcbiAqICAgLSBEZXNjcmlwdGlvbj8gTmFtZSA6IFR5cGUgRGVmYXVsdFZhbHVlPyBEaXJlY3RpdmVzW0NvbnN0XT9cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlSW5wdXRWYWx1ZURlZihsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIGRlc2NyaXB0aW9uID0gcGFyc2VEZXNjcmlwdGlvbihsZXhlcik7XG4gIHZhciBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuQ09MT04pO1xuICB2YXIgdHlwZSA9IHBhcnNlVHlwZVJlZmVyZW5jZShsZXhlcik7XG4gIHZhciBkZWZhdWx0VmFsdWU7XG5cbiAgaWYgKGV4cGVjdE9wdGlvbmFsVG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuRVFVQUxTKSkge1xuICAgIGRlZmF1bHRWYWx1ZSA9IHBhcnNlQ29uc3RWYWx1ZShsZXhlcik7XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlcyA9IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgdHJ1ZSk7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuSU5QVVRfVkFMVUVfREVGSU5JVElPTixcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgbmFtZTogbmFtZSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbiA6XG4gKiAgIC0gRGVzY3JpcHRpb24/IGludGVyZmFjZSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uP1xuICovXG5cblxuZnVuY3Rpb24gcGFyc2VJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbihsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIGRlc2NyaXB0aW9uID0gcGFyc2VEZXNjcmlwdGlvbihsZXhlcik7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdpbnRlcmZhY2UnKTtcbiAgdmFyIG5hbWUgPSBwYXJzZU5hbWUobGV4ZXIpO1xuICB2YXIgZGlyZWN0aXZlcyA9IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgdHJ1ZSk7XG4gIHZhciBmaWVsZHMgPSBwYXJzZUZpZWxkc0RlZmluaXRpb24obGV4ZXIpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04sXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIFVuaW9uVHlwZURlZmluaXRpb24gOlxuICogICAtIERlc2NyaXB0aW9uPyB1bmlvbiBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBVbmlvbk1lbWJlclR5cGVzP1xuICovXG5cblxuZnVuY3Rpb24gcGFyc2VVbmlvblR5cGVEZWZpbml0aW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICB2YXIgZGVzY3JpcHRpb24gPSBwYXJzZURlc2NyaXB0aW9uKGxleGVyKTtcbiAgZXhwZWN0S2V5d29yZChsZXhlciwgJ3VuaW9uJyk7XG4gIHZhciBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICB2YXIgdHlwZXMgPSBwYXJzZVVuaW9uTWVtYmVyVHlwZXMobGV4ZXIpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTixcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgbmFtZTogbmFtZSxcbiAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgIHR5cGVzOiB0eXBlcyxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIFVuaW9uTWVtYmVyVHlwZXMgOlxuICogICAtID0gYHxgPyBOYW1lZFR5cGVcbiAqICAgLSBVbmlvbk1lbWJlclR5cGVzIHwgTmFtZWRUeXBlXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVVuaW9uTWVtYmVyVHlwZXMobGV4ZXIpIHtcbiAgdmFyIHR5cGVzID0gW107XG5cbiAgaWYgKGV4cGVjdE9wdGlvbmFsVG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuRVFVQUxTKSkge1xuICAgIC8vIE9wdGlvbmFsIGxlYWRpbmcgcGlwZVxuICAgIGV4cGVjdE9wdGlvbmFsVG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuUElQRSk7XG5cbiAgICBkbyB7XG4gICAgICB0eXBlcy5wdXNoKHBhcnNlTmFtZWRUeXBlKGxleGVyKSk7XG4gICAgfSB3aGlsZSAoZXhwZWN0T3B0aW9uYWxUb2tlbihsZXhlciwgX2xleGVyLlRva2VuS2luZC5QSVBFKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZXM7XG59XG4vKipcbiAqIEVudW1UeXBlRGVmaW5pdGlvbiA6XG4gKiAgIC0gRGVzY3JpcHRpb24/IGVudW0gTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gRW51bVZhbHVlc0RlZmluaXRpb24/XG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUVudW1UeXBlRGVmaW5pdGlvbihsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIGRlc2NyaXB0aW9uID0gcGFyc2VEZXNjcmlwdGlvbihsZXhlcik7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdlbnVtJyk7XG4gIHZhciBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICB2YXIgdmFsdWVzID0gcGFyc2VFbnVtVmFsdWVzRGVmaW5pdGlvbihsZXhlcik7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuRU5VTV9UWVBFX0RFRklOSVRJT04sXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIEVudW1WYWx1ZXNEZWZpbml0aW9uIDogeyBFbnVtVmFsdWVEZWZpbml0aW9uKyB9XG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uKGxleGVyKSB7XG4gIHJldHVybiBwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wpID8gbWFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5CUkFDRV9MLCBwYXJzZUVudW1WYWx1ZURlZmluaXRpb24sIF9sZXhlci5Ub2tlbktpbmQuQlJBQ0VfUikgOiBbXTtcbn1cbi8qKlxuICogRW51bVZhbHVlRGVmaW5pdGlvbiA6IERlc2NyaXB0aW9uPyBFbnVtVmFsdWUgRGlyZWN0aXZlc1tDb25zdF0/XG4gKlxuICogRW51bVZhbHVlIDogTmFtZVxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VFbnVtVmFsdWVEZWZpbml0aW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICB2YXIgZGVzY3JpcHRpb24gPSBwYXJzZURlc2NyaXB0aW9uKGxleGVyKTtcbiAgdmFyIG5hbWUgPSBwYXJzZU5hbWUobGV4ZXIpO1xuICB2YXIgZGlyZWN0aXZlcyA9IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgdHJ1ZSk7XG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuRU5VTV9WQUxVRV9ERUZJTklUSU9OLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICBuYW1lOiBuYW1lLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uIDpcbiAqICAgLSBEZXNjcmlwdGlvbj8gaW5wdXQgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gSW5wdXRGaWVsZHNEZWZpbml0aW9uP1xuICovXG5cblxuZnVuY3Rpb24gcGFyc2VJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICB2YXIgZGVzY3JpcHRpb24gPSBwYXJzZURlc2NyaXB0aW9uKGxleGVyKTtcbiAgZXhwZWN0S2V5d29yZChsZXhlciwgJ2lucHV0Jyk7XG4gIHZhciBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICB2YXIgZmllbGRzID0gcGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24obGV4ZXIpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT04sXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIElucHV0RmllbGRzRGVmaW5pdGlvbiA6IHsgSW5wdXRWYWx1ZURlZmluaXRpb24rIH1cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlSW5wdXRGaWVsZHNEZWZpbml0aW9uKGxleGVyKSB7XG4gIHJldHVybiBwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wpID8gbWFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5CUkFDRV9MLCBwYXJzZUlucHV0VmFsdWVEZWYsIF9sZXhlci5Ub2tlbktpbmQuQlJBQ0VfUikgOiBbXTtcbn1cbi8qKlxuICogVHlwZVN5c3RlbUV4dGVuc2lvbiA6XG4gKiAgIC0gU2NoZW1hRXh0ZW5zaW9uXG4gKiAgIC0gVHlwZUV4dGVuc2lvblxuICpcbiAqIFR5cGVFeHRlbnNpb24gOlxuICogICAtIFNjYWxhclR5cGVFeHRlbnNpb25cbiAqICAgLSBPYmplY3RUeXBlRXh0ZW5zaW9uXG4gKiAgIC0gSW50ZXJmYWNlVHlwZUV4dGVuc2lvblxuICogICAtIFVuaW9uVHlwZUV4dGVuc2lvblxuICogICAtIEVudW1UeXBlRXh0ZW5zaW9uXG4gKiAgIC0gSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvblxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uKGxleGVyKSB7XG4gIHZhciBrZXl3b3JkVG9rZW4gPSBsZXhlci5sb29rYWhlYWQoKTtcblxuICBpZiAoa2V5d29yZFRva2VuLmtpbmQgPT09IF9sZXhlci5Ub2tlbktpbmQuTkFNRSkge1xuICAgIHN3aXRjaCAoa2V5d29yZFRva2VuLnZhbHVlKSB7XG4gICAgICBjYXNlICdzY2hlbWEnOlxuICAgICAgICByZXR1cm4gcGFyc2VTY2hlbWFFeHRlbnNpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICByZXR1cm4gcGFyc2VTY2FsYXJUeXBlRXh0ZW5zaW9uKGxleGVyKTtcblxuICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgIHJldHVybiBwYXJzZU9iamVjdFR5cGVFeHRlbnNpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgICByZXR1cm4gcGFyc2VJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uKGxleGVyKTtcblxuICAgICAgY2FzZSAndW5pb24nOlxuICAgICAgICByZXR1cm4gcGFyc2VVbmlvblR5cGVFeHRlbnNpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgcmV0dXJuIHBhcnNlRW51bVR5cGVFeHRlbnNpb24obGV4ZXIpO1xuXG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIHJldHVybiBwYXJzZUlucHV0T2JqZWN0VHlwZUV4dGVuc2lvbihsZXhlcik7XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgdW5leHBlY3RlZChsZXhlciwga2V5d29yZFRva2VuKTtcbn1cbi8qKlxuICogU2NoZW1hRXh0ZW5zaW9uIDpcbiAqICAtIGV4dGVuZCBzY2hlbWEgRGlyZWN0aXZlc1tDb25zdF0/IHsgT3BlcmF0aW9uVHlwZURlZmluaXRpb24rIH1cbiAqICAtIGV4dGVuZCBzY2hlbWEgRGlyZWN0aXZlc1tDb25zdF1cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlU2NoZW1hRXh0ZW5zaW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICBleHBlY3RLZXl3b3JkKGxleGVyLCAnZXh0ZW5kJyk7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdzY2hlbWEnKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICB2YXIgb3BlcmF0aW9uVHlwZXMgPSBwZWVrKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX0wpID8gbWFueShsZXhlciwgX2xleGVyLlRva2VuS2luZC5CUkFDRV9MLCBwYXJzZU9wZXJhdGlvblR5cGVEZWZpbml0aW9uLCBfbGV4ZXIuVG9rZW5LaW5kLkJSQUNFX1IpIDogW107XG5cbiAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIG9wZXJhdGlvblR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IHVuZXhwZWN0ZWQobGV4ZXIpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBraW5kOiBfa2luZHMuS2luZC5TQ0hFTUFfRVhURU5TSU9OLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgb3BlcmF0aW9uVHlwZXM6IG9wZXJhdGlvblR5cGVzLFxuICAgIGxvYzogbG9jKGxleGVyLCBzdGFydClcbiAgfTtcbn1cbi8qKlxuICogU2NhbGFyVHlwZUV4dGVuc2lvbiA6XG4gKiAgIC0gZXh0ZW5kIHNjYWxhciBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVNjYWxhclR5cGVFeHRlbnNpb24obGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdleHRlbmQnKTtcbiAgZXhwZWN0S2V5d29yZChsZXhlciwgJ3NjYWxhcicpO1xuICB2YXIgbmFtZSA9IHBhcnNlTmFtZShsZXhlcik7XG4gIHZhciBkaXJlY3RpdmVzID0gcGFyc2VEaXJlY3RpdmVzKGxleGVyLCB0cnVlKTtcblxuICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIE9iamVjdFR5cGVFeHRlbnNpb24gOlxuICogIC0gZXh0ZW5kIHR5cGUgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlcz8gRGlyZWN0aXZlc1tDb25zdF0/IEZpZWxkc0RlZmluaXRpb25cbiAqICAtIGV4dGVuZCB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdXG4gKiAgLSBleHRlbmQgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZU9iamVjdFR5cGVFeHRlbnNpb24obGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdleHRlbmQnKTtcbiAgZXhwZWN0S2V5d29yZChsZXhlciwgJ3R5cGUnKTtcbiAgdmFyIG5hbWUgPSBwYXJzZU5hbWUobGV4ZXIpO1xuICB2YXIgaW50ZXJmYWNlcyA9IHBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMobGV4ZXIpO1xuICB2YXIgZGlyZWN0aXZlcyA9IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgdHJ1ZSk7XG4gIHZhciBmaWVsZHMgPSBwYXJzZUZpZWxkc0RlZmluaXRpb24obGV4ZXIpO1xuXG4gIGlmIChpbnRlcmZhY2VzLmxlbmd0aCA9PT0gMCAmJiBkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgdW5leHBlY3RlZChsZXhlcik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTixcbiAgICBuYW1lOiBuYW1lLFxuICAgIGludGVyZmFjZXM6IGludGVyZmFjZXMsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICBsb2M6IGxvYyhsZXhlciwgc3RhcnQpXG4gIH07XG59XG4vKipcbiAqIEludGVyZmFjZVR5cGVFeHRlbnNpb24gOlxuICogICAtIGV4dGVuZCBpbnRlcmZhY2UgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvblxuICogICAtIGV4dGVuZCBpbnRlcmZhY2UgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XVxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICBleHBlY3RLZXl3b3JkKGxleGVyLCAnZXh0ZW5kJyk7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdpbnRlcmZhY2UnKTtcbiAgdmFyIG5hbWUgPSBwYXJzZU5hbWUobGV4ZXIpO1xuICB2YXIgZGlyZWN0aXZlcyA9IHBhcnNlRGlyZWN0aXZlcyhsZXhlciwgdHJ1ZSk7XG4gIHZhciBmaWVsZHMgPSBwYXJzZUZpZWxkc0RlZmluaXRpb24obGV4ZXIpO1xuXG4gIGlmIChkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgdW5leHBlY3RlZChsZXhlcik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTixcbiAgICBuYW1lOiBuYW1lLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgZmllbGRzOiBmaWVsZHMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBVbmlvblR5cGVFeHRlbnNpb24gOlxuICogICAtIGV4dGVuZCB1bmlvbiBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBVbmlvbk1lbWJlclR5cGVzXG4gKiAgIC0gZXh0ZW5kIHVuaW9uIE5hbWUgRGlyZWN0aXZlc1tDb25zdF1cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlVW5pb25UeXBlRXh0ZW5zaW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICBleHBlY3RLZXl3b3JkKGxleGVyLCAnZXh0ZW5kJyk7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICd1bmlvbicpO1xuICB2YXIgbmFtZSA9IHBhcnNlTmFtZShsZXhlcik7XG4gIHZhciBkaXJlY3RpdmVzID0gcGFyc2VEaXJlY3RpdmVzKGxleGVyLCB0cnVlKTtcbiAgdmFyIHR5cGVzID0gcGFyc2VVbmlvbk1lbWJlclR5cGVzKGxleGVyKTtcblxuICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgdHlwZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgdW5leHBlY3RlZChsZXhlcik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICB0eXBlczogdHlwZXMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBFbnVtVHlwZUV4dGVuc2lvbiA6XG4gKiAgIC0gZXh0ZW5kIGVudW0gTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gRW51bVZhbHVlc0RlZmluaXRpb25cbiAqICAgLSBleHRlbmQgZW51bSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUVudW1UeXBlRXh0ZW5zaW9uKGxleGVyKSB7XG4gIHZhciBzdGFydCA9IGxleGVyLnRva2VuO1xuICBleHBlY3RLZXl3b3JkKGxleGVyLCAnZXh0ZW5kJyk7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdlbnVtJyk7XG4gIHZhciBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICB2YXIgdmFsdWVzID0gcGFyc2VFbnVtVmFsdWVzRGVmaW5pdGlvbihsZXhlcik7XG5cbiAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyB1bmV4cGVjdGVkKGxleGVyKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTixcbiAgICBuYW1lOiBuYW1lLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24gOlxuICogICAtIGV4dGVuZCBpbnB1dCBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBJbnB1dEZpZWxkc0RlZmluaXRpb25cbiAqICAgLSBleHRlbmQgaW5wdXQgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XVxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24obGV4ZXIpIHtcbiAgdmFyIHN0YXJ0ID0gbGV4ZXIudG9rZW47XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdleHRlbmQnKTtcbiAgZXhwZWN0S2V5d29yZChsZXhlciwgJ2lucHV0Jyk7XG4gIHZhciBuYW1lID0gcGFyc2VOYW1lKGxleGVyKTtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBwYXJzZURpcmVjdGl2ZXMobGV4ZXIsIHRydWUpO1xuICB2YXIgZmllbGRzID0gcGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24obGV4ZXIpO1xuXG4gIGlmIChkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgdW5leHBlY3RlZChsZXhlcik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGtpbmQ6IF9raW5kcy5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTixcbiAgICBuYW1lOiBuYW1lLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgZmllbGRzOiBmaWVsZHMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBEaXJlY3RpdmVEZWZpbml0aW9uIDpcbiAqICAgLSBEZXNjcmlwdGlvbj8gZGlyZWN0aXZlIEAgTmFtZSBBcmd1bWVudHNEZWZpbml0aW9uPyBvbiBEaXJlY3RpdmVMb2NhdGlvbnNcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlRGVmaW5pdGlvbihsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIGRlc2NyaXB0aW9uID0gcGFyc2VEZXNjcmlwdGlvbihsZXhlcik7XG4gIGV4cGVjdEtleXdvcmQobGV4ZXIsICdkaXJlY3RpdmUnKTtcbiAgZXhwZWN0VG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuQVQpO1xuICB2YXIgbmFtZSA9IHBhcnNlTmFtZShsZXhlcik7XG4gIHZhciBhcmdzID0gcGFyc2VBcmd1bWVudERlZnMobGV4ZXIpO1xuICBleHBlY3RLZXl3b3JkKGxleGVyLCAnb24nKTtcbiAgdmFyIGxvY2F0aW9ucyA9IHBhcnNlRGlyZWN0aXZlTG9jYXRpb25zKGxleGVyKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBfa2luZHMuS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTixcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgbmFtZTogbmFtZSxcbiAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgbG9jYXRpb25zOiBsb2NhdGlvbnMsXG4gICAgbG9jOiBsb2MobGV4ZXIsIHN0YXJ0KVxuICB9O1xufVxuLyoqXG4gKiBEaXJlY3RpdmVMb2NhdGlvbnMgOlxuICogICAtIGB8YD8gRGlyZWN0aXZlTG9jYXRpb25cbiAqICAgLSBEaXJlY3RpdmVMb2NhdGlvbnMgfCBEaXJlY3RpdmVMb2NhdGlvblxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmVMb2NhdGlvbnMobGV4ZXIpIHtcbiAgLy8gT3B0aW9uYWwgbGVhZGluZyBwaXBlXG4gIGV4cGVjdE9wdGlvbmFsVG9rZW4obGV4ZXIsIF9sZXhlci5Ub2tlbktpbmQuUElQRSk7XG4gIHZhciBsb2NhdGlvbnMgPSBbXTtcblxuICBkbyB7XG4gICAgbG9jYXRpb25zLnB1c2gocGFyc2VEaXJlY3RpdmVMb2NhdGlvbihsZXhlcikpO1xuICB9IHdoaWxlIChleHBlY3RPcHRpb25hbFRva2VuKGxleGVyLCBfbGV4ZXIuVG9rZW5LaW5kLlBJUEUpKTtcblxuICByZXR1cm4gbG9jYXRpb25zO1xufVxuLypcbiAqIERpcmVjdGl2ZUxvY2F0aW9uIDpcbiAqICAgLSBFeGVjdXRhYmxlRGlyZWN0aXZlTG9jYXRpb25cbiAqICAgLSBUeXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb25cbiAqXG4gKiBFeGVjdXRhYmxlRGlyZWN0aXZlTG9jYXRpb24gOiBvbmUgb2ZcbiAqICAgYFFVRVJZYFxuICogICBgTVVUQVRJT05gXG4gKiAgIGBTVUJTQ1JJUFRJT05gXG4gKiAgIGBGSUVMRGBcbiAqICAgYEZSQUdNRU5UX0RFRklOSVRJT05gXG4gKiAgIGBGUkFHTUVOVF9TUFJFQURgXG4gKiAgIGBJTkxJTkVfRlJBR01FTlRgXG4gKlxuICogVHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9uIDogb25lIG9mXG4gKiAgIGBTQ0hFTUFgXG4gKiAgIGBTQ0FMQVJgXG4gKiAgIGBPQkpFQ1RgXG4gKiAgIGBGSUVMRF9ERUZJTklUSU9OYFxuICogICBgQVJHVU1FTlRfREVGSU5JVElPTmBcbiAqICAgYElOVEVSRkFDRWBcbiAqICAgYFVOSU9OYFxuICogICBgRU5VTWBcbiAqICAgYEVOVU1fVkFMVUVgXG4gKiAgIGBJTlBVVF9PQkpFQ1RgXG4gKiAgIGBJTlBVVF9GSUVMRF9ERUZJTklUSU9OYFxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmVMb2NhdGlvbihsZXhlcikge1xuICB2YXIgc3RhcnQgPSBsZXhlci50b2tlbjtcbiAgdmFyIG5hbWUgPSBwYXJzZU5hbWUobGV4ZXIpO1xuXG4gIGlmIChfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb25bbmFtZS52YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgdGhyb3cgdW5leHBlY3RlZChsZXhlciwgc3RhcnQpO1xufSAvLyBDb3JlIHBhcnNpbmcgdXRpbGl0eSBmdW5jdGlvbnNcblxuLyoqXG4gKiBSZXR1cm5zIGEgbG9jYXRpb24gb2JqZWN0LCB1c2VkIHRvIGlkZW50aWZ5IHRoZSBwbGFjZSBpblxuICogdGhlIHNvdXJjZSB0aGF0IGNyZWF0ZWQgYSBnaXZlbiBwYXJzZWQgb2JqZWN0LlxuICovXG5cblxuZnVuY3Rpb24gbG9jKGxleGVyLCBzdGFydFRva2VuKSB7XG4gIGlmICghbGV4ZXIub3B0aW9ucy5ub0xvY2F0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBMb2Moc3RhcnRUb2tlbiwgbGV4ZXIubGFzdFRva2VuLCBsZXhlci5zb3VyY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIExvYyhzdGFydFRva2VuLCBlbmRUb2tlbiwgc291cmNlKSB7XG4gIHRoaXMuc3RhcnQgPSBzdGFydFRva2VuLnN0YXJ0O1xuICB0aGlzLmVuZCA9IGVuZFRva2VuLmVuZDtcbiAgdGhpcy5zdGFydFRva2VuID0gc3RhcnRUb2tlbjtcbiAgdGhpcy5lbmRUb2tlbiA9IGVuZFRva2VuO1xuICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbn0gLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gSlNPTi91dGlsLmluc3BlY3QuXG5cblxuKDAsIF9kZWZpbmVUb0pTT04uZGVmYXVsdCkoTG9jLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHRoaXMuc3RhcnQsXG4gICAgZW5kOiB0aGlzLmVuZFxuICB9O1xufSk7XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgYSBnaXZlbiBraW5kXG4gKi9cblxuZnVuY3Rpb24gcGVlayhsZXhlciwga2luZCkge1xuICByZXR1cm4gbGV4ZXIudG9rZW4ua2luZCA9PT0ga2luZDtcbn1cbi8qKlxuICogSWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgdGhlIGdpdmVuIGtpbmQsIHJldHVybiB0aGF0IHRva2VuIGFmdGVyIGFkdmFuY2luZ1xuICogdGhlIGxleGVyLiBPdGhlcndpc2UsIGRvIG5vdCBjaGFuZ2UgdGhlIHBhcnNlciBzdGF0ZSBhbmQgdGhyb3cgYW4gZXJyb3IuXG4gKi9cblxuXG5mdW5jdGlvbiBleHBlY3RUb2tlbihsZXhlciwga2luZCkge1xuICB2YXIgdG9rZW4gPSBsZXhlci50b2tlbjtcblxuICBpZiAodG9rZW4ua2luZCA9PT0ga2luZCkge1xuICAgIGxleGVyLmFkdmFuY2UoKTtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICB0aHJvdyAoMCwgX2Vycm9yLnN5bnRheEVycm9yKShsZXhlci5zb3VyY2UsIHRva2VuLnN0YXJ0LCBcIkV4cGVjdGVkIFwiLmNvbmNhdChraW5kLCBcIiwgZm91bmQgXCIpLmNvbmNhdCgoMCwgX2xleGVyLmdldFRva2VuRGVzYykodG9rZW4pKSk7XG59XG4vKipcbiAqIElmIHRoZSBuZXh0IHRva2VuIGlzIG9mIHRoZSBnaXZlbiBraW5kLCByZXR1cm4gdGhhdCB0b2tlbiBhZnRlciBhZHZhbmNpbmdcbiAqIHRoZSBsZXhlci4gT3RoZXJ3aXNlLCBkbyBub3QgY2hhbmdlIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHJldHVybiB1bmRlZmluZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBleHBlY3RPcHRpb25hbFRva2VuKGxleGVyLCBraW5kKSB7XG4gIHZhciB0b2tlbiA9IGxleGVyLnRva2VuO1xuXG4gIGlmICh0b2tlbi5raW5kID09PSBraW5kKSB7XG4gICAgbGV4ZXIuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIElmIHRoZSBuZXh0IHRva2VuIGlzIGEgZ2l2ZW4ga2V5d29yZCwgcmV0dXJuIHRoYXQgdG9rZW4gYWZ0ZXIgYWR2YW5jaW5nXG4gKiB0aGUgbGV4ZXIuIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvdyBhbiBlcnJvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4cGVjdEtleXdvcmQobGV4ZXIsIHZhbHVlKSB7XG4gIHZhciB0b2tlbiA9IGxleGVyLnRva2VuO1xuXG4gIGlmICh0b2tlbi5raW5kID09PSBfbGV4ZXIuVG9rZW5LaW5kLk5BTUUgJiYgdG9rZW4udmFsdWUgPT09IHZhbHVlKSB7XG4gICAgbGV4ZXIuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHRocm93ICgwLCBfZXJyb3Iuc3ludGF4RXJyb3IpKGxleGVyLnNvdXJjZSwgdG9rZW4uc3RhcnQsIFwiRXhwZWN0ZWQgXFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiLCBmb3VuZCBcIikuY29uY2F0KCgwLCBfbGV4ZXIuZ2V0VG9rZW5EZXNjKSh0b2tlbikpKTtcbn1cbi8qKlxuICogSWYgdGhlIG5leHQgdG9rZW4gaXMgYSBnaXZlbiBrZXl3b3JkLCByZXR1cm4gdGhhdCB0b2tlbiBhZnRlciBhZHZhbmNpbmdcbiAqIHRoZSBsZXhlci4gT3RoZXJ3aXNlLCBkbyBub3QgY2hhbmdlIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHJldHVybiB1bmRlZmluZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBleHBlY3RPcHRpb25hbEtleXdvcmQobGV4ZXIsIHZhbHVlKSB7XG4gIHZhciB0b2tlbiA9IGxleGVyLnRva2VuO1xuXG4gIGlmICh0b2tlbi5raW5kID09PSBfbGV4ZXIuVG9rZW5LaW5kLk5BTUUgJiYgdG9rZW4udmFsdWUgPT09IHZhbHVlKSB7XG4gICAgbGV4ZXIuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gZXJyb3Igd2hlbiBhbiB1bmV4cGVjdGVkIGxleGVkIHRva2VuXG4gKiBpcyBlbmNvdW50ZXJlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVuZXhwZWN0ZWQobGV4ZXIsIGF0VG9rZW4pIHtcbiAgdmFyIHRva2VuID0gYXRUb2tlbiB8fCBsZXhlci50b2tlbjtcbiAgcmV0dXJuICgwLCBfZXJyb3Iuc3ludGF4RXJyb3IpKGxleGVyLnNvdXJjZSwgdG9rZW4uc3RhcnQsIFwiVW5leHBlY3RlZCBcIi5jb25jYXQoKDAsIF9sZXhlci5nZXRUb2tlbkRlc2MpKHRva2VuKSkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcG9zc2libHkgZW1wdHkgbGlzdCBvZiBwYXJzZSBub2RlcywgZGV0ZXJtaW5lZCBieVxuICogdGhlIHBhcnNlRm4uIFRoaXMgbGlzdCBiZWdpbnMgd2l0aCBhIGxleCB0b2tlbiBvZiBvcGVuS2luZFxuICogYW5kIGVuZHMgd2l0aCBhIGxleCB0b2tlbiBvZiBjbG9zZUtpbmQuIEFkdmFuY2VzIHRoZSBwYXJzZXJcbiAqIHRvIHRoZSBuZXh0IGxleCB0b2tlbiBhZnRlciB0aGUgY2xvc2luZyB0b2tlbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGFueShsZXhlciwgb3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICBleHBlY3RUb2tlbihsZXhlciwgb3BlbktpbmQpO1xuICB2YXIgbm9kZXMgPSBbXTtcblxuICB3aGlsZSAoIWV4cGVjdE9wdGlvbmFsVG9rZW4obGV4ZXIsIGNsb3NlS2luZCkpIHtcbiAgICBub2Rlcy5wdXNoKHBhcnNlRm4obGV4ZXIpKTtcbiAgfVxuXG4gIHJldHVybiBub2Rlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIG5vbi1lbXB0eSBsaXN0IG9mIHBhcnNlIG5vZGVzLCBkZXRlcm1pbmVkIGJ5XG4gKiB0aGUgcGFyc2VGbi4gVGhpcyBsaXN0IGJlZ2lucyB3aXRoIGEgbGV4IHRva2VuIG9mIG9wZW5LaW5kXG4gKiBhbmQgZW5kcyB3aXRoIGEgbGV4IHRva2VuIG9mIGNsb3NlS2luZC4gQWR2YW5jZXMgdGhlIHBhcnNlclxuICogdG8gdGhlIG5leHQgbGV4IHRva2VuIGFmdGVyIHRoZSBjbG9zaW5nIHRva2VuLlxuICovXG5cblxuZnVuY3Rpb24gbWFueShsZXhlciwgb3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICBleHBlY3RUb2tlbihsZXhlciwgb3BlbktpbmQpO1xuICB2YXIgbm9kZXMgPSBbcGFyc2VGbihsZXhlcildO1xuXG4gIHdoaWxlICghZXhwZWN0T3B0aW9uYWxUb2tlbihsZXhlciwgY2xvc2VLaW5kKSkge1xuICAgIG5vZGVzLnB1c2gocGFyc2VGbihsZXhlcikpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNvdXJjZSA9IHZvaWQgMDtcblxudmFyIF9pbnZhcmlhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9qc3V0aWxzL2ludmFyaWFudFwiKSk7XG5cbnZhciBfZGVmaW5lVG9TdHJpbmdUYWcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9qc3V0aWxzL2RlZmluZVRvU3RyaW5nVGFnXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2Ygc291cmNlIGlucHV0IHRvIEdyYXBoUUwuXG4gKiBgbmFtZWAgYW5kIGBsb2NhdGlvbk9mZnNldGAgYXJlIG9wdGlvbmFsLiBUaGV5IGFyZSB1c2VmdWwgZm9yIGNsaWVudHMgd2hvXG4gKiBzdG9yZSBHcmFwaFFMIGRvY3VtZW50cyBpbiBzb3VyY2UgZmlsZXM7IGZvciBleGFtcGxlLCBpZiB0aGUgR3JhcGhRTCBpbnB1dFxuICogc3RhcnRzIGF0IGxpbmUgNDAgaW4gYSBmaWxlIG5hbWVkIEZvby5ncmFwaHFsLCBpdCBtaWdodCBiZSB1c2VmdWwgZm9yIG5hbWUgdG9cbiAqIGJlIFwiRm9vLmdyYXBocWxcIiBhbmQgbG9jYXRpb24gdG8gYmUgYHsgbGluZTogNDAsIGNvbHVtbjogMCB9YC5cbiAqIGxpbmUgYW5kIGNvbHVtbiBpbiBsb2NhdGlvbk9mZnNldCBhcmUgMS1pbmRleGVkXG4gKi9cbnZhciBTb3VyY2UgPSBmdW5jdGlvbiBTb3VyY2UoYm9keSwgbmFtZSwgbG9jYXRpb25PZmZzZXQpIHtcbiAgdGhpcy5ib2R5ID0gYm9keTtcbiAgdGhpcy5uYW1lID0gbmFtZSB8fCAnR3JhcGhRTCByZXF1ZXN0JztcbiAgdGhpcy5sb2NhdGlvbk9mZnNldCA9IGxvY2F0aW9uT2Zmc2V0IHx8IHtcbiAgICBsaW5lOiAxLFxuICAgIGNvbHVtbjogMVxuICB9O1xuICAhKHRoaXMubG9jYXRpb25PZmZzZXQubGluZSA+IDApID8gKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoMCwgJ2xpbmUgaW4gbG9jYXRpb25PZmZzZXQgaXMgMS1pbmRleGVkIGFuZCBtdXN0IGJlIHBvc2l0aXZlJykgOiB2b2lkIDA7XG4gICEodGhpcy5sb2NhdGlvbk9mZnNldC5jb2x1bW4gPiAwKSA/ICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKDAsICdjb2x1bW4gaW4gbG9jYXRpb25PZmZzZXQgaXMgMS1pbmRleGVkIGFuZCBtdXN0IGJlIHBvc2l0aXZlJykgOiB2b2lkIDA7XG59OyAvLyBDb25kaXRpb25hbGx5IGFwcGx5IGBbU3ltYm9sLnRvU3RyaW5nVGFnXWAgaWYgYFN5bWJvbGBzIGFyZSBzdXBwb3J0ZWRcblxuXG5leHBvcnRzLlNvdXJjZSA9IFNvdXJjZTtcbigwLCBfZGVmaW5lVG9TdHJpbmdUYWcuZGVmYXVsdCkoU291cmNlKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmaW5lVG9TdHJpbmdUYWc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuLyoqXG4gKiBUaGUgYGRlZmluZVRvU3RyaW5nVGFnKClgIGZ1bmN0aW9uIGNoZWNrcyBmaXJzdCB0byBzZWUgaWYgdGhlIHJ1bnRpbWVcbiAqIHN1cHBvcnRzIHRoZSBgU3ltYm9sYCBjbGFzcyBhbmQgdGhlbiBpZiB0aGUgYFN5bWJvbC50b1N0cmluZ1RhZ2AgY29uc3RhbnRcbiAqIGlzIGRlZmluZWQgYXMgYSBgU3ltYm9sYCBpbnN0YW5jZS4gSWYgYm90aCBjb25kaXRpb25zIGFyZSBtZXQsIHRoZVxuICogU3ltYm9sLnRvU3RyaW5nVGFnIHByb3BlcnR5IGlzIGRlZmluZWQgYXMgYSBnZXR0ZXIgdGhhdCByZXR1cm5zIHRoZVxuICogc3VwcGxpZWQgY2xhc3MgY29uc3RydWN0b3IncyBuYW1lLlxuICpcbiAqIEBtZXRob2QgZGVmaW5lVG9TdHJpbmdUYWdcbiAqXG4gKiBAcGFyYW0ge0NsYXNzPGFueT59IGNsYXNzT2JqZWN0IGEgY2xhc3Mgc3VjaCBhcyBPYmplY3QsIFN0cmluZywgTnVtYmVyIGJ1dFxuICogdHlwaWNhbGx5IG9uZSBvZiB5b3VyIG93biBjcmVhdGlvbiB0aHJvdWdoIHRoZSBjbGFzcyBrZXl3b3JkOyBgY2xhc3MgQSB7fWAsXG4gKiBmb3IgZXhhbXBsZS5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lVG9TdHJpbmdUYWcoY2xhc3NPYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsYXNzT2JqZWN0LnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN5bnRheEVycm9yID0gc3ludGF4RXJyb3I7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZShcIi4vR3JhcGhRTEVycm9yXCIpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbi8qKlxuICogUHJvZHVjZXMgYSBHcmFwaFFMRXJyb3IgcmVwcmVzZW50aW5nIGEgc3ludGF4IGVycm9yLCBjb250YWluaW5nIHVzZWZ1bFxuICogZGVzY3JpcHRpdmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN5bnRheCBlcnJvcidzIHBvc2l0aW9uIGluIHRoZSBzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIGRlc2NyaXB0aW9uKSB7XG4gIHJldHVybiBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXCJTeW50YXggRXJyb3I6IFwiLmNvbmNhdChkZXNjcmlwdGlvbiksIHVuZGVmaW5lZCwgc291cmNlLCBbcG9zaXRpb25dKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5sb2NhdGVkRXJyb3IgPSBsb2NhdGVkRXJyb3I7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZShcIi4vR3JhcGhRTEVycm9yXCIpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbi8qKlxuICogR2l2ZW4gYW4gYXJiaXRyYXJ5IEVycm9yLCBwcmVzdW1hYmx5IHRocm93biB3aGlsZSBhdHRlbXB0aW5nIHRvIGV4ZWN1dGUgYVxuICogR3JhcGhRTCBvcGVyYXRpb24sIHByb2R1Y2UgYSBuZXcgR3JhcGhRTEVycm9yIGF3YXJlIG9mIHRoZSBsb2NhdGlvbiBpbiB0aGVcbiAqIGRvY3VtZW50IHJlc3BvbnNpYmxlIGZvciB0aGUgb3JpZ2luYWwgRXJyb3IuXG4gKi9cbmZ1bmN0aW9uIGxvY2F0ZWRFcnJvcihvcmlnaW5hbEVycm9yLCBub2RlcywgcGF0aCkge1xuICAvLyBOb3RlOiB0aGlzIHVzZXMgYSBicmFuZC1jaGVjayB0byBzdXBwb3J0IEdyYXBoUUwgZXJyb3JzIG9yaWdpbmF0aW5nIGZyb21cbiAgLy8gb3RoZXIgY29udGV4dHMuXG4gIGlmIChvcmlnaW5hbEVycm9yICYmIEFycmF5LmlzQXJyYXkob3JpZ2luYWxFcnJvci5wYXRoKSkge1xuICAgIHJldHVybiBvcmlnaW5hbEVycm9yO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihvcmlnaW5hbEVycm9yICYmIG9yaWdpbmFsRXJyb3IubWVzc2FnZSwgb3JpZ2luYWxFcnJvciAmJiBvcmlnaW5hbEVycm9yLm5vZGVzIHx8IG5vZGVzLCBvcmlnaW5hbEVycm9yICYmIG9yaWdpbmFsRXJyb3Iuc291cmNlLCBvcmlnaW5hbEVycm9yICYmIG9yaWdpbmFsRXJyb3IucG9zaXRpb25zLCBwYXRoLCBvcmlnaW5hbEVycm9yKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZvcm1hdEVycm9yO1xuXG52YXIgX2ludmFyaWFudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2pzdXRpbHMvaW52YXJpYW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4vKipcbiAqIEdpdmVuIGEgR3JhcGhRTEVycm9yLCBmb3JtYXQgaXQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBkZXNjcmliZWQgYnkgdGhlXG4gKiBSZXNwb25zZSBGb3JtYXQsIEVycm9ycyBzZWN0aW9uIG9mIHRoZSBHcmFwaFFMIFNwZWNpZmljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKGVycm9yKSB7XG4gICFlcnJvciA/ICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKDAsICdSZWNlaXZlZCBudWxsIG9yIHVuZGVmaW5lZCBlcnJvci4nKSA6IHZvaWQgMDtcbiAgdmFyIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8ICdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLic7XG4gIHZhciBsb2NhdGlvbnMgPSBlcnJvci5sb2NhdGlvbnM7XG4gIHZhciBwYXRoID0gZXJyb3IucGF0aDtcbiAgdmFyIGV4dGVuc2lvbnMgPSBlcnJvci5leHRlbnNpb25zO1xuICByZXR1cm4gZXh0ZW5zaW9ucyA/IHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGxvY2F0aW9uczogbG9jYXRpb25zLFxuICAgIHBhdGg6IHBhdGgsXG4gICAgZXh0ZW5zaW9uczogZXh0ZW5zaW9uc1xuICB9IDoge1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgbG9jYXRpb25zOiBsb2NhdGlvbnMsXG4gICAgcGF0aDogcGF0aFxuICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZUxleGVyID0gY3JlYXRlTGV4ZXI7XG5leHBvcnRzLmlzUHVuY3R1YXRvclRva2VuID0gaXNQdW5jdHVhdG9yVG9rZW47XG5leHBvcnRzLmdldFRva2VuRGVzYyA9IGdldFRva2VuRGVzYztcbmV4cG9ydHMuVG9rZW5LaW5kID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVRvSlNPTiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2pzdXRpbHMvZGVmaW5lVG9KU09OXCIpKTtcblxudmFyIF9lcnJvciA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcblxudmFyIF9ibG9ja1N0cmluZyA9IHJlcXVpcmUoXCIuL2Jsb2NrU3RyaW5nXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbi8qKlxuICogR2l2ZW4gYSBTb3VyY2Ugb2JqZWN0LCB0aGlzIHJldHVybnMgYSBMZXhlciBmb3IgdGhhdCBzb3VyY2UuXG4gKiBBIExleGVyIGlzIGEgc3RhdGVmdWwgc3RyZWFtIGdlbmVyYXRvciBpbiB0aGF0IGV2ZXJ5IHRpbWVcbiAqIGl0IGlzIGFkdmFuY2VkLCBpdCByZXR1cm5zIHRoZSBuZXh0IHRva2VuIGluIHRoZSBTb3VyY2UuIEFzc3VtaW5nIHRoZVxuICogc291cmNlIGxleGVzLCB0aGUgZmluYWwgVG9rZW4gZW1pdHRlZCBieSB0aGUgbGV4ZXIgd2lsbCBiZSBvZiBraW5kXG4gKiBFT0YsIGFmdGVyIHdoaWNoIHRoZSBsZXhlciB3aWxsIHJlcGVhdGVkbHkgcmV0dXJuIHRoZSBzYW1lIEVPRiB0b2tlblxuICogd2hlbmV2ZXIgY2FsbGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVMZXhlcihzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXJ0T2ZGaWxlVG9rZW4gPSBuZXcgVG9rKFRva2VuS2luZC5TT0YsIDAsIDAsIDAsIDAsIG51bGwpO1xuICB2YXIgbGV4ZXIgPSB7XG4gICAgc291cmNlOiBzb3VyY2UsXG4gICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICBsYXN0VG9rZW46IHN0YXJ0T2ZGaWxlVG9rZW4sXG4gICAgdG9rZW46IHN0YXJ0T2ZGaWxlVG9rZW4sXG4gICAgbGluZTogMSxcbiAgICBsaW5lU3RhcnQ6IDAsXG4gICAgYWR2YW5jZTogYWR2YW5jZUxleGVyLFxuICAgIGxvb2thaGVhZDogbG9va2FoZWFkXG4gIH07XG4gIHJldHVybiBsZXhlcjtcbn1cblxuZnVuY3Rpb24gYWR2YW5jZUxleGVyKCkge1xuICB0aGlzLmxhc3RUb2tlbiA9IHRoaXMudG9rZW47XG4gIHZhciB0b2tlbiA9IHRoaXMudG9rZW4gPSB0aGlzLmxvb2thaGVhZCgpO1xuICByZXR1cm4gdG9rZW47XG59XG5cbmZ1bmN0aW9uIGxvb2thaGVhZCgpIHtcbiAgdmFyIHRva2VuID0gdGhpcy50b2tlbjtcblxuICBpZiAodG9rZW4ua2luZCAhPT0gVG9rZW5LaW5kLkVPRikge1xuICAgIGRvIHtcbiAgICAgIC8vIE5vdGU6IG5leHQgaXMgb25seSBtdXRhYmxlIGR1cmluZyBwYXJzaW5nLCBzbyB3ZSBjYXN0IHRvIGFsbG93IHRoaXMuXG4gICAgICB0b2tlbiA9IHRva2VuLm5leHQgfHwgKHRva2VuLm5leHQgPSByZWFkVG9rZW4odGhpcywgdG9rZW4pKTtcbiAgICB9IHdoaWxlICh0b2tlbi5raW5kID09PSBUb2tlbktpbmQuQ09NTUVOVCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW47XG59XG4vKipcbiAqIFRoZSByZXR1cm4gdHlwZSBvZiBjcmVhdGVMZXhlci5cbiAqL1xuXG5cbi8qKlxuICogQW4gZXhwb3J0ZWQgZW51bSBkZXNjcmliaW5nIHRoZSBkaWZmZXJlbnQga2luZHMgb2YgdG9rZW5zIHRoYXQgdGhlXG4gKiBsZXhlciBlbWl0cy5cbiAqL1xudmFyIFRva2VuS2luZCA9IE9iamVjdC5mcmVlemUoe1xuICBTT0Y6ICc8U09GPicsXG4gIEVPRjogJzxFT0Y+JyxcbiAgQkFORzogJyEnLFxuICBET0xMQVI6ICckJyxcbiAgQU1QOiAnJicsXG4gIFBBUkVOX0w6ICcoJyxcbiAgUEFSRU5fUjogJyknLFxuICBTUFJFQUQ6ICcuLi4nLFxuICBDT0xPTjogJzonLFxuICBFUVVBTFM6ICc9JyxcbiAgQVQ6ICdAJyxcbiAgQlJBQ0tFVF9MOiAnWycsXG4gIEJSQUNLRVRfUjogJ10nLFxuICBCUkFDRV9MOiAneycsXG4gIFBJUEU6ICd8JyxcbiAgQlJBQ0VfUjogJ30nLFxuICBOQU1FOiAnTmFtZScsXG4gIElOVDogJ0ludCcsXG4gIEZMT0FUOiAnRmxvYXQnLFxuICBTVFJJTkc6ICdTdHJpbmcnLFxuICBCTE9DS19TVFJJTkc6ICdCbG9ja1N0cmluZycsXG4gIENPTU1FTlQ6ICdDb21tZW50J1xufSk7XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSB0b2tlbiBraW5kcyB2YWx1ZXMuXG4gKi9cblxuZXhwb3J0cy5Ub2tlbktpbmQgPSBUb2tlbktpbmQ7XG5cbi8vIEBpbnRlcm5hbFxuZnVuY3Rpb24gaXNQdW5jdHVhdG9yVG9rZW4odG9rZW4pIHtcbiAgdmFyIGtpbmQgPSB0b2tlbi5raW5kO1xuICByZXR1cm4ga2luZCA9PT0gVG9rZW5LaW5kLkJBTkcgfHwga2luZCA9PT0gVG9rZW5LaW5kLkRPTExBUiB8fCBraW5kID09PSBUb2tlbktpbmQuQU1QIHx8IGtpbmQgPT09IFRva2VuS2luZC5QQVJFTl9MIHx8IGtpbmQgPT09IFRva2VuS2luZC5QQVJFTl9SIHx8IGtpbmQgPT09IFRva2VuS2luZC5TUFJFQUQgfHwga2luZCA9PT0gVG9rZW5LaW5kLkNPTE9OIHx8IGtpbmQgPT09IFRva2VuS2luZC5FUVVBTFMgfHwga2luZCA9PT0gVG9rZW5LaW5kLkFUIHx8IGtpbmQgPT09IFRva2VuS2luZC5CUkFDS0VUX0wgfHwga2luZCA9PT0gVG9rZW5LaW5kLkJSQUNLRVRfUiB8fCBraW5kID09PSBUb2tlbktpbmQuQlJBQ0VfTCB8fCBraW5kID09PSBUb2tlbktpbmQuUElQRSB8fCBraW5kID09PSBUb2tlbktpbmQuQlJBQ0VfUjtcbn1cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gZGVzY3JpYmUgYSB0b2tlbiBhcyBhIHN0cmluZyBmb3IgZGVidWdnaW5nXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRUb2tlbkRlc2ModG9rZW4pIHtcbiAgdmFyIHZhbHVlID0gdG9rZW4udmFsdWU7XG4gIHJldHVybiB2YWx1ZSA/IFwiXCIuY29uY2F0KHRva2VuLmtpbmQsIFwiIFxcXCJcIikuY29uY2F0KHZhbHVlLCBcIlxcXCJcIikgOiB0b2tlbi5raW5kO1xufVxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGNvbnN0cnVjdGluZyB0aGUgVG9rZW4gb2JqZWN0LlxuICovXG5cblxuZnVuY3Rpb24gVG9rKGtpbmQsIHN0YXJ0LCBlbmQsIGxpbmUsIGNvbHVtbiwgcHJldiwgdmFsdWUpIHtcbiAgdGhpcy5raW5kID0ga2luZDtcbiAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICB0aGlzLmVuZCA9IGVuZDtcbiAgdGhpcy5saW5lID0gbGluZTtcbiAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5wcmV2ID0gcHJldjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn0gLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gSlNPTi91dGlsLmluc3BlY3QuXG5cblxuKDAsIF9kZWZpbmVUb0pTT04uZGVmYXVsdCkoVG9rLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAga2luZDogdGhpcy5raW5kLFxuICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICBjb2x1bW46IHRoaXMuY29sdW1uXG4gIH07XG59KTtcblxuZnVuY3Rpb24gcHJpbnRDaGFyQ29kZShjb2RlKSB7XG4gIHJldHVybiAoLy8gTmFOL3VuZGVmaW5lZCByZXByZXNlbnRzIGFjY2VzcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgZmlsZS5cbiAgICBpc05hTihjb2RlKSA/IFRva2VuS2luZC5FT0YgOiAvLyBUcnVzdCBKU09OIGZvciBBU0NJSS5cbiAgICBjb2RlIDwgMHgwMDdmID8gSlNPTi5zdHJpbmdpZnkoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSkgOiAvLyBPdGhlcndpc2UgcHJpbnQgdGhlIGVzY2FwZWQgZm9ybS5cbiAgICBcIlxcXCJcXFxcdVwiLmNvbmNhdCgoJzAwJyArIGNvZGUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC00KSwgXCJcXFwiXCIpXG4gICk7XG59XG4vKipcbiAqIEdldHMgdGhlIG5leHQgdG9rZW4gZnJvbSB0aGUgc291cmNlIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAqXG4gKiBUaGlzIHNraXBzIG92ZXIgd2hpdGVzcGFjZSB1bnRpbCBpdCBmaW5kcyB0aGUgbmV4dCBsZXhhYmxlIHRva2VuLCB0aGVuIGxleGVzXG4gKiBwdW5jdHVhdG9ycyBpbW1lZGlhdGVseSBvciBjYWxscyB0aGUgYXBwcm9wcmlhdGUgaGVscGVyIGZ1bmN0aW9uIGZvciBtb3JlXG4gKiBjb21wbGljYXRlZCB0b2tlbnMuXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkVG9rZW4obGV4ZXIsIHByZXYpIHtcbiAgdmFyIHNvdXJjZSA9IGxleGVyLnNvdXJjZTtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIGJvZHlMZW5ndGggPSBib2R5Lmxlbmd0aDtcbiAgdmFyIHBvcyA9IHBvc2l0aW9uQWZ0ZXJXaGl0ZXNwYWNlKGJvZHksIHByZXYuZW5kLCBsZXhlcik7XG4gIHZhciBsaW5lID0gbGV4ZXIubGluZTtcbiAgdmFyIGNvbCA9IDEgKyBwb3MgLSBsZXhlci5saW5lU3RhcnQ7XG5cbiAgaWYgKHBvcyA+PSBib2R5TGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLkVPRiwgYm9keUxlbmd0aCwgYm9keUxlbmd0aCwgbGluZSwgY29sLCBwcmV2KTtcbiAgfVxuXG4gIHZhciBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvcyk7IC8vIFNvdXJjZUNoYXJhY3RlclxuXG4gIHN3aXRjaCAoY29kZSkge1xuICAgIC8vICFcbiAgICBjYXNlIDMzOlxuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLkJBTkcsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyAjXG5cbiAgICBjYXNlIDM1OlxuICAgICAgcmV0dXJuIHJlYWRDb21tZW50KHNvdXJjZSwgcG9zLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vICRcblxuICAgIGNhc2UgMzY6XG4gICAgICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuRE9MTEFSLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gJlxuXG4gICAgY2FzZSAzODpcbiAgICAgIHJldHVybiBuZXcgVG9rKFRva2VuS2luZC5BTVAsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyAoXG5cbiAgICBjYXNlIDQwOlxuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLlBBUkVOX0wsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyApXG5cbiAgICBjYXNlIDQxOlxuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLlBBUkVOX1IsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyAuXG5cbiAgICBjYXNlIDQ2OlxuICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gNDYgJiYgYm9keS5jaGFyQ29kZUF0KHBvcyArIDIpID09PSA0Nikge1xuICAgICAgICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuU1BSRUFELCBwb3MsIHBvcyArIDMsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIC8vIDpcblxuICAgIGNhc2UgNTg6XG4gICAgICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuQ09MT04sIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyA9XG5cbiAgICBjYXNlIDYxOlxuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLkVRVUFMUywgcG9zLCBwb3MgKyAxLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vIEBcblxuICAgIGNhc2UgNjQ6XG4gICAgICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuQVQsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyBbXG5cbiAgICBjYXNlIDkxOlxuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLkJSQUNLRVRfTCwgcG9zLCBwb3MgKyAxLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vIF1cblxuICAgIGNhc2UgOTM6XG4gICAgICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuQlJBQ0tFVF9SLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8ge1xuXG4gICAgY2FzZSAxMjM6XG4gICAgICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuQlJBQ0VfTCwgcG9zLCBwb3MgKyAxLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vIHxcblxuICAgIGNhc2UgMTI0OlxuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLlBJUEUsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyB9XG5cbiAgICBjYXNlIDEyNTpcbiAgICAgIHJldHVybiBuZXcgVG9rKFRva2VuS2luZC5CUkFDRV9SLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gQS1aIF8gYS16XG5cbiAgICBjYXNlIDY1OlxuICAgIGNhc2UgNjY6XG4gICAgY2FzZSA2NzpcbiAgICBjYXNlIDY4OlxuICAgIGNhc2UgNjk6XG4gICAgY2FzZSA3MDpcbiAgICBjYXNlIDcxOlxuICAgIGNhc2UgNzI6XG4gICAgY2FzZSA3MzpcbiAgICBjYXNlIDc0OlxuICAgIGNhc2UgNzU6XG4gICAgY2FzZSA3NjpcbiAgICBjYXNlIDc3OlxuICAgIGNhc2UgNzg6XG4gICAgY2FzZSA3OTpcbiAgICBjYXNlIDgwOlxuICAgIGNhc2UgODE6XG4gICAgY2FzZSA4MjpcbiAgICBjYXNlIDgzOlxuICAgIGNhc2UgODQ6XG4gICAgY2FzZSA4NTpcbiAgICBjYXNlIDg2OlxuICAgIGNhc2UgODc6XG4gICAgY2FzZSA4ODpcbiAgICBjYXNlIDg5OlxuICAgIGNhc2UgOTA6XG4gICAgY2FzZSA5NTpcbiAgICBjYXNlIDk3OlxuICAgIGNhc2UgOTg6XG4gICAgY2FzZSA5OTpcbiAgICBjYXNlIDEwMDpcbiAgICBjYXNlIDEwMTpcbiAgICBjYXNlIDEwMjpcbiAgICBjYXNlIDEwMzpcbiAgICBjYXNlIDEwNDpcbiAgICBjYXNlIDEwNTpcbiAgICBjYXNlIDEwNjpcbiAgICBjYXNlIDEwNzpcbiAgICBjYXNlIDEwODpcbiAgICBjYXNlIDEwOTpcbiAgICBjYXNlIDExMDpcbiAgICBjYXNlIDExMTpcbiAgICBjYXNlIDExMjpcbiAgICBjYXNlIDExMzpcbiAgICBjYXNlIDExNDpcbiAgICBjYXNlIDExNTpcbiAgICBjYXNlIDExNjpcbiAgICBjYXNlIDExNzpcbiAgICBjYXNlIDExODpcbiAgICBjYXNlIDExOTpcbiAgICBjYXNlIDEyMDpcbiAgICBjYXNlIDEyMTpcbiAgICBjYXNlIDEyMjpcbiAgICAgIHJldHVybiByZWFkTmFtZShzb3VyY2UsIHBvcywgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyAtIDAtOVxuXG4gICAgY2FzZSA0NTpcbiAgICBjYXNlIDQ4OlxuICAgIGNhc2UgNDk6XG4gICAgY2FzZSA1MDpcbiAgICBjYXNlIDUxOlxuICAgIGNhc2UgNTI6XG4gICAgY2FzZSA1MzpcbiAgICBjYXNlIDU0OlxuICAgIGNhc2UgNTU6XG4gICAgY2FzZSA1NjpcbiAgICBjYXNlIDU3OlxuICAgICAgcmV0dXJuIHJlYWROdW1iZXIoc291cmNlLCBwb3MsIGNvZGUsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gXCJcblxuICAgIGNhc2UgMzQ6XG4gICAgICBpZiAoYm9keS5jaGFyQ29kZUF0KHBvcyArIDEpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zICsgMikgPT09IDM0KSB7XG4gICAgICAgIHJldHVybiByZWFkQmxvY2tTdHJpbmcoc291cmNlLCBwb3MsIGxpbmUsIGNvbCwgcHJldiwgbGV4ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVhZFN0cmluZyhzb3VyY2UsIHBvcywgbGluZSwgY29sLCBwcmV2KTtcbiAgfVxuXG4gIHRocm93ICgwLCBfZXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zLCB1bmV4cGVjdGVkQ2hhcmFjdGVyTWVzc2FnZShjb2RlKSk7XG59XG4vKipcbiAqIFJlcG9ydCBhIG1lc3NhZ2UgdGhhdCBhbiB1bmV4cGVjdGVkIGNoYXJhY3RlciB3YXMgZW5jb3VudGVyZWQuXG4gKi9cblxuXG5mdW5jdGlvbiB1bmV4cGVjdGVkQ2hhcmFjdGVyTWVzc2FnZShjb2RlKSB7XG4gIGlmIChjb2RlIDwgMHgwMDIwICYmIGNvZGUgIT09IDB4MDAwOSAmJiBjb2RlICE9PSAweDAwMGEgJiYgY29kZSAhPT0gMHgwMDBkKSB7XG4gICAgcmV0dXJuIFwiQ2Fubm90IGNvbnRhaW4gdGhlIGludmFsaWQgY2hhcmFjdGVyIFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIik7XG4gIH1cblxuICBpZiAoY29kZSA9PT0gMzkpIHtcbiAgICAvLyAnXG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyICgnKSwgZGlkIHlvdSBtZWFuIHRvIHVzZSBcIiArICdhIGRvdWJsZSBxdW90ZSAoXCIpPyc7XG4gIH1cblxuICByZXR1cm4gXCJDYW5ub3QgcGFyc2UgdGhlIHVuZXhwZWN0ZWQgY2hhcmFjdGVyIFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIik7XG59XG4vKipcbiAqIFJlYWRzIGZyb20gYm9keSBzdGFydGluZyBhdCBzdGFydFBvc2l0aW9uIHVudGlsIGl0IGZpbmRzIGEgbm9uLXdoaXRlc3BhY2VcbiAqIGNoYXJhY3RlciwgdGhlbiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGF0IGNoYXJhY3RlciBmb3IgbGV4aW5nLlxuICovXG5cblxuZnVuY3Rpb24gcG9zaXRpb25BZnRlcldoaXRlc3BhY2UoYm9keSwgc3RhcnRQb3NpdGlvbiwgbGV4ZXIpIHtcbiAgdmFyIGJvZHlMZW5ndGggPSBib2R5Lmxlbmd0aDtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbjtcblxuICB3aGlsZSAocG9zaXRpb24gPCBib2R5TGVuZ3RoKSB7XG4gICAgdmFyIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pOyAvLyB0YWIgfCBzcGFjZSB8IGNvbW1hIHwgQk9NXG5cbiAgICBpZiAoY29kZSA9PT0gOSB8fCBjb2RlID09PSAzMiB8fCBjb2RlID09PSA0NCB8fCBjb2RlID09PSAweGZlZmYpIHtcbiAgICAgICsrcG9zaXRpb247XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAxMCkge1xuICAgICAgLy8gbmV3IGxpbmVcbiAgICAgICsrcG9zaXRpb247XG4gICAgICArK2xleGVyLmxpbmU7XG4gICAgICBsZXhlci5saW5lU3RhcnQgPSBwb3NpdGlvbjtcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDEzKSB7XG4gICAgICAvLyBjYXJyaWFnZSByZXR1cm5cbiAgICAgIGlmIChib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSA9PT0gMTApIHtcbiAgICAgICAgcG9zaXRpb24gKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICsrcG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgICsrbGV4ZXIubGluZTtcbiAgICAgIGxleGVyLmxpbmVTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb247XG59XG4vKipcbiAqIFJlYWRzIGEgY29tbWVudCB0b2tlbiBmcm9tIHRoZSBzb3VyY2UgZmlsZS5cbiAqXG4gKiAjW1xcdTAwMDlcXHUwMDIwLVxcdUZGRkZdKlxuICovXG5cblxuZnVuY3Rpb24gcmVhZENvbW1lbnQoc291cmNlLCBzdGFydCwgbGluZSwgY29sLCBwcmV2KSB7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBjb2RlO1xuICB2YXIgcG9zaXRpb24gPSBzdGFydDtcblxuICBkbyB7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgfSB3aGlsZSAoIWlzTmFOKGNvZGUpICYmICggLy8gU291cmNlQ2hhcmFjdGVyIGJ1dCBub3QgTGluZVRlcm1pbmF0b3JcbiAgY29kZSA+IDB4MDAxZiB8fCBjb2RlID09PSAweDAwMDkpKTtcblxuICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuQ09NTUVOVCwgc3RhcnQsIHBvc2l0aW9uLCBsaW5lLCBjb2wsIHByZXYsIGJvZHkuc2xpY2Uoc3RhcnQgKyAxLCBwb3NpdGlvbikpO1xufVxuLyoqXG4gKiBSZWFkcyBhIG51bWJlciB0b2tlbiBmcm9tIHRoZSBzb3VyY2UgZmlsZSwgZWl0aGVyIGEgZmxvYXRcbiAqIG9yIGFuIGludCBkZXBlbmRpbmcgb24gd2hldGhlciBhIGRlY2ltYWwgcG9pbnQgYXBwZWFycy5cbiAqXG4gKiBJbnQ6ICAgLT8oMHxbMS05XVswLTldKilcbiAqIEZsb2F0OiAtPygwfFsxLTldWzAtOV0qKShcXC5bMC05XSspPygoRXxlKSgrfC0pP1swLTldKyk/XG4gKi9cblxuXG5mdW5jdGlvbiByZWFkTnVtYmVyKHNvdXJjZSwgc3RhcnQsIGZpcnN0Q29kZSwgbGluZSwgY29sLCBwcmV2KSB7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBjb2RlID0gZmlyc3RDb2RlO1xuICB2YXIgcG9zaXRpb24gPSBzdGFydDtcbiAgdmFyIGlzRmxvYXQgPSBmYWxzZTtcblxuICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAvLyAtXG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgfVxuXG4gIGlmIChjb2RlID09PSA0OCkge1xuICAgIC8vIDBcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuXG4gICAgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nykge1xuICAgICAgdGhyb3cgKDAsIF9lcnJvci5zeW50YXhFcnJvcikoc291cmNlLCBwb3NpdGlvbiwgXCJJbnZhbGlkIG51bWJlciwgdW5leHBlY3RlZCBkaWdpdCBhZnRlciAwOiBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcG9zaXRpb24gPSByZWFkRGlnaXRzKHNvdXJjZSwgcG9zaXRpb24sIGNvZGUpO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IDQ2KSB7XG4gICAgLy8gLlxuICAgIGlzRmxvYXQgPSB0cnVlO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG4gICAgcG9zaXRpb24gPSByZWFkRGlnaXRzKHNvdXJjZSwgcG9zaXRpb24sIGNvZGUpO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IDY5IHx8IGNvZGUgPT09IDEwMSkge1xuICAgIC8vIEUgZVxuICAgIGlzRmxvYXQgPSB0cnVlO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG5cbiAgICBpZiAoY29kZSA9PT0gNDMgfHwgY29kZSA9PT0gNDUpIHtcbiAgICAgIC8vICsgLVxuICAgICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBwb3NpdGlvbiA9IHJlYWREaWdpdHMoc291cmNlLCBwb3NpdGlvbiwgY29kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFRvayhpc0Zsb2F0ID8gVG9rZW5LaW5kLkZMT0FUIDogVG9rZW5LaW5kLklOVCwgc3RhcnQsIHBvc2l0aW9uLCBsaW5lLCBjb2wsIHByZXYsIGJvZHkuc2xpY2Uoc3RhcnQsIHBvc2l0aW9uKSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5ldyBwb3NpdGlvbiBpbiB0aGUgc291cmNlIGFmdGVyIHJlYWRpbmcgZGlnaXRzLlxuICovXG5cblxuZnVuY3Rpb24gcmVhZERpZ2l0cyhzb3VyY2UsIHN0YXJ0LCBmaXJzdENvZGUpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnQ7XG4gIHZhciBjb2RlID0gZmlyc3RDb2RlO1xuXG4gIGlmIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHtcbiAgICAvLyAwIC0gOVxuICAgIGRvIHtcbiAgICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG4gICAgfSB3aGlsZSAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KTsgLy8gMCAtIDlcblxuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgdGhyb3cgKDAsIF9lcnJvci5zeW50YXhFcnJvcikoc291cmNlLCBwb3NpdGlvbiwgXCJJbnZhbGlkIG51bWJlciwgZXhwZWN0ZWQgZGlnaXQgYnV0IGdvdDogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG59XG4vKipcbiAqIFJlYWRzIGEgc3RyaW5nIHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqIFwiKFteXCJcXFxcXFx1MDAwQVxcdTAwMERdfChcXFxcKHVbMC05YS1mQS1GXXs0fXxbXCJcXFxcL2JmbnJ0XSkpKSpcIlxuICovXG5cblxuZnVuY3Rpb24gcmVhZFN0cmluZyhzb3VyY2UsIHN0YXJ0LCBsaW5lLCBjb2wsIHByZXYpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnQgKyAxO1xuICB2YXIgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICB2YXIgY29kZSA9IDA7XG4gIHZhciB2YWx1ZSA9ICcnO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGJvZHkubGVuZ3RoICYmICFpc05hTihjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKSkgJiYgLy8gbm90IExpbmVUZXJtaW5hdG9yXG4gIGNvZGUgIT09IDB4MDAwYSAmJiBjb2RlICE9PSAweDAwMGQpIHtcbiAgICAvLyBDbG9zaW5nIFF1b3RlIChcIilcbiAgICBpZiAoY29kZSA9PT0gMzQpIHtcbiAgICAgIHZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLlNUUklORywgc3RhcnQsIHBvc2l0aW9uICsgMSwgbGluZSwgY29sLCBwcmV2LCB2YWx1ZSk7XG4gICAgfSAvLyBTb3VyY2VDaGFyYWN0ZXJcblxuXG4gICAgaWYgKGNvZGUgPCAweDAwMjAgJiYgY29kZSAhPT0gMHgwMDA5KSB7XG4gICAgICB0aHJvdyAoMCwgX2Vycm9yLnN5bnRheEVycm9yKShzb3VyY2UsIHBvc2l0aW9uLCBcIkludmFsaWQgY2hhcmFjdGVyIHdpdGhpbiBTdHJpbmc6IFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIikpO1xuICAgIH1cblxuICAgICsrcG9zaXRpb247XG5cbiAgICBpZiAoY29kZSA9PT0gOTIpIHtcbiAgICAgIC8vIFxcXG4gICAgICB2YWx1ZSArPSBib2R5LnNsaWNlKGNodW5rU3RhcnQsIHBvc2l0aW9uIC0gMSk7XG4gICAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcblxuICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgdmFsdWUgKz0gJ1wiJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgIHZhbHVlICs9ICcvJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDkyOlxuICAgICAgICAgIHZhbHVlICs9ICdcXFxcJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgIHZhbHVlICs9ICdcXGInO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHZhbHVlICs9ICdcXGYnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTEwOlxuICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHZhbHVlICs9ICdcXHInO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE2OlxuICAgICAgICAgIHZhbHVlICs9ICdcXHQnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE3OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIHVYWFhYXG4gICAgICAgICAgICB2YXIgY2hhckNvZGUgPSB1bmlDaGFyQ29kZShib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSwgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMiksIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDMpLCBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyA0KSk7XG5cbiAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgKDAsIF9lcnJvci5zeW50YXhFcnJvcikoc291cmNlLCBwb3NpdGlvbiwgJ0ludmFsaWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZTogJyArIFwiXFxcXHVcIi5jb25jYXQoYm9keS5zbGljZShwb3NpdGlvbiArIDEsIHBvc2l0aW9uICsgNSksIFwiLlwiKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgICAgICAgcG9zaXRpb24gKz0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93ICgwLCBfZXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlOiBcXFxcXCIuY29uY2F0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgICsrcG9zaXRpb247XG4gICAgICBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgKDAsIF9lcnJvci5zeW50YXhFcnJvcikoc291cmNlLCBwb3NpdGlvbiwgJ1VudGVybWluYXRlZCBzdHJpbmcuJyk7XG59XG4vKipcbiAqIFJlYWRzIGEgYmxvY2sgc3RyaW5nIHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqIFwiXCJcIihcIj9cIj8oXFxcXFwiXCJcInxcXFxcKD8hPVwiXCJcIil8W15cIlxcXFxdKSkqXCJcIlwiXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkQmxvY2tTdHJpbmcoc291cmNlLCBzdGFydCwgbGluZSwgY29sLCBwcmV2LCBsZXhlcikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgcG9zaXRpb24gPSBzdGFydCArIDM7XG4gIHZhciBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gIHZhciBjb2RlID0gMDtcbiAgdmFyIHJhd1ZhbHVlID0gJyc7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgYm9keS5sZW5ndGggJiYgIWlzTmFOKGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSkge1xuICAgIC8vIENsb3NpbmcgVHJpcGxlLVF1b3RlIChcIlwiXCIpXG4gICAgaWYgKGNvZGUgPT09IDM0ICYmIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAyKSA9PT0gMzQpIHtcbiAgICAgIHJhd1ZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIG5ldyBUb2soVG9rZW5LaW5kLkJMT0NLX1NUUklORywgc3RhcnQsIHBvc2l0aW9uICsgMywgbGluZSwgY29sLCBwcmV2LCAoMCwgX2Jsb2NrU3RyaW5nLmRlZGVudEJsb2NrU3RyaW5nVmFsdWUpKHJhd1ZhbHVlKSk7XG4gICAgfSAvLyBTb3VyY2VDaGFyYWN0ZXJcblxuXG4gICAgaWYgKGNvZGUgPCAweDAwMjAgJiYgY29kZSAhPT0gMHgwMDA5ICYmIGNvZGUgIT09IDB4MDAwYSAmJiBjb2RlICE9PSAweDAwMGQpIHtcbiAgICAgIHRocm93ICgwLCBfZXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgd2l0aGluIFN0cmluZzogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDEwKSB7XG4gICAgICAvLyBuZXcgbGluZVxuICAgICAgKytwb3NpdGlvbjtcbiAgICAgICsrbGV4ZXIubGluZTtcbiAgICAgIGxleGVyLmxpbmVTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMTMpIHtcbiAgICAgIC8vIGNhcnJpYWdlIHJldHVyblxuICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAxMCkge1xuICAgICAgICBwb3NpdGlvbiArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKytwb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgKytsZXhlci5saW5lO1xuICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gcG9zaXRpb247XG4gICAgfSBlbHNlIGlmICggLy8gRXNjYXBlIFRyaXBsZS1RdW90ZSAoXFxcIlwiXCIpXG4gICAgY29kZSA9PT0gOTIgJiYgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDM0ICYmIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDIpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAzKSA9PT0gMzQpIHtcbiAgICAgIHJhd1ZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pICsgJ1wiXCJcIic7XG4gICAgICBwb3NpdGlvbiArPSA0O1xuICAgICAgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICArK3Bvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93ICgwLCBfZXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sICdVbnRlcm1pbmF0ZWQgc3RyaW5nLicpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBmb3VyIGhleGFkZWNpbWFsIGNoYXJzIHRvIHRoZSBpbnRlZ2VyIHRoYXQgdGhlXG4gKiBzdHJpbmcgcmVwcmVzZW50cy4gRm9yIGV4YW1wbGUsIHVuaUNoYXJDb2RlKCcwJywnMCcsJzAnLCdmJylcbiAqIHdpbGwgcmV0dXJuIDE1LCBhbmQgdW5pQ2hhckNvZGUoJzAnLCcwJywnZicsJ2YnKSByZXR1cm5zIDI1NS5cbiAqXG4gKiBSZXR1cm5zIGEgbmVnYXRpdmUgbnVtYmVyIG9uIGVycm9yLCBpZiBhIGNoYXIgd2FzIGludmFsaWQuXG4gKlxuICogVGhpcyBpcyBpbXBsZW1lbnRlZCBieSBub3RpbmcgdGhhdCBjaGFyMmhleCgpIHJldHVybnMgLTEgb24gZXJyb3IsXG4gKiB3aGljaCBtZWFucyB0aGUgcmVzdWx0IG9mIE9SaW5nIHRoZSBjaGFyMmhleCgpIHdpbGwgYWxzbyBiZSBuZWdhdGl2ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVuaUNoYXJDb2RlKGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIGNoYXIyaGV4KGEpIDw8IDEyIHwgY2hhcjJoZXgoYikgPDwgOCB8IGNoYXIyaGV4KGMpIDw8IDQgfCBjaGFyMmhleChkKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBoZXggY2hhcmFjdGVyIHRvIGl0cyBpbnRlZ2VyIHZhbHVlLlxuICogJzAnIGJlY29tZXMgMCwgJzknIGJlY29tZXMgOVxuICogJ0EnIGJlY29tZXMgMTAsICdGJyBiZWNvbWVzIDE1XG4gKiAnYScgYmVjb21lcyAxMCwgJ2YnIGJlY29tZXMgMTVcbiAqXG4gKiBSZXR1cm5zIC0xIG9uIGVycm9yLlxuICovXG5cblxuZnVuY3Rpb24gY2hhcjJoZXgoYSkge1xuICByZXR1cm4gYSA+PSA0OCAmJiBhIDw9IDU3ID8gYSAtIDQ4IC8vIDAtOVxuICA6IGEgPj0gNjUgJiYgYSA8PSA3MCA/IGEgLSA1NSAvLyBBLUZcbiAgOiBhID49IDk3ICYmIGEgPD0gMTAyID8gYSAtIDg3IC8vIGEtZlxuICA6IC0xO1xufVxuLyoqXG4gKiBSZWFkcyBhbiBhbHBoYW51bWVyaWMgKyB1bmRlcnNjb3JlIG5hbWUgZnJvbSB0aGUgc291cmNlLlxuICpcbiAqIFtfQS1aYS16XVtfMC05QS1aYS16XSpcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWROYW1lKHNvdXJjZSwgc3RhcnQsIGxpbmUsIGNvbCwgcHJldikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICB2YXIgcG9zaXRpb24gPSBzdGFydCArIDE7XG4gIHZhciBjb2RlID0gMDtcblxuICB3aGlsZSAocG9zaXRpb24gIT09IGJvZHlMZW5ndGggJiYgIWlzTmFOKGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSAmJiAoY29kZSA9PT0gOTUgfHwgLy8gX1xuICBjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcgfHwgLy8gMC05XG4gIGNvZGUgPj0gNjUgJiYgY29kZSA8PSA5MCB8fCAvLyBBLVpcbiAgY29kZSA+PSA5NyAmJiBjb2RlIDw9IDEyMikgLy8gYS16XG4gICkge1xuICAgICsrcG9zaXRpb247XG4gIH1cblxuICByZXR1cm4gbmV3IFRvayhUb2tlbktpbmQuTkFNRSwgc3RhcnQsIHBvc2l0aW9uLCBsaW5lLCBjb2wsIHByZXYsIGJvZHkuc2xpY2Uoc3RhcnQsIHBvc2l0aW9uKSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVkZW50QmxvY2tTdHJpbmdWYWx1ZSA9IGRlZGVudEJsb2NrU3RyaW5nVmFsdWU7XG5leHBvcnRzLmdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24gPSBnZXRCbG9ja1N0cmluZ0luZGVudGF0aW9uO1xuZXhwb3J0cy5wcmludEJsb2NrU3RyaW5nID0gcHJpbnRCbG9ja1N0cmluZztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4vKipcbiAqIFByb2R1Y2VzIHRoZSB2YWx1ZSBvZiBhIGJsb2NrIHN0cmluZyBmcm9tIGl0cyBwYXJzZWQgcmF3IHZhbHVlLCBzaW1pbGFyIHRvXG4gKiBDb2ZmZWVTY3JpcHQncyBibG9jayBzdHJpbmcsIFB5dGhvbidzIGRvY3N0cmluZyB0cmltIG9yIFJ1YnkncyBzdHJpcF9oZXJlZG9jLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50cyB0aGUgR3JhcGhRTCBzcGVjJ3MgQmxvY2tTdHJpbmdWYWx1ZSgpIHN0YXRpYyBhbGdvcml0aG0uXG4gKi9cbmZ1bmN0aW9uIGRlZGVudEJsb2NrU3RyaW5nVmFsdWUocmF3U3RyaW5nKSB7XG4gIC8vIEV4cGFuZCBhIGJsb2NrIHN0cmluZydzIHJhdyB2YWx1ZSBpbnRvIGluZGVwZW5kZW50IGxpbmVzLlxuICB2YXIgbGluZXMgPSByYXdTdHJpbmcuc3BsaXQoL1xcclxcbnxbXFxuXFxyXS9nKTsgLy8gUmVtb3ZlIGNvbW1vbiBpbmRlbnRhdGlvbiBmcm9tIGFsbCBsaW5lcyBidXQgZmlyc3QuXG5cbiAgdmFyIGNvbW1vbkluZGVudCA9IGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24obGluZXMpO1xuXG4gIGlmIChjb21tb25JbmRlbnQgIT09IDApIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsaW5lc1tpXSA9IGxpbmVzW2ldLnNsaWNlKGNvbW1vbkluZGVudCk7XG4gICAgfVxuICB9IC8vIFJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBibGFuayBsaW5lcy5cblxuXG4gIHdoaWxlIChsaW5lcy5sZW5ndGggPiAwICYmIGlzQmxhbmsobGluZXNbMF0pKSB7XG4gICAgbGluZXMuc2hpZnQoKTtcbiAgfVxuXG4gIHdoaWxlIChsaW5lcy5sZW5ndGggPiAwICYmIGlzQmxhbmsobGluZXNbbGluZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgbGluZXMucG9wKCk7XG4gIH0gLy8gUmV0dXJuIGEgc3RyaW5nIG9mIHRoZSBsaW5lcyBqb2luZWQgd2l0aCBVKzAwMEEuXG5cblxuICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59IC8vIEBpbnRlcm5hbFxuXG5cbmZ1bmN0aW9uIGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24obGluZXMpIHtcbiAgdmFyIGNvbW1vbkluZGVudCA9IG51bGw7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBsaW5lID0gbGluZXNbaV07XG4gICAgdmFyIGluZGVudCA9IGxlYWRpbmdXaGl0ZXNwYWNlKGxpbmUpO1xuXG4gICAgaWYgKGluZGVudCA9PT0gbGluZS5sZW5ndGgpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBza2lwIGVtcHR5IGxpbmVzXG4gICAgfVxuXG4gICAgaWYgKGNvbW1vbkluZGVudCA9PT0gbnVsbCB8fCBpbmRlbnQgPCBjb21tb25JbmRlbnQpIHtcbiAgICAgIGNvbW1vbkluZGVudCA9IGluZGVudDtcblxuICAgICAgaWYgKGNvbW1vbkluZGVudCA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29tbW9uSW5kZW50ID09PSBudWxsID8gMCA6IGNvbW1vbkluZGVudDtcbn1cblxuZnVuY3Rpb24gbGVhZGluZ1doaXRlc3BhY2Uoc3RyKSB7XG4gIHZhciBpID0gMDtcblxuICB3aGlsZSAoaSA8IHN0ci5sZW5ndGggJiYgKHN0cltpXSA9PT0gJyAnIHx8IHN0cltpXSA9PT0gJ1xcdCcpKSB7XG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGlzQmxhbmsoc3RyKSB7XG4gIHJldHVybiBsZWFkaW5nV2hpdGVzcGFjZShzdHIpID09PSBzdHIubGVuZ3RoO1xufVxuLyoqXG4gKiBQcmludCBhIGJsb2NrIHN0cmluZyBpbiB0aGUgaW5kZW50ZWQgYmxvY2sgZm9ybSBieSBhZGRpbmcgYSBsZWFkaW5nIGFuZFxuICogdHJhaWxpbmcgYmxhbmsgbGluZS4gSG93ZXZlciwgaWYgYSBibG9jayBzdHJpbmcgc3RhcnRzIHdpdGggd2hpdGVzcGFjZSBhbmQgaXNcbiAqIGEgc2luZ2xlLWxpbmUsIGFkZGluZyBhIGxlYWRpbmcgYmxhbmsgbGluZSB3b3VsZCBzdHJpcCB0aGF0IHdoaXRlc3BhY2UuXG4gKi9cblxuXG5mdW5jdGlvbiBwcmludEJsb2NrU3RyaW5nKHZhbHVlKSB7XG4gIHZhciBpbmRlbnRhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gIHZhciBwcmVmZXJNdWx0aXBsZUxpbmVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgdmFyIGlzU2luZ2xlTGluZSA9IHZhbHVlLmluZGV4T2YoJ1xcbicpID09PSAtMTtcbiAgdmFyIGhhc0xlYWRpbmdTcGFjZSA9IHZhbHVlWzBdID09PSAnICcgfHwgdmFsdWVbMF0gPT09ICdcXHQnO1xuICB2YXIgaGFzVHJhaWxpbmdRdW90ZSA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnXCInO1xuICB2YXIgcHJpbnRBc011bHRpcGxlTGluZXMgPSAhaXNTaW5nbGVMaW5lIHx8IGhhc1RyYWlsaW5nUXVvdGUgfHwgcHJlZmVyTXVsdGlwbGVMaW5lcztcbiAgdmFyIHJlc3VsdCA9ICcnOyAvLyBGb3JtYXQgYSBtdWx0aS1saW5lIGJsb2NrIHF1b3RlIHRvIGFjY291bnQgZm9yIGxlYWRpbmcgc3BhY2UuXG5cbiAgaWYgKHByaW50QXNNdWx0aXBsZUxpbmVzICYmICEoaXNTaW5nbGVMaW5lICYmIGhhc0xlYWRpbmdTcGFjZSkpIHtcbiAgICByZXN1bHQgKz0gJ1xcbicgKyBpbmRlbnRhdGlvbjtcbiAgfVxuXG4gIHJlc3VsdCArPSBpbmRlbnRhdGlvbiA/IHZhbHVlLnJlcGxhY2UoL1xcbi9nLCAnXFxuJyArIGluZGVudGF0aW9uKSA6IHZhbHVlO1xuXG4gIGlmIChwcmludEFzTXVsdGlwbGVMaW5lcykge1xuICAgIHJlc3VsdCArPSAnXFxuJztcbiAgfVxuXG4gIHJldHVybiAnXCJcIlwiJyArIHJlc3VsdC5yZXBsYWNlKC9cIlwiXCIvZywgJ1xcXFxcIlwiXCInKSArICdcIlwiXCInO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLktpbmQgPSB2b2lkIDA7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQga2luZCB2YWx1ZXMgZm9yIEFTVCBub2Rlcy5cbiAqL1xudmFyIEtpbmQgPSBPYmplY3QuZnJlZXplKHtcbiAgLy8gTmFtZVxuICBOQU1FOiAnTmFtZScsXG4gIC8vIERvY3VtZW50XG4gIERPQ1VNRU5UOiAnRG9jdW1lbnQnLFxuICBPUEVSQVRJT05fREVGSU5JVElPTjogJ09wZXJhdGlvbkRlZmluaXRpb24nLFxuICBWQVJJQUJMRV9ERUZJTklUSU9OOiAnVmFyaWFibGVEZWZpbml0aW9uJyxcbiAgU0VMRUNUSU9OX1NFVDogJ1NlbGVjdGlvblNldCcsXG4gIEZJRUxEOiAnRmllbGQnLFxuICBBUkdVTUVOVDogJ0FyZ3VtZW50JyxcbiAgLy8gRnJhZ21lbnRzXG4gIEZSQUdNRU5UX1NQUkVBRDogJ0ZyYWdtZW50U3ByZWFkJyxcbiAgSU5MSU5FX0ZSQUdNRU5UOiAnSW5saW5lRnJhZ21lbnQnLFxuICBGUkFHTUVOVF9ERUZJTklUSU9OOiAnRnJhZ21lbnREZWZpbml0aW9uJyxcbiAgLy8gVmFsdWVzXG4gIFZBUklBQkxFOiAnVmFyaWFibGUnLFxuICBJTlQ6ICdJbnRWYWx1ZScsXG4gIEZMT0FUOiAnRmxvYXRWYWx1ZScsXG4gIFNUUklORzogJ1N0cmluZ1ZhbHVlJyxcbiAgQk9PTEVBTjogJ0Jvb2xlYW5WYWx1ZScsXG4gIE5VTEw6ICdOdWxsVmFsdWUnLFxuICBFTlVNOiAnRW51bVZhbHVlJyxcbiAgTElTVDogJ0xpc3RWYWx1ZScsXG4gIE9CSkVDVDogJ09iamVjdFZhbHVlJyxcbiAgT0JKRUNUX0ZJRUxEOiAnT2JqZWN0RmllbGQnLFxuICAvLyBEaXJlY3RpdmVzXG4gIERJUkVDVElWRTogJ0RpcmVjdGl2ZScsXG4gIC8vIFR5cGVzXG4gIE5BTUVEX1RZUEU6ICdOYW1lZFR5cGUnLFxuICBMSVNUX1RZUEU6ICdMaXN0VHlwZScsXG4gIE5PTl9OVUxMX1RZUEU6ICdOb25OdWxsVHlwZScsXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNDSEVNQV9ERUZJTklUSU9OOiAnU2NoZW1hRGVmaW5pdGlvbicsXG4gIE9QRVJBVElPTl9UWVBFX0RFRklOSVRJT046ICdPcGVyYXRpb25UeXBlRGVmaW5pdGlvbicsXG4gIC8vIFR5cGUgRGVmaW5pdGlvbnNcbiAgU0NBTEFSX1RZUEVfREVGSU5JVElPTjogJ1NjYWxhclR5cGVEZWZpbml0aW9uJyxcbiAgT0JKRUNUX1RZUEVfREVGSU5JVElPTjogJ09iamVjdFR5cGVEZWZpbml0aW9uJyxcbiAgRklFTERfREVGSU5JVElPTjogJ0ZpZWxkRGVmaW5pdGlvbicsXG4gIElOUFVUX1ZBTFVFX0RFRklOSVRJT046ICdJbnB1dFZhbHVlRGVmaW5pdGlvbicsXG4gIElOVEVSRkFDRV9UWVBFX0RFRklOSVRJT046ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbicsXG4gIFVOSU9OX1RZUEVfREVGSU5JVElPTjogJ1VuaW9uVHlwZURlZmluaXRpb24nLFxuICBFTlVNX1RZUEVfREVGSU5JVElPTjogJ0VudW1UeXBlRGVmaW5pdGlvbicsXG4gIEVOVU1fVkFMVUVfREVGSU5JVElPTjogJ0VudW1WYWx1ZURlZmluaXRpb24nLFxuICBJTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOiAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbicsXG4gIC8vIERpcmVjdGl2ZSBEZWZpbml0aW9uc1xuICBESVJFQ1RJVkVfREVGSU5JVElPTjogJ0RpcmVjdGl2ZURlZmluaXRpb24nLFxuICAvLyBUeXBlIFN5c3RlbSBFeHRlbnNpb25zXG4gIFNDSEVNQV9FWFRFTlNJT046ICdTY2hlbWFFeHRlbnNpb24nLFxuICAvLyBUeXBlIEV4dGVuc2lvbnNcbiAgU0NBTEFSX1RZUEVfRVhURU5TSU9OOiAnU2NhbGFyVHlwZUV4dGVuc2lvbicsXG4gIE9CSkVDVF9UWVBFX0VYVEVOU0lPTjogJ09iamVjdFR5cGVFeHRlbnNpb24nLFxuICBJTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT046ICdJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uJyxcbiAgVU5JT05fVFlQRV9FWFRFTlNJT046ICdVbmlvblR5cGVFeHRlbnNpb24nLFxuICBFTlVNX1RZUEVfRVhURU5TSU9OOiAnRW51bVR5cGVFeHRlbnNpb24nLFxuICBJTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT046ICdJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24nXG59KTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHBvc3NpYmxlIGtpbmQgdmFsdWVzIG9mIEFTVCBub2Rlcy5cbiAqL1xuXG5leHBvcnRzLktpbmQgPSBLaW5kO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkRpcmVjdGl2ZUxvY2F0aW9uID0gdm9pZCAwO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbi8qKlxuICogVGhlIHNldCBvZiBhbGxvd2VkIGRpcmVjdGl2ZSBsb2NhdGlvbiB2YWx1ZXMuXG4gKi9cbnZhciBEaXJlY3RpdmVMb2NhdGlvbiA9IE9iamVjdC5mcmVlemUoe1xuICAvLyBSZXF1ZXN0IERlZmluaXRpb25zXG4gIFFVRVJZOiAnUVVFUlknLFxuICBNVVRBVElPTjogJ01VVEFUSU9OJyxcbiAgU1VCU0NSSVBUSU9OOiAnU1VCU0NSSVBUSU9OJyxcbiAgRklFTEQ6ICdGSUVMRCcsXG4gIEZSQUdNRU5UX0RFRklOSVRJT046ICdGUkFHTUVOVF9ERUZJTklUSU9OJyxcbiAgRlJBR01FTlRfU1BSRUFEOiAnRlJBR01FTlRfU1BSRUFEJyxcbiAgSU5MSU5FX0ZSQUdNRU5UOiAnSU5MSU5FX0ZSQUdNRU5UJyxcbiAgVkFSSUFCTEVfREVGSU5JVElPTjogJ1ZBUklBQkxFX0RFRklOSVRJT04nLFxuICAvLyBUeXBlIFN5c3RlbSBEZWZpbml0aW9uc1xuICBTQ0hFTUE6ICdTQ0hFTUEnLFxuICBTQ0FMQVI6ICdTQ0FMQVInLFxuICBPQkpFQ1Q6ICdPQkpFQ1QnLFxuICBGSUVMRF9ERUZJTklUSU9OOiAnRklFTERfREVGSU5JVElPTicsXG4gIEFSR1VNRU5UX0RFRklOSVRJT046ICdBUkdVTUVOVF9ERUZJTklUSU9OJyxcbiAgSU5URVJGQUNFOiAnSU5URVJGQUNFJyxcbiAgVU5JT046ICdVTklPTicsXG4gIEVOVU06ICdFTlVNJyxcbiAgRU5VTV9WQUxVRTogJ0VOVU1fVkFMVUUnLFxuICBJTlBVVF9PQkpFQ1Q6ICdJTlBVVF9PQkpFQ1QnLFxuICBJTlBVVF9GSUVMRF9ERUZJTklUSU9OOiAnSU5QVVRfRklFTERfREVGSU5JVElPTidcbn0pO1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqL1xuXG5leHBvcnRzLkRpcmVjdGl2ZUxvY2F0aW9uID0gRGlyZWN0aXZlTG9jYXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vID09PSBTeW1ib2wgU3VwcG9ydCA9PT1cblxudmFyIGhhc1N5bWJvbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nO1xufTtcbnZhciBoYXNTeW1ib2wgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaGFzU3ltYm9scygpICYmIEJvb2xlYW4oU3ltYm9sW25hbWVdKTtcbn07XG52YXIgZ2V0U3ltYm9sID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGhhc1N5bWJvbChuYW1lKSA/IFN5bWJvbFtuYW1lXSA6ICdAQCcgKyBuYW1lO1xufTtcblxuaWYgKGhhc1N5bWJvbHMoKSAmJiAhaGFzU3ltYm9sKCdvYnNlcnZhYmxlJykpIHtcbiAgU3ltYm9sLm9ic2VydmFibGUgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcbn1cblxudmFyIFN5bWJvbEl0ZXJhdG9yID0gZ2V0U3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFN5bWJvbE9ic2VydmFibGUgPSBnZXRTeW1ib2woJ29ic2VydmFibGUnKTtcbnZhciBTeW1ib2xTcGVjaWVzID0gZ2V0U3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vID09PSBBYnN0cmFjdCBPcGVyYXRpb25zID09PVxuXG5mdW5jdGlvbiBnZXRNZXRob2Qob2JqLCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gb2JqW2tleV07XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcih2YWx1ZSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldFNwZWNpZXMob2JqKSB7XG4gIHZhciBjdG9yID0gb2JqLmNvbnN0cnVjdG9yO1xuICBpZiAoY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY3RvciA9IGN0b3JbU3ltYm9sU3BlY2llc107XG4gICAgaWYgKGN0b3IgPT09IG51bGwpIHtcbiAgICAgIGN0b3IgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBjdG9yICE9PSB1bmRlZmluZWQgPyBjdG9yIDogT2JzZXJ2YWJsZTtcbn1cblxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHgpIHtcbiAgcmV0dXJuIHggaW5zdGFuY2VvZiBPYnNlcnZhYmxlOyAvLyBTUEVDOiBCcmFuZCBjaGVja1xufVxuXG5mdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZSkge1xuICBpZiAoaG9zdFJlcG9ydEVycm9yLmxvZykge1xuICAgIGhvc3RSZXBvcnRFcnJvci5sb2coZSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVucXVldWUoZm4pIHtcbiAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaG9zdFJlcG9ydEVycm9yKGUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jbGVhbnVwO1xuICBpZiAoY2xlYW51cCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgc3Vic2NyaXB0aW9uLl9jbGVhbnVwID0gdW5kZWZpbmVkO1xuXG4gIGlmICghY2xlYW51cCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiBjbGVhbnVwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1bnN1YnNjcmliZSA9IGdldE1ldGhvZChjbGVhbnVwLCAndW5zdWJzY3JpYmUnKTtcbiAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICB1bnN1YnNjcmliZS5jYWxsKGNsZWFudXApO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhvc3RSZXBvcnRFcnJvcihlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgc3Vic2NyaXB0aW9uLl9vYnNlcnZlciA9IHVuZGVmaW5lZDtcbiAgc3Vic2NyaXB0aW9uLl9xdWV1ZSA9IHVuZGVmaW5lZDtcbiAgc3Vic2NyaXB0aW9uLl9zdGF0ZSA9ICdjbG9zZWQnO1xufVxuXG5mdW5jdGlvbiBmbHVzaFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgdmFyIHF1ZXVlID0gc3Vic2NyaXB0aW9uLl9xdWV1ZTtcbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBzdWJzY3JpcHRpb24uX3F1ZXVlID0gdW5kZWZpbmVkO1xuICBzdWJzY3JpcHRpb24uX3N0YXRlID0gJ3JlYWR5JztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgIG5vdGlmeVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIHF1ZXVlW2ldLnR5cGUsIHF1ZXVlW2ldLnZhbHVlKTtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vdGlmeVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIHR5cGUsIHZhbHVlKSB7XG4gIHN1YnNjcmlwdGlvbi5fc3RhdGUgPSAncnVubmluZyc7XG5cbiAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vYnNlcnZlcjtcblxuICB0cnkge1xuICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLCB0eXBlKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICBpZiAobSkgbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICBpZiAobSkgbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7ZWxzZSB0aHJvdyB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjb21wbGV0ZSc6XG4gICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIGlmIChtKSBtLmNhbGwob2JzZXJ2ZXIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBob3N0UmVwb3J0RXJyb3IoZSk7XG4gIH1cblxuICBpZiAoc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtlbHNlIGlmIChzdWJzY3JpcHRpb24uX3N0YXRlID09PSAncnVubmluZycpIHN1YnNjcmlwdGlvbi5fc3RhdGUgPSAncmVhZHknO1xufVxuXG5mdW5jdGlvbiBvbk5vdGlmeShzdWJzY3JpcHRpb24sIHR5cGUsIHZhbHVlKSB7XG4gIGlmIChzdWJzY3JpcHRpb24uX3N0YXRlID09PSAnY2xvc2VkJykgcmV0dXJuO1xuXG4gIGlmIChzdWJzY3JpcHRpb24uX3N0YXRlID09PSAnYnVmZmVyaW5nJykge1xuICAgIHN1YnNjcmlwdGlvbi5fcXVldWUucHVzaCh7IHR5cGU6IHR5cGUsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3Vic2NyaXB0aW9uLl9zdGF0ZSAhPT0gJ3JlYWR5Jykge1xuICAgIHN1YnNjcmlwdGlvbi5fc3RhdGUgPSAnYnVmZmVyaW5nJztcbiAgICBzdWJzY3JpcHRpb24uX3F1ZXVlID0gW3sgdHlwZTogdHlwZSwgdmFsdWU6IHZhbHVlIH1dO1xuICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZsdXNoU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbm90aWZ5U3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbiwgdHlwZSwgdmFsdWUpO1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHN1YnNjcmliZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIC8vIEFTU0VSVDogb2JzZXJ2ZXIgaXMgYW4gb2JqZWN0XG4gICAgLy8gQVNTRVJUOiBzdWJzY3JpYmVyIGlzIGNhbGxhYmxlXG5cbiAgICB0aGlzLl9jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX29ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgdGhpcy5fcXVldWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3RhdGUgPSAnaW5pdGlhbGl6aW5nJztcblxuICAgIHZhciBzdWJzY3JpcHRpb25PYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLl9jbGVhbnVwID0gc3Vic2NyaWJlci5jYWxsKHVuZGVmaW5lZCwgc3Vic2NyaXB0aW9uT2JzZXJ2ZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHN1YnNjcmlwdGlvbk9ic2VydmVyLmVycm9yKGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gJ2luaXRpYWxpemluZycpIHRoaXMuX3N0YXRlID0gJ3JlYWR5JztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdWJzY3JpcHRpb24sIFt7XG4gICAga2V5OiAndW5zdWJzY3JpYmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xvc2VkJyxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0ZSA9PT0gJ2Nsb3NlZCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb25PYnNlcnZlcihzdWJzY3JpcHRpb24pIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIpO1xuXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN1YnNjcmlwdGlvbk9ic2VydmVyLCBbe1xuICAgIGtleTogJ25leHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgICBvbk5vdGlmeSh0aGlzLl9zdWJzY3JpcHRpb24sICduZXh0JywgdmFsdWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Vycm9yJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICAgIG9uTm90aWZ5KHRoaXMuX3N1YnNjcmlwdGlvbiwgJ2Vycm9yJywgdmFsdWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBsZXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICBvbk5vdGlmeSh0aGlzLl9zdWJzY3JpcHRpb24sICdjb21wbGV0ZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb3NlZCcsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ2Nsb3NlZCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbk9ic2VydmVyO1xufSgpO1xuXG52YXIgT2JzZXJ2YWJsZSA9IGV4cG9ydHMuT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9ic2VydmFibGUpO1xuXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE9ic2VydmFibGUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYnNlcnZhYmxlIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbicpO1xuXG4gICAgaWYgKHR5cGVvZiBzdWJzY3JpYmVyICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYnNlcnZhYmxlIGluaXRpYWxpemVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gICAgdGhpcy5fc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoT2JzZXJ2YWJsZSwgW3tcbiAgICBrZXk6ICdzdWJzY3JpYmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgIG9ic2VydmVyID0ge1xuICAgICAgICAgIG5leHQ6IG9ic2VydmVyLFxuICAgICAgICAgIGVycm9yOiBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgY29tcGxldGU6IGFyZ3VtZW50c1syXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX3N1YnNjcmliZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZvckVhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmbih2YWx1ZSwgZG9uZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdtYXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXAoZm4pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXG4gICAgICB2YXIgQyA9IGdldFNwZWNpZXModGhpcyk7XG5cbiAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmaWx0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXIoZm4pIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXG4gICAgICB2YXIgQyA9IGdldFNwZWNpZXModGhpcyk7XG5cbiAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKCFmbih2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZHVjZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZHVjZShmbikge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cbiAgICAgIHZhciBDID0gZ2V0U3BlY2llcyh0aGlzKTtcbiAgICAgIHZhciBoYXNTZWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDE7XG4gICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzZWVkID0gYXJndW1lbnRzWzFdO1xuICAgICAgdmFyIGFjYyA9IHNlZWQ7XG5cbiAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGZpcnN0ID0gIWhhc1ZhbHVlO1xuICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAoIWZpcnN0IHx8IGhhc1NlZWQpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhY2MgPSBmbihhY2MsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYWNjID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghaGFzVmFsdWUgJiYgIWhhc1NlZWQpIHJldHVybiBvYnNlcnZlci5lcnJvcihuZXcgVHlwZUVycm9yKCdDYW5ub3QgcmVkdWNlIGFuIGVtcHR5IHNlcXVlbmNlJykpO1xuXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGFjYyk7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb25jYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNvdXJjZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgc291cmNlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIEMgPSBnZXRTcGVjaWVzKHRoaXMpO1xuXG4gICAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB2b2lkIDA7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gc3RhcnROZXh0KG5leHQpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXh0LnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHYpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnROZXh0KEMuZnJvbShzb3VyY2VzW2luZGV4KytdKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0TmV4dChfdGhpczUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZmxhdE1hcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZsYXRNYXAoZm4pIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXG4gICAgICB2YXIgQyA9IGdldFNwZWNpZXModGhpcyk7XG5cbiAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICAgICAgICB2YXIgb3V0ZXIgPSBfdGhpczYuc3Vic2NyaWJlKHtcbiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZm4odmFsdWUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbm5lciA9IEMuZnJvbSh2YWx1ZSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKGlubmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSAwKSBzdWJzY3JpcHRpb25zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUlmRG9uZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKGlubmVyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tcGxldGVJZkRvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlSWZEb25lKCkge1xuICAgICAgICAgIGlmIChvdXRlci5jbG9zZWQgJiYgc3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvdXRlci51bnN1YnNjcmliZSgpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBTeW1ib2xPYnNlcnZhYmxlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2Zyb20nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogT2JzZXJ2YWJsZTtcblxuICAgICAgaWYgKHggPT0gbnVsbCkgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cbiAgICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoeCwgU3ltYm9sT2JzZXJ2YWJsZSk7XG4gICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbWV0aG9kLmNhbGwoeCk7XG5cbiAgICAgICAgaWYgKE9iamVjdChvYnNlcnZhYmxlKSAhPT0gb2JzZXJ2YWJsZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihvYnNlcnZhYmxlICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSAmJiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4gb2JzZXJ2YWJsZTtcblxuICAgICAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNTeW1ib2woJ2l0ZXJhdG9yJykpIHtcbiAgICAgICAgbWV0aG9kID0gZ2V0TWV0aG9kKHgsIFN5bWJvbEl0ZXJhdG9yKTtcbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKSByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IG1ldGhvZC5jYWxsKHgpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtKTtcbiAgICAgICAgICAgICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICBlbnF1ZXVlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHhbaV0pO1xuICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKSByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgJyBpcyBub3Qgb2JzZXJ2YWJsZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2YoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgaXRlbXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBPYnNlcnZhYmxlO1xuXG4gICAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybjtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2ldKTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFN5bWJvbFNwZWNpZXMsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKTtcblxuaWYgKGhhc1N5bWJvbHMoKSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZSwgU3ltYm9sKCdleHRlbnNpb25zJyksIHtcbiAgICB2YWx1ZToge1xuICAgICAgc3ltYm9sOiBTeW1ib2xPYnNlcnZhYmxlLFxuICAgICAgaG9zdFJlcG9ydEVycm9yOiBob3N0UmVwb3J0RXJyb3JcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn0iLCJpbXBvcnQgemVuT2JzZXJ2YWJsZSBmcm9tICd6ZW4tb2JzZXJ2YWJsZSc7XG5cbnZhciBPYnNlcnZhYmxlID0gemVuT2JzZXJ2YWJsZTtcblxuZXhwb3J0IGRlZmF1bHQgT2JzZXJ2YWJsZTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsZS5lc20uanMubWFwXG4iLCJpbXBvcnQgT2JzZXJ2YWJsZSBmcm9tICd6ZW4tb2JzZXJ2YWJsZS10cyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE9ic2VydmFibGUgfSBmcm9tICd6ZW4tb2JzZXJ2YWJsZS10cyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQsIEludmFyaWFudEVycm9yIH0gZnJvbSAndHMtaW52YXJpYW50JztcbmltcG9ydCB7IF9fZXh0ZW5kcywgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSAnYXBvbGxvLXV0aWxpdGllcyc7XG5leHBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSAnYXBvbGxvLXV0aWxpdGllcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlT3BlcmF0aW9uKG9wZXJhdGlvbikge1xuICAgIHZhciBPUEVSQVRJT05fRklFTERTID0gW1xuICAgICAgICAncXVlcnknLFxuICAgICAgICAnb3BlcmF0aW9uTmFtZScsXG4gICAgICAgICd2YXJpYWJsZXMnLFxuICAgICAgICAnZXh0ZW5zaW9ucycsXG4gICAgICAgICdjb250ZXh0JyxcbiAgICBdO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICBpZiAoT1BFUkFUSU9OX0ZJRUxEUy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBuZXcgSW52YXJpYW50RXJyb3IoMikgOiBuZXcgSW52YXJpYW50RXJyb3IoXCJpbGxlZ2FsIGFyZ3VtZW50OiBcIiArIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbjtcbn1cbnZhciBMaW5rRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMaW5rRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGlua0Vycm9yKG1lc3NhZ2UsIGxpbmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubGluayA9IGxpbms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIExpbmtFcnJvcjtcbn0oRXJyb3IpKTtcbmZ1bmN0aW9uIGlzVGVybWluYXRpbmcobGluaykge1xuICAgIHJldHVybiBsaW5rLnJlcXVlc3QubGVuZ3RoIDw9IDE7XG59XG5mdW5jdGlvbiB0b1Byb21pc2Uob2JzZXJ2YWJsZSkge1xuICAgIHZhciBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiIHx8IGludmFyaWFudC53YXJuKFwiUHJvbWlzZSBXcmFwcGVyIGRvZXMgbm90IHN1cHBvcnQgbXVsdGlwbGUgcmVzdWx0cyBmcm9tIE9ic2VydmFibGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbnZhciBtYWtlUHJvbWlzZSA9IHRvUHJvbWlzZTtcbmZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZyb21FcnJvcihlcnJvclZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvclZhbHVlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybU9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIHZhcmlhYmxlczogb3BlcmF0aW9uLnZhcmlhYmxlcyB8fCB7fSxcbiAgICAgICAgZXh0ZW5zaW9uczogb3BlcmF0aW9uLmV4dGVuc2lvbnMgfHwge30sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICBxdWVyeTogb3BlcmF0aW9uLnF1ZXJ5LFxuICAgIH07XG4gICAgaWYgKCF0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vcGVyYXRpb25OYW1lKSB7XG4gICAgICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUgPVxuICAgICAgICAgICAgdHlwZW9mIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnF1ZXJ5ICE9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gZ2V0T3BlcmF0aW9uTmFtZSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSlcbiAgICAgICAgICAgICAgICA6ICcnO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb247XG59XG5mdW5jdGlvbiBjcmVhdGVPcGVyYXRpb24oc3RhcnRpbmcsIG9wZXJhdGlvbikge1xuICAgIHZhciBjb250ZXh0ID0gX19hc3NpZ24oe30sIHN0YXJ0aW5nKTtcbiAgICB2YXIgc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29udGV4dCA9IF9fYXNzaWduKHt9LCBjb250ZXh0LCBuZXh0KGNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBfX2Fzc2lnbih7fSwgY29udGV4dCwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKF9fYXNzaWduKHt9LCBjb250ZXh0KSk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ3NldENvbnRleHQnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2V0Q29udGV4dCxcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3BlcmF0aW9uLCAnZ2V0Q29udGV4dCcsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBnZXRDb250ZXh0LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sICd0b0tleScsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRLZXkob3BlcmF0aW9uKTsgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuZnVuY3Rpb24gZ2V0S2V5KG9wZXJhdGlvbikge1xuICAgIHZhciBxdWVyeSA9IG9wZXJhdGlvbi5xdWVyeSwgdmFyaWFibGVzID0gb3BlcmF0aW9uLnZhcmlhYmxlcywgb3BlcmF0aW9uTmFtZSA9IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShbb3BlcmF0aW9uTmFtZSwgcXVlcnksIHZhcmlhYmxlc10pO1xufVxuXG5mdW5jdGlvbiBwYXNzdGhyb3VnaChvcCwgZm9yd2FyZCkge1xuICAgIHJldHVybiBmb3J3YXJkID8gZm9yd2FyZChvcCkgOiBPYnNlcnZhYmxlLm9mKCk7XG59XG5mdW5jdGlvbiB0b0xpbmsoaGFuZGxlcikge1xuICAgIHJldHVybiB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBBcG9sbG9MaW5rKGhhbmRsZXIpIDogaGFuZGxlcjtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKCk7IH0pO1xufVxuZnVuY3Rpb24gZnJvbShsaW5rcykge1xuICAgIGlmIChsaW5rcy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgIHJldHVybiBsaW5rcy5tYXAodG9MaW5rKS5yZWR1Y2UoZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIHguY29uY2F0KHkpOyB9KTtcbn1cbmZ1bmN0aW9uIHNwbGl0KHRlc3QsIGxlZnQsIHJpZ2h0KSB7XG4gICAgdmFyIGxlZnRMaW5rID0gdG9MaW5rKGxlZnQpO1xuICAgIHZhciByaWdodExpbmsgPSB0b0xpbmsocmlnaHQgfHwgbmV3IEFwb2xsb0xpbmsocGFzc3Rocm91Z2gpKTtcbiAgICBpZiAoaXNUZXJtaW5hdGluZyhsZWZ0TGluaykgJiYgaXNUZXJtaW5hdGluZyhyaWdodExpbmspKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdChvcGVyYXRpb24pXG4gICAgICAgICAgICAgICAgPyBsZWZ0TGluay5yZXF1ZXN0KG9wZXJhdGlvbikgfHwgT2JzZXJ2YWJsZS5vZigpXG4gICAgICAgICAgICAgICAgOiByaWdodExpbmsucmVxdWVzdChvcGVyYXRpb24pIHx8IE9ic2VydmFibGUub2YoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEFwb2xsb0xpbmsoZnVuY3Rpb24gKG9wZXJhdGlvbiwgZm9yd2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRlc3Qob3BlcmF0aW9uKVxuICAgICAgICAgICAgICAgID8gbGVmdExpbmsucmVxdWVzdChvcGVyYXRpb24sIGZvcndhcmQpIHx8IE9ic2VydmFibGUub2YoKVxuICAgICAgICAgICAgICAgIDogcmlnaHRMaW5rLnJlcXVlc3Qob3BlcmF0aW9uLCBmb3J3YXJkKSB8fCBPYnNlcnZhYmxlLm9mKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbnZhciBjb25jYXQgPSBmdW5jdGlvbiAoZmlyc3QsIHNlY29uZCkge1xuICAgIHZhciBmaXJzdExpbmsgPSB0b0xpbmsoZmlyc3QpO1xuICAgIGlmIChpc1Rlcm1pbmF0aW5nKGZpcnN0TGluaykpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiIHx8IGludmFyaWFudC53YXJuKG5ldyBMaW5rRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgY29uY2F0IG9uIGEgdGVybWluYXRpbmcgbGluaywgd2hpY2ggd2lsbCBoYXZlIG5vIGVmZmVjdFwiLCBmaXJzdExpbmspKTtcbiAgICAgICAgcmV0dXJuIGZpcnN0TGluaztcbiAgICB9XG4gICAgdmFyIG5leHRMaW5rID0gdG9MaW5rKHNlY29uZCk7XG4gICAgaWYgKGlzVGVybWluYXRpbmcobmV4dExpbmspKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlyc3RMaW5rLnJlcXVlc3Qob3BlcmF0aW9uLCBmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG5leHRMaW5rLnJlcXVlc3Qob3ApIHx8IE9ic2VydmFibGUub2YoKTsgfSkgfHwgT2JzZXJ2YWJsZS5vZigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gKGZpcnN0TGluay5yZXF1ZXN0KG9wZXJhdGlvbiwgZnVuY3Rpb24gKG9wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRMaW5rLnJlcXVlc3Qob3AsIGZvcndhcmQpIHx8IE9ic2VydmFibGUub2YoKTtcbiAgICAgICAgICAgIH0pIHx8IE9ic2VydmFibGUub2YoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG52YXIgQXBvbGxvTGluayA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXBvbGxvTGluayhyZXF1ZXN0KSB7XG4gICAgICAgIGlmIChyZXF1ZXN0KVxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB9XG4gICAgQXBvbGxvTGluay5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAodGVzdCwgbGVmdCwgcmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uY2F0KHNwbGl0KHRlc3QsIGxlZnQsIHJpZ2h0IHx8IG5ldyBBcG9sbG9MaW5rKHBhc3N0aHJvdWdoKSkpO1xuICAgIH07XG4gICAgQXBvbGxvTGluay5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmNhdCh0aGlzLCBuZXh0KTtcbiAgICB9O1xuICAgIEFwb2xsb0xpbmsucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgIHRocm93IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IG5ldyBJbnZhcmlhbnRFcnJvcigxKSA6IG5ldyBJbnZhcmlhbnRFcnJvcigncmVxdWVzdCBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9O1xuICAgIEFwb2xsb0xpbmsuZW1wdHkgPSBlbXB0eTtcbiAgICBBcG9sbG9MaW5rLmZyb20gPSBmcm9tO1xuICAgIEFwb2xsb0xpbmsuc3BsaXQgPSBzcGxpdDtcbiAgICBBcG9sbG9MaW5rLmV4ZWN1dGUgPSBleGVjdXRlO1xuICAgIHJldHVybiBBcG9sbG9MaW5rO1xufSgpKTtcbmZ1bmN0aW9uIGV4ZWN1dGUobGluaywgb3BlcmF0aW9uKSB7XG4gICAgcmV0dXJuIChsaW5rLnJlcXVlc3QoY3JlYXRlT3BlcmF0aW9uKG9wZXJhdGlvbi5jb250ZXh0LCB0cmFuc2Zvcm1PcGVyYXRpb24odmFsaWRhdGVPcGVyYXRpb24ob3BlcmF0aW9uKSkpKSB8fCBPYnNlcnZhYmxlLm9mKCkpO1xufVxuXG5leHBvcnQgeyBBcG9sbG9MaW5rLCBjb25jYXQsIGNyZWF0ZU9wZXJhdGlvbiwgZW1wdHksIGV4ZWN1dGUsIGZyb20sIGZyb21FcnJvciwgZnJvbVByb21pc2UsIG1ha2VQcm9taXNlLCBzcGxpdCwgdG9Qcm9taXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idW5kbGUuZXNtLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==